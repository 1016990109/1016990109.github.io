<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>七秒悲伤的博客</title>
  
  <subtitle>一个深藏功与名的软件开发爱好者</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://1016990109.github.io/"/>
  <updated>2018-09-04T13:25:48.714Z</updated>
  <id>http://1016990109.github.io/</id>
  
  <author>
    <name>七秒悲伤</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端基础之HTML</title>
    <link href="http://1016990109.github.io/2018/09/04/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E4%B9%8BHTML/"/>
    <id>http://1016990109.github.io/2018/09/04/前端基础之HTML/</id>
    <published>2018-09-04T03:29:55.000Z</published>
    <updated>2018-09-04T13:25:48.714Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DOCTYPE"><a href="#DOCTYPE" class="headerlink" title="DOCTYPE"></a>DOCTYPE</h2><p><code>DOCTYPE</code> 是用来声明文档类型和 <code>DTD</code> 规范的，一个主要的用途便是文件的合法性验证。如果文件代码不合法，那么浏览器解析时便会出一些差错。<code>HTML</code> 编辑器通常也会在语法高亮的同时提供合法性验证。</p><p>通常有以下几种：</p><ul><li><p>HTML5(推荐使用，其他的有触发怪异模式和近标准模式的风险)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li><p>HTML 4.01 Strict</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>HTML 4.01 Transitional</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>上面的类型浏览器都会以标准模式渲染，除了下面这些情况（这些情况浏览器会进入兼容模式，也称怪异模式）：</p><ul><li><code>DOCTYPE</code> 声明了 <code>Transitional DTD</code> 但未给出 <code>URI</code></li><li><code>DOCTYPE</code> 声明不合法</li><li>未给出 <code>DOCTYPE</code> 声明</li></ul><blockquote><p>确定把 <code>DOCTYPE</code> 正确地放在 <code>HTML</code> 文件的顶端。任何放在 <code>DOCTYPE</code> 前面的东西，比如批注或 <code>XML</code> 声明，会令 <code>Internet Explorer 9</code> 或更早期的浏览器触发怪异模式。</p></blockquote><h2 id="标准模式和怪异模式的区别"><a href="#标准模式和怪异模式的区别" class="headerlink" title="标准模式和怪异模式的区别"></a>标准模式和怪异模式的区别</h2><ul><li><p>盒模型的处理差异<br>标准 <code>CSS</code> 盒模型的宽度和高度等于内容区的高度和宽度，不包含内边距和边框，而 <code>IE6</code> 之前的浏览器实现的盒模型的宽高计算方式是包含内边距和边框的。因此，对于 <code>IE</code>，怪异模式和标准模式下的盒模型宽高计算方式是不一样的；</p></li><li><p>行内元素的垂直对齐<br>很多早期的浏览器对齐图片至包含它们的盒子的下边框，虽然 <code>CSS</code> 的规范要求它们被对齐至盒内文本的基线。标准模式下，基于 <code>Gecko</code> 的浏览器将会对齐至基线，而在 <code>quirks</code> 模式下它们会对齐至底部。最直接的例子就是图片的显示。在标准模式下，图片并不是与父元素的下边框对齐的，如果仔细观察，你会发现图片与父元素下边框之间存在一点小空隙。那是因为标准模式下，图片是基线对齐的。而怪异模式下，则不存在这个问题。具体请看这篇文章 <a href="https://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/" target="_blank" rel="noopener">CSS 深入理解 vertical-align 和 line-height 的基友关系</a>。</p></li></ul><h2 id="多语言"><a href="#多语言" class="headerlink" title="多语言"></a>多语言</h2><p>当客户端向服务器发送 <code>HTTP</code> 请求时，通常会发送有关语言首选项的信息，比如使用 <code>Accept-Language</code> 请求头。如果替换语言存在，服务器可以利用该信息返回与之相匹配的 <code>HTML</code> 文档。返回的 <code>HTML</code> 文档还应在 <code>&lt;html&gt;</code> 标签中声明 <code>lang</code> 属性，比如 <code>&lt;html lang=&quot;en&quot;&gt;...&lt;/html&gt;</code>。</p><h2 id="HTML5-的基本构件"><a href="#HTML5-的基本构件" class="headerlink" title="HTML5 的基本构件"></a>HTML5 的基本构件</h2><ul><li>语义 - 提供更准确地描述内容。</li><li>连接 - 提供新的方式与服务器通信。</li><li>离线和存储 - 允许网页在本地存储数据并有效地离线运行。</li><li>多媒体 - 在 <code>Open Web</code> 中，视频和音频被视为一等公民（<code>first-class citizens</code>）。</li><li>2D/3D 图形和特效 - 提供更多种演示选项。</li><li>性能和集成 - 提供更快的访问速度和性能更好的计算机硬件。</li><li>设备访问 - 允许使用各种输入、输出设备。</li><li>外观 - 可以开发丰富的主题。</li></ul><h2 id="cookie、sessionStorage-和-localStorage-的区别"><a href="#cookie、sessionStorage-和-localStorage-的区别" class="headerlink" title="cookie、sessionStorage 和 localStorage 的区别"></a>cookie、sessionStorage 和 localStorage 的区别</h2><table><thead><tr><th></th><th>cookie</th><th>localStorage</th><th>sessionStorage</th></tr></thead><tbody><tr><td>由谁初始化</td><td>客户端或服务器，服务器可以使用 Set-Cookie 响应头。</td><td>客户端</td><td>客户端</td></tr><tr><td>过期时间</td><td>手动设置</td><td>永不过期</td><td>当前页面关闭时</td></tr><tr><td>在当前浏览器会话（browser sessions）中是否保持不变</td><td>取决于是否设置了过期时间</td><td>是</td><td>否</td></tr><tr><td>是否随着每个 HTTP 请求发送给服务器</td><td>是，Cookies 会通过 Cookie 请求头，自动发送给服务器</td><td>否</td><td>否</td></tr><tr><td>容量（每个域名，每个域名都有单独的存储）</td><td>4kb</td><td>5MB</td><td>5MB</td></tr><tr><td>访问权限</td><td>任意窗口</td><td>任意窗口</td><td>当前页面窗口</td></tr></tbody></table><h2 id="渐进式渲染"><a href="#渐进式渲染" class="headerlink" title="渐进式渲染"></a>渐进式渲染</h2><ul><li>图片懒加载——页面上的图片不会一次性全部加载。当用户滚动页面到图片部分时，<code>JavaScript</code> 将加载并显示图像。</li><li>确定显示内容的优先级（分层次渲染）——为了尽快将页面呈现给用户，页面只包含基本的最少量的 <code>CSS</code>、脚本和内容，然后可以使用延迟加载脚本或监听 <code>DOMContentLoaded/load</code> 事件加载其他资源和内容。</li><li>异步加载 <code>HTML</code> 片段——当页面通过后台渲染时，把 <code>HTML</code> 拆分，通过异步请求，分块发送给浏览器。</li></ul><h2 id="响应式图片"><a href="#响应式图片" class="headerlink" title="响应式图片"></a>响应式图片</h2><p>设计响应式图片时我们可以使用两个新的属性 —— <code>srcset</code> 和 <code>sizes</code> —— 来提供更多额外的资源图像和提示，帮助浏览器选择正确的一个资源。</p><p><code>srcset</code> 定义了我们允许浏览器选择的图像集，以及每个图像的大小。</p><p><code>sizes</code> 定义了一组媒体条件（例如屏幕宽度）并且指明当某些媒体条件为真时，什么样的图片尺寸是最佳选择。</p><p>所以，有了这些属性，浏览器会：</p><ol><li>查看设备宽度</li><li>检查 <code>sizes</code> 列表中哪个媒体条件是第一个为真</li><li>查看给予该媒体查询的槽大小</li><li>加载 <code>srcset</code> 列表中引用的最接近所选的槽大小的图像</li></ol><p>更加具体的使用方式可以查看 <a href="https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images" target="_blank" rel="noopener">响应式图片</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;DOCTYPE&quot;&gt;&lt;a href=&quot;#DOCTYPE&quot; class=&quot;headerlink&quot; title=&quot;DOCTYPE&quot;&gt;&lt;/a&gt;DOCTYPE&lt;/h2&gt;&lt;p&gt;&lt;code&gt;DOCTYPE&lt;/code&gt; 是用来声明文档类型和 &lt;code&gt;DTD&lt;/code&gt; 规范的，一个主要的用途便是文件的合法性验证。如果文件代码不合法，那么浏览器解析时便会出一些差错。&lt;code&gt;HTML&lt;/code&gt; 编辑器通常也会在语法高亮的同时提供合法性验证。&lt;/p&gt;
&lt;p&gt;通常有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;HTML5(推荐使用，其他的有触发怪异模式和近标准模式的风险)&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://1016990109.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="HTML" scheme="http://1016990109.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Linux 命令 —— 配置文件和 Shell 环境</title>
    <link href="http://1016990109.github.io/2018/08/21/Linux-%E5%91%BD%E4%BB%A4-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8CShell%E7%8E%AF%E5%A2%83/"/>
    <id>http://1016990109.github.io/2018/08/21/Linux-命令-配置文件和Shell环境/</id>
    <published>2018-08-21T11:31:51.000Z</published>
    <updated>2018-08-24T03:24:06.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Shell-环境"><a href="#Shell-环境" class="headerlink" title="Shell 环境"></a>Shell 环境</h2><p><code>shell</code> 在环境中存储了两种基本类型的数据，虽然 <code>bash</code> 几乎无法分辨这些数据的类型。它们是环境变量和 <code>shell</code> 变量。</p><a id="more"></a><h3 id="检查环境变量"><a href="#检查环境变量" class="headerlink" title="检查环境变量"></a>检查环境变量</h3><p><code>set</code> 显示 <code>shell</code> 变量、<code>shell</code> 函数和环境变量，<code>printenv</code> 只显示环境变量。<code>printenv [name]</code> 还能输出变量的值(当然常用的还是 <code>echo $[name]</code>)。而别名只能通过 <code>alias</code> 来查看。</p><h3 id="建立-shell-环境"><a href="#建立-shell-环境" class="headerlink" title="建立 shell 环境"></a>建立 shell 环境</h3><p>当我们登录系统后，<code>bash</code> 程序启动，并且会读取一系列称为启动文件的配置脚本，这些文件定义了默认的可供所有用户共享的 <code>shell</code> 环境。然后是读取更多位于我们自己家目录中的启动文件，这些启动文件定义了用户个人的 <code>shell</code> 环境。确切的启动顺序依赖于要运行的 <code>shell</code> 会话类型。有两种 <code>shell</code> 会话类型：一个是登录 <code>shell</code> 会话，另一个是非登录 <code>shell</code> 会话。</p><p>登录 <code>shell</code> 会话会在其中提示用户输入用户名和密码；例如，我们启动一个虚拟控制台会话。非登录 <code>shell</code> 会话通常当我们在 <code>GUI</code> 下启动终端会话时出现。</p><p>退出命令：</p><ul><li>执行 <code>exit</code> 命令，退出一个 <code>shell</code>（登录或非登录 <code>shell</code>）；</li><li>执行 <code>logout</code> 命令，退出登录 <code>shell</code>（不能退出非登录 <code>shell</code>）。</li></ul><p>登录 <code>shell</code> 会读取一个或多个启动文件，如下表：</p><table><thead><tr><th>文件</th><th>内容</th></tr></thead><tbody><tr><td>/etc/profile</td><td>应用于所有用户的全局配置脚本。</td></tr><tr><td>~/.bash_profile</td><td>用户个人的启动文件。可以用来扩展或重写全局配置脚本中的设置。</td></tr><tr><td>~/.bash_login</td><td>如果文件 ~/.bash_profile 没有找到，bash 会尝试读取这个脚本。</td></tr><tr><td>~/.profile</td><td>如果文件 ~/.bash_profile 或文件 ~/.bash_login 都没有找到，bash 会试图读取这个文件。 这是基于 Debian 发行版的默认设置，比方说 Ubuntu。</td></tr></tbody></table><p>非登录 <code>shell</code> 会读取以下启动文件：</p><table><thead><tr><th>文件</th><th>内容</th></tr></thead><tbody><tr><td>/etc/bash.bashrc</td><td>应用于所有用户的全局配置文件。</td></tr><tr><td>~/.bashrc</td><td>用户个人的启动文件。可以用来扩展或重写全局配置脚本中的设置。</td></tr></tbody></table><p>除了读取以上启动文件之外，非登录 <code>shell</code> 会话也会继承它们父进程的环境设置，通常是一个登录 <code>shell</code>。</p><p>在普通用户看来，文件 <code>~/.bashrc</code> 可能是最重要的启动文件，因为它几乎总是被读取(每次执行 <code>shell</code> 脚本时都会重新读取)。非登录 <code>shell</code> 默认会读取它，并且大多数登录 <code>shell</code> 的启动文件也会能读取 <code>~/.bashrc</code> 文件。</p><h3 id="一个启动文件的内容"><a href="#一个启动文件的内容" class="headerlink" title="一个启动文件的内容"></a>一个启动文件的内容</h3><p>看一下典型的 <code>.bash_profile</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .bash_profile</span></span><br><span class="line"><span class="comment"># Get the aliases and functions</span></span><br><span class="line"><span class="keyword">if</span> [ -f ~/.bashrc ]; <span class="keyword">then</span></span><br><span class="line">. ~/.bashrc</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># User specific environment and startup programs</span></span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH</span><br></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>修改后使用 <code>source ***</code> 激活启动文件。</p><h2 id="vi-简介"><a href="#vi-简介" class="headerlink" title="vi 简介"></a>vi 简介</h2><p>第一版 <code>vi</code> 是在 1976 由 Bill Joy 写成的，当时他是加州大学伯克利分校的学生，后来他共同创建了 <code>Sun</code> 微系统公司。<code>vi</code> 这个名字来源于单词“visual”，因为它打算在带有可移动光标的视频终端上编辑文本。在发明可视化编辑器之前，有一次只能操作一行文本的行编辑器。为了编辑，我们需要告诉行编辑器到一个特殊行并且说明做什么修改，比方说添加或删除文本。视频终端（而不是基于打印机的终端，像电传打印机）的出现，使可视化编辑成为可能。<code>vi</code> 实际上整合了一个强大的行编辑器 ———— ex , 所以我们在使用 <code>vi</code> 时能运行行编辑命令。</p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ul><li><p>按 <code>i</code> 进入插入模式。</p></li><li><p><code>:w</code> 保存。</p></li><li><p><code>u</code> 是 <code>undo</code>。</p></li><li><p><code>p</code> 粘贴到光标位置之后，<code>P</code> 粘贴到光标位置之前。</p></li><li><p>查找：<code>f</code> 命令能搜索一特定行，并将光标移动到下一个匹配的字符上。例如，命令 <code>fa</code> 会把光标定位到同一行中下一个出现的”a”字符上。在进行了一次行内搜索后，输入分号能重复这次搜索。<br>移动光标到下一个出现的单词或短语上，使用 <code>/</code> 命令。当你输入 <code>/</code> 命令后，一个”/”字符会出现在屏幕底部。接下来，输入要查找的单词或短语， 按下回车。光标就会移动到下一个包含所查找字符串的位置。通过 <code>n</code> 命令来重复先前的查找。</p></li><li><p>替换<br><code>vi</code> 使用 <code>ex</code> 命令来执行查找和替代操作（<code>vi</code> 中叫做“替换”）。将整个文件中的单词“Line”更改为“line”， 输入以下命令(后面再加个 <code>c</code> 则每次替换会提醒用户确认)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s/Line/line/g</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th>条目</th><th>含义</th></tr></thead><tbody><tr><td>:</td><td>冒号字符运行一个 <code>ex</code> 命令。</td></tr><tr><td>%</td><td>指定要操作的行数。% 是一个快捷方式，表示从第一行到最后一行。另外，操作范围也 可以用 1,5 来代替（因为我们的文件只有 5 行文本），或者用 1,$ 来代替，意思是 “ 从第一行到文件的最后一行。”如果省略了文本行的范围，那么操作只对当前行生效。</td></tr><tr><td>s</td><td>指定操作。在这种情况下是，替换（查找与替代）。</td></tr><tr><td>/Line/line</td><td>查找类型与替代文本。</td></tr><tr><td>g</td><td>这是“全局”的意思，意味着对文本行中所有匹配的字符串执行查找和替换操作。如果省略 g，则 只替换每个文本行中第一个匹配的字符串。</td></tr></tbody></table><ul><li>编辑多个文件<br><code>vi file1 file2 file3...</code> 打开多个文件。<br><code>:n</code> 切换到下一个文件。<br><code>:N</code> 切换到上一个文件。<br><code>:buffers</code> 列出文件缓冲，<code>:buffers 缓冲区编号</code> 切换到对应的文件。</li></ul><p>移动光标：</p><table><thead><tr><th>按键</th><th>移动光标</th></tr></thead><tbody><tr><td>l or 右箭头</td><td>向右移动一个字符</td></tr><tr><td>h or 左箭头</td><td>向左移动一个字符</td></tr><tr><td>j or 下箭头</td><td>向下移动一行</td></tr><tr><td>k or 上箭头</td><td>向上移动一行</td></tr><tr><td>0 (零按键)</td><td>移动到当前行的行首。</td></tr><tr><td>^</td><td>移动到当前行的第一个非空字符。</td></tr><tr><td>$</td><td>移动到当前行的末尾。</td></tr><tr><td>w</td><td>移动到下一个单词或标点符号的开头。</td></tr><tr><td>W</td><td>移动到下一个单词的开头，忽略标点符号。</td></tr><tr><td>b</td><td>移动到上一个单词或标点符号的开头。</td></tr><tr><td>B</td><td>移动到上一个单词的开头，忽略标点符号。</td></tr><tr><td>Ctrl-f or Page Down</td><td>向下翻一页</td></tr><tr><td>Ctrl-b or Page Up</td><td>向上翻一页</td></tr><tr><td>numberG</td><td>移动到第 number 行。例如，1G 移动到文件的第一行。</td></tr><tr><td>G</td><td>移动到文件末尾。</td></tr></tbody></table><p>文本删除命令(这个 <code>d</code> 命令不仅删除文本，它还“剪切”文本。)：</p><table><thead><tr><th>命令</th><th>删除的文本</th></tr></thead><tbody><tr><td>x</td><td>当前字符</td></tr><tr><td>3x</td><td>当前字符及其后的两个字符。</td></tr><tr><td>dd</td><td>当前行。</td></tr><tr><td>5dd</td><td>当前行及随后的四行文本。</td></tr><tr><td>dW</td><td>从光标位置开始到下一个单词的开头。</td></tr><tr><td>d$</td><td>从光标位置开始到当前行的行尾。</td></tr><tr><td>d0</td><td>从光标位置开始到当前行的行首。</td></tr><tr><td>d^</td><td>从光标位置开始到文本行的第一个非空字符。</td></tr><tr><td>dG</td><td>从当前行到文件的末尾。</td></tr><tr><td>d20G</td><td>从当前行到文件的第 20 行。</td></tr></tbody></table><p>复制命令：</p><table><thead><tr><th>命令</th><th>复制的内容</th></tr></thead><tbody><tr><td>yy</td><td>当前行。</td></tr><tr><td>5yy</td><td>当前行及随后的四行文本。</td></tr><tr><td>yW</td><td>从当前光标位置到下一个单词的开头。</td></tr><tr><td>y$</td><td>从当前光标位置到当前行的末尾。</td></tr><tr><td>y0</td><td>从当前光标位置到行首。</td></tr><tr><td>y^</td><td>从当前光标位置到文本行的第一个非空字符。</td></tr><tr><td>yG</td><td>从当前行到文件末尾。</td></tr><tr><td>y20G</td><td>从当前行到文件的第 20 行。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Shell-环境&quot;&gt;&lt;a href=&quot;#Shell-环境&quot; class=&quot;headerlink&quot; title=&quot;Shell 环境&quot;&gt;&lt;/a&gt;Shell 环境&lt;/h2&gt;&lt;p&gt;&lt;code&gt;shell&lt;/code&gt; 在环境中存储了两种基本类型的数据，虽然 &lt;code&gt;bash&lt;/code&gt; 几乎无法分辨这些数据的类型。它们是环境变量和 &lt;code&gt;shell&lt;/code&gt; 变量。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://1016990109.github.io/tags/Linux/"/>
    
      <category term="Shell" scheme="http://1016990109.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>前端基础之JS事件循环</title>
    <link href="http://1016990109.github.io/2018/08/19/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E4%B9%8BJS%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
    <id>http://1016990109.github.io/2018/08/19/前端基础之JS事件循环/</id>
    <published>2018-08-19T15:22:38.000Z</published>
    <updated>2018-09-04T07:27:31.996Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><code>JavaScript</code> 从诞生之日起就是一门单线程的非阻塞的脚本语言</p><p>单线程是必要的，也是 <code>JavaScript</code> 这门语言的基石，原因之一在其最初也是最主要的执行环境——浏览器中，我们需要进行各种各样的 <code>DOM</code> 操作。试想一下 如果 <code>JavaScript</code> 是多线程的，那么当两个线程同时对 <code>DOM</code> 进行一项操作，例如一个向其添加事件，而另一个删除了这个 <code>DOM</code>，此时该如何处理呢？因此，为了保证不会 发生类似于这个例子中的情景，<code>JavaScript</code> 选择只用一个主线程来执行代码，这样就保证了程序执行的一致性。</p><a id="more"></a><p>为了利用多核 <code>CPU</code> 的计算能力，<code>HTML5</code> 提出 <code>Web Worker</code> 标准，允许 <code>JavaScript</code> 脚本创建多个线程，但是子线程完全受主线程控制，且不得操作 <code>DOM</code>。所以，这个新标准并没有改变 <code>JavaScript</code> 单线程的本质。</p><h2 id="浏览器-JS-引擎事件循环"><a href="#浏览器-JS-引擎事件循环" class="headerlink" title="浏览器 JS 引擎事件循环"></a>浏览器 JS 引擎事件循环</h2><h3 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h3><p>主线程完全可以不管 <code>IO</code> 设备，挂起处于等待中的任务，先运行排在后面的任务。等到 <code>IO</code> 设备返回了结果，再回过头，把挂起的任务继续执行下去。</p><p>于是，所有任务可以分成两种，一种是同步任务（<code>synchronous</code>），另一种是异步任务（<code>asynchronous</code>）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入”任务队列”（<code>task queue</code>）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</p><p>运行机制如下：</p><p>（1）所有同步任务都在主线程上执行，形成一个执行栈（<code>execution context stack</code>）。<br>（2）主线程之外，还存在一个”任务队列”（<code>task queue</code>）。只要异步任务有了运行结果，就在”任务队列”之中放置一个事件。<br>（3）一旦”执行栈”<strong>所有</strong>同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。<br>（4）主线程不断重复上面的第三步。</p><blockquote><p>“任务队列”是一个事件的队列（也可以理解成消息的队列），<code>IO</code> 设备完成一项任务，就在”任务队列”中添加一个事件，表示相关的异步任务可以进入”执行栈”了。主线程读取”任务队列”，就是读取里面有哪些事件。除了 <code>IO</code> 设备事件，用户点击事件等也是会进入”任务队列”的。”任务队列”是先进先出的，主线程的读取过程基本上是自动的，只要执行栈一清空，”任务队列”上第一位的事件就自动进入主线程。</p></blockquote><h3 id="macro-task-宏任务-与-micro-task-微任务"><a href="#macro-task-宏任务-与-micro-task-微任务" class="headerlink" title="macro task(宏任务) 与 micro task(微任务)"></a>macro task(宏任务) 与 micro task(微任务)</h3><p>异步任务之间也有执行的优先级，不同的异步任务被分为两类：微任务（<code>micro task</code>）和宏任务（<code>macro task</code>）。</p><p>以下事件属于宏任务：</p><ul><li>setInterval()</li><li>setTimeout()</li></ul><p>以下事件属于微任务：</p><ul><li>new Promise()</li><li>new MutaionObserver()</li></ul><p>在一个事件循环中，异步事件返回结果后会被放到一个任务队列中。然而，根据这个异步事件的类型，这个事件实际上会被对应的宏任务队列或者微任务队列中去。并且在当前执行栈为空的时候，主线程会查看微任务队列是否有事件存在。</p><p><strong>当当前执行栈执行完毕时会立刻先处理所有微任务队列中的事件，然后再去宏任务队列中取出一个事件。同一次事件循环中，微任务永远在宏任务之前执行。</strong></p><p><strong>同类型异步任务按进入的先后顺序依次触发。</strong></p><h2 id="Node-环境下的事件循环"><a href="#Node-环境下的事件循环" class="headerlink" title="Node 环境下的事件循环"></a>Node 环境下的事件循环</h2><p><code>Node.js</code> 也是单线程的 <code>Event Loop</code>，但是它的运行机制不同于浏览器环境。</p><p><code>Node</code> 中事件循环的实现是依靠的 <code>libuv</code> 引擎。我们知道 <code>Node</code> 选择 <code>Chrome v8</code> 引擎作为 <code>js</code> 解释器，<code>v8</code> 引擎将 <code>js</code> 代码分析后去调用对应的 <code>Node API</code>，而这些 <code>API</code> 最后则由 <code>libuv</code> 引擎驱动，执行对应的任务，并把不同的事件放在不同的队列中等待主线程执行。 因此实际上 <code>Node</code> 中的事件循环存在于 <code>libuv</code> 引擎中。</p><p>我们来看看 <code>libuv</code> 的事件循环模型：</p><p><img src="/assets/img/node_event_loop.png" alt="node event loop"></p><blockquote><p><code>timers</code>，一个 <code>timer</code> 指定一个下限时间而不是准确时间，在达到这个下限时间后执行回调。在指定的时间过后，<code>timers</code> 会尽早的执行回调，但是系统调度或者其他回调的执行可能会延迟它们。下限的时间有一个范围：[1, 2147483647]，如果设定的时间不在这个范围，将被设置为 1。</p></blockquote><blockquote><p><code>setImmediate()</code> 具有最高优先级，只要 <code>poll</code> 队列为空，代码被 <code>setImmediate()</code>，无论是否有 <code>timers</code> 达到下限时间，<code>setImmediate()</code>的代码都先执行。</p></blockquote><p>我们可以大致分析出 <code>Node</code> 中的事件循环的顺序：</p><p>外部输入数据–&gt;轮询阶段(<code>poll</code>)–&gt;检查阶段(<code>check</code>)–&gt;关闭事件回调阶段(<code>close callback</code>)–&gt;定时器检测阶段(<code>timer</code>)–&gt;<code>I/O</code> 事件回调阶段(<code>I/O callbacks</code>)–&gt;闲置阶段(<code>idle</code>, <code>prepare</code>)–&gt;轮询阶段…</p><p>除了 <code>setTimeout</code> 和 <code>setInterval</code> 这两个方法，<code>Node.js</code> 还提供了另外两个与”任务队列”有关的方法：<code>process.nextTick</code> 和 <code>setImmediate</code>。</p><p>执行顺序为 <code>process.nextTick</code>(单独的一个队列) –&gt; 微任务(<code>Promise</code>，<code>MutaionObserver</code>) –&gt; 宏任务(<code>setTimeout</code>，<code>setInterval</code>)/<code>setImmediate</code></p><blockquote><p>注意错误使用 <code>process.nextTick</code> 可能会进入一个死循环，而导致 <code>js</code> 主线程阻塞，而 <code>setTimeout(function, 0)</code> 不会。<code>process.nextTick</code> 在当前”执行栈”执行。</p></blockquote><h3 id="关于-setTimeout-和-setImmediate"><a href="#关于-setTimeout-和-setImmediate" class="headerlink" title="关于 setTimeout 和 setImmediate"></a>关于 setTimeout 和 setImmediate</h3><p><code>setTimeout</code> 和 <code>setImmediate</code> 在 <code>Node</code> 环境下执行是靠“随缘法则”的，执行先后顺序不确定。</p><p>首先进入的是 <code>timers</code> 阶段，如果我们的机器性能一般，那么进入 <code>timers</code> 阶段，一毫秒已经过去了（<code>setTimeout(fn, 0)</code>等价于 <code>setTimeout(fn, 1)</code>），那么 <code>setTimeout</code> 的回调会首先执行。</p><p>如果没有到一毫秒，那么在 <code>timers</code> 阶段的时候，下限时间没到，<code>setTimeout</code> 回调不执行，事件循环来到了 <code>poll</code> 阶段，这个时候队列为空，此时有代码被 <code>setImmediate()</code>，于是先执行了 <code>setImmediate()</code> 的回调函数，之后在下一个事件循环再执行 <code>setTimemout</code> 的回调函数。</p><p>而我们在执行代码的时候，进入 <code>timers</code> 的时间延迟其实是随机的，并不是确定的，所以会出现两个函数执行顺序随机的情况。</p><p>但是有种情况例外：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line">fs.readFile(__filename, () =&gt; &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timeout'</span>)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">  setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'immediate'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面代码，<code>setImmediate</code> 永远优先 <code>setTimeout</code> 执行。</p><p><code>fs.readFile</code> 的回调是在 <code>poll</code> 阶段执行的，当其回调执行完毕之后，<code>poll</code> 队列为空，而 <code>setTimeout</code> 入了 <code>timers</code> 的队列，此时有代码被 <code>setImmediate()</code>，于是事件循环先进入 <code>check</code> 阶段执行回调，之后在下一个事件循环再在 <code>timers</code> 阶段中执行有效回调。</p><p><strong>总结：</strong></p><ul><li>如果两者都在主模块中调用，那么执行先后取决于进程性能，也就是随机。</li><li>如果两者都不在主模块调用（被一个异步操作包裹），那么 <code>setImmediate</code> 的回调永远先执行。</li></ul><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>为了更好地理解事件循环，可以尝试运行下面的代码，看看结果如何：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">setImmediate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">7</span>)</span><br><span class="line">&#125;)</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">6</span>)</span><br><span class="line">  process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">8</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> <span class="title">executor</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">    i == <span class="number">9999</span> &amp;&amp; resolve()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行队列(同步) 2 3 5   6 8（6,8为nextTick队列中的)</span></span><br><span class="line"><span class="comment">//任务队列(异步) 4 (1,7顺序不确定)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&lt;code&gt;JavaScript&lt;/code&gt; 从诞生之日起就是一门单线程的非阻塞的脚本语言&lt;/p&gt;
&lt;p&gt;单线程是必要的，也是 &lt;code&gt;JavaScript&lt;/code&gt; 这门语言的基石，原因之一在其最初也是最主要的执行环境——浏览器中，我们需要进行各种各样的 &lt;code&gt;DOM&lt;/code&gt; 操作。试想一下 如果 &lt;code&gt;JavaScript&lt;/code&gt; 是多线程的，那么当两个线程同时对 &lt;code&gt;DOM&lt;/code&gt; 进行一项操作，例如一个向其添加事件，而另一个删除了这个 &lt;code&gt;DOM&lt;/code&gt;，此时该如何处理呢？因此，为了保证不会 发生类似于这个例子中的情景，&lt;code&gt;JavaScript&lt;/code&gt; 选择只用一个主线程来执行代码，这样就保证了程序执行的一致性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://1016990109.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="eventloop" scheme="http://1016990109.github.io/tags/eventloop/"/>
    
      <category term="事件循环" scheme="http://1016990109.github.io/tags/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端基础之HTTP/2</title>
    <link href="http://1016990109.github.io/2018/08/15/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E4%B9%8BHTTP2/"/>
    <id>http://1016990109.github.io/2018/08/15/前端基础之HTTP2/</id>
    <published>2018-08-15T11:00:44.000Z</published>
    <updated>2018-08-16T15:37:13.069Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>HTTP/2</code> 可以让我们的应用更快、更简单、更稳定。</p><p><code>HTTP/2</code> 的目的是通过支持完整的请求与响应复用来减少延迟，通过有效压缩 <code>HTTP</code> 标头字段将协议开销降至最低，同时增加对请求优先级和服务器推送的支持。为达成这些目标，<code>HTTP/2</code> 还给我们带来了大量其他协议层面的辅助实现，例如新的流控制、错误处理和升级机制。</p><p>需要注意的是，<code>HTTP/2</code> 仍是对之前 <code>HTTP</code> 标准的扩展，而非替代。<code>HTTP</code> 的应用语义不变，提供的功能不变，<code>HTTP</code> 方法、状态代码、<code>URI</code> 和标头字段等这些核心概念也不变。</p><a id="more"></a><h2 id="二进制分帧层"><a href="#二进制分帧层" class="headerlink" title="二进制分帧层"></a>二进制分帧层</h2><p><code>HTTP/2</code> 所有性能增强的核心在于新的二进制分帧层，它定义了如何封装 <code>HTTP</code> 消息并在客户端与服务器之间传输。</p><p><img src="/assets/img/binary_framing_layer01.svg" alt="binary framing layer"></p><h2 id="数据流、消息和帧"><a href="#数据流、消息和帧" class="headerlink" title="数据流、消息和帧"></a>数据流、消息和帧</h2><ul><li>数据流：已建立的连接内的双向字节流，可以承载一条或多条消息。</li><li>消息：与逻辑请求或响应消息对应的完整的一系列帧。</li><li>帧：<code>HTTP/2</code> 通信的最小单位，每个帧都包含帧头，至少也会标识出当前帧所属的数据流。</li></ul><p>这些概念的关系总结如下：</p><ul><li>所有通信都在一个 <code>TCP</code> 连接上完成，此连接可以承载任意数量的双向数据流。</li><li>每个数据流都有一个唯一的标识符和可选的优先级信息，用于承载双向消息。</li><li>每条消息都是一条逻辑 <code>HTTP</code> 消息（例如请求或响应），包含一个或多个帧。</li><li>帧是最小的通信单位，承载着特定类型的数据，例如 <code>HTTP</code> 标头、消息负载，等等。来自不同数据流的帧可以交错发送，然后再根据每个帧头的数据流标识符重新组装。</li></ul><p><img src="/assets/img/streams_messages_frames01.svg" alt="streams messages frames"></p><h2 id="请求与响应复用"><a href="#请求与响应复用" class="headerlink" title="请求与响应复用"></a>请求与响应复用</h2><p>在 <code>HTTP/1.x</code> 中，如果客户端要想发起多个并行请求以提升性能，则必须使用多个 <code>TCP</code> 连接。这是 <code>HTTP/1.x</code> 交付模型的直接结果，该模型可以保证每个连接每次只交付一个响应（响应排队）。更糟糕的是，这种模型也会导致队首阻塞，从而造成底层 <code>TCP</code> 连接的效率低下。<strong>这就是需要对请求资源的个数做优化的原因(CSS Sprite、合并 js 和 css、内联小资源、利用 HTTP 管道、域名分片)</strong></p><blockquote><p><em>队首阻塞：</em> &gt; <strong>1.<code>http1.0</code> 的队首阻塞</strong><br>对于同一个 <code>tcp</code> 连接，所有的 <code>http1.0</code> 请求放入队列中，只有前一个请求的响应收到了，然后才能发送下一个请求。<br>可见，<code>http1.0</code> 的队首组塞发生在客户端。<br><strong>2.<code>http1.1</code> 的队首阻塞</strong><br>对于同一个 <code>tcp</code> 连接，<code>http1.1</code> 允许一次发送多个 <code>http1.1</code> 请求，也就是说，不必等前一个响应收到，就可以发送下一个请求，这样就解决了 <code>http1.0</code> 的客户端的队首阻塞。但是，<code>http1.1</code> 规定，服务器端的响应的发送要根据请求被接收的顺序排队，也就是说，先接收到的请求的响应也要先发送。这样造成的问题是，如果最先收到的请求的处理时间长的话，响应生成也慢，就会阻塞已经生成了的响应的发送，也会造成队首阻塞。</p></blockquote><p><code>HTTP/2</code> 中新的二进制分帧层突破了这些限制，实现了完整的请求和响应复用：客户端和服务器可以将 <code>HTTP</code> 消息分解为互不依赖的帧，然后交错发送，最后再在另一端把它们重新组装起来。就是请求或者响应可以不一起发送，而是分帧发送，哪一个消息的帧准备好了就可以发，而不用等待。</p><h2 id="数据流优先级"><a href="#数据流优先级" class="headerlink" title="数据流优先级"></a>数据流优先级</h2><p>前面提到每个数据流都有一个唯一的标识符和可选的优先级消息，这个优先级消息就包括关联的权重和依赖关系：</p><ul><li>可以向每个数据流分配一个介于 1 至 256 之间的整数。</li><li>每个数据流与其他数据流之间可以存在显式依赖关系。</li></ul><p>总体的规则就是父项优先级更高，也就是 ”根数据流“ 的子项优先级最高，当同级时按照权重分配资源。</p><blockquote><p>注意着不能保证顺序，只是要求，即客户端无法强制服务器通过数据流优先级以特定顺序处理数据流。</p></blockquote><h2 id="每个来源一个连接"><a href="#每个来源一个连接" class="headerlink" title="每个来源一个连接"></a>每个来源一个连接</h2><p>每一个 <code>origin</code> 只需要一个连接，因为每个数据流都拆分成很多帧，而这些帧可以交错，还可以分别设定优先级。因此，所有 <code>HTTP/2</code> 连接都是永久的，而且仅需要每个来源一个连接，随之带来诸多性能优势。</p><blockquote><p>连接数量减少对提升 <code>HTTPS</code> 部署的性能来说是一项特别重要的功能：可以减少开销较大的 <code>TLS</code> 连接数、提升会话重用率，以及从整体上减少所需的客户端和服务器资源。</p></blockquote><h2 id="流控制"><a href="#流控制" class="headerlink" title="流控制"></a>流控制</h2><p>流控制是一种阻止发送方向接收方发送大量数据的机制，以免超出后者的需求或处理能力。</p><p><code>HTTP/2</code> 的流量控制具有以下特征：</p><p>1.流量控制是特定于一个连接的。每种类型的流量控制都是在单独的一跳的两个端点之间的，并不是在整个端到端的路径上的。（这里的一跳指的是 <code>HTTP</code> 连接的一跳，而不是 <code>IP</code> 路由的一跳）</p><p>2.流量控制是基于 <code>WINDOW_UPDATE</code> 帧的。接收方公布自己打算在每个流以及整个连接上分别接收多少字节。这是一个以信用为基础的方案。</p><p>3.流量控制是有方向的，由接收者全面控制。接收方可以为每个流和整个连接设置任意的窗口大小。发送方必须尊重接收方设置的流量控制限制。客户方、服务端和中间代理作为接收方时都独立地公布各自的流量控制窗口，作为发送方时都遵守对端的流量控制设置。</p><p>4.无论是新流还是整个连接，流量控制窗口的初始值是 65535 字节。</p><p>5.帧的类型决定了流量控制是否适用于帧。目前，只有 <code>DATA</code> 帧服从流量控制，所有其它类型的帧并不消耗流量控制窗口的空间。这保证了重要的控制帧不会被流量控制阻塞。</p><p>6.流量控制不能被禁用。建立 <code>HTTP/2</code> 连接后，客户端将与服务器交换 <code>SETTINGS</code> 帧，这会在两个方向上设置流控制窗口。流控制窗口的默认值设为 65535(2^16 - 1) 字节，但是接收方可以设置一个较大的最大窗口大小（2^31-1 字节），并在接收到任意数据时通过发送 <code>WINDOW_UPDATE</code> 帧来维持这一大小。</p><p>7.<code>HTTP/2</code> 只定义了 <code>WINDOW_UPDATE</code> 帧的格式和语义，并没有规定接收方如何决定何时发送帧、发送什么样的值，也没有规定发送方如何选择发送包。具体实现可以选择任何满足需求的算法。</p><h2 id="服务器推送"><a href="#服务器推送" class="headerlink" title="服务器推送"></a>服务器推送</h2><p><code>HTTP/2</code> 新增的另一个强大的新功能是，服务器可以对一个客户端请求发送多个响应。换句话说，除了对最初请求的响应外，服务器还可以向客户端推送额外资源，而无需客户端明确地请求。</p><p><img src="/assets/img/server_push.svg" alt="server push"></p><h3 id="PUSH-PROMISE"><a href="#PUSH-PROMISE" class="headerlink" title="PUSH_PROMISE"></a>PUSH_PROMISE</h3><p>所有服务器推送数据流都由 <code>PUSH_PROMISE</code> 帧发起，表明了服务器向客户端推送所述资源的意图，并且需要 <strong>先于请求推送资源的响应数据传输</strong>。这种传输顺序非常重要：客户端需要了解服务器打算推送哪些资源，以免为这些资源创建重复请求。满足此要求的最简单策略是先于父响应（即，<code>DATA</code> 帧）发送所有 <code>PUSH_PROMISE</code> 帧，其中包含所承诺资源的 <code>HTTP</code> 标头。</p><p>在客户端接收到 <code>PUSH_PROMISE</code> 帧后，它可以根据自身情况选择拒绝数据流（通过 <code>RST_STREAM</code> 帧）。 （如果资源已经位于缓存中，可能会发生这种情况。）这是一个相对于 <code>HTTP/1.x</code> 的重要提升。 相比之下，使用资源内联（一种受欢迎的 <code>HTTP/1.x</code> “优化”）等同于“强制推送”：<strong>客户端无法选择拒绝、取消或单独处理内联的资源</strong>。</p><h2 id="标头压缩"><a href="#标头压缩" class="headerlink" title="标头压缩"></a>标头压缩</h2><p>传统的 <code>HTTP/1.x</code> 传递报文时需要传输标头，有时候会很大(带上 <code>cookie</code> 的时候)，开销过大了。而 <code>HTTP/2</code> 使用 <code>HPACK</code> 压缩格式压缩请求和响应标头元数据，这种格式通过两种方式压缩：</p><ul><li>这种格式支持通过静态 <code>Huffman</code> 代码对传输的标头字段进行编码，从而减小了各个传输的大小。</li><li>这种格式要求客户端和服务器同时维护和更新一个包含之前见过的标头字段的索引列表（换句话说，它可以建立一个共享的压缩上下文），此列表随后会用作参考，对之前传输的值进行有效编码。</li></ul><p>利用 <code>Huffman</code> 编码，可以在传输时对各个值进行压缩(比如还没建立索引时，传输的 <code>User-Agent</code> 的内容也就是值可以使用霍夫曼编码压缩)，而利用之前传输值的索引列表，我们可以通过传输索引值的方式对重复值进行编码，索引值可用于有效查询和重构完整的标头键值对(比如之前传递过 <code>MyHeader:test</code> 的头部，建立索引放在动态表中，索引为 62，那么下次传输只用传递索引值 62即可)。</p><p>作为一种进一步优化方式，<code>HPACK</code> 压缩上下文包含一个静态表和一个动态表：静态表在规范中定义，并提供了一个包含所有连接都可能使用的常用 <code>HTTP</code> 标头字段（例如，有效标头名称）的列表；动态表最初为空，将根据在特定连接内交换的值进行更新。因此，为之前未见过的值采用静态 <code>Huffman</code> 编码，并替换每一侧静态表或动态表中已存在值的索引，可以减小每个请求的大小。</p><p>下面是预定义的头字段静态映射表：</p><p><img src="/assets/img/http2_static_table.png" alt="static tabel"></p><blockquote><p>在 <code>HTTP/2</code> 中，请求和响应标头字段的定义保持不变，仅有一些微小的差异：所有标头字段名称均为小写，请求行现在拆分成各个 <code>:method</code>、<code>:scheme</code>、<code>:authority</code> 和 <code>:path</code> 伪标头字段。</p></blockquote><h3 id="HPACK-的安全性和性能"><a href="#HPACK-的安全性和性能" class="headerlink" title="HPACK 的安全性和性能"></a>HPACK 的安全性和性能</h3><blockquote><p>早期版本的 <code>HTTP/2</code> 和 <code>SPDY</code> 使用 <code>zlib</code>（带有一个自定义字典）压缩所有 <code>HTTP</code> 标头。然而，2012 年夏天，出现了针对 <code>TLS</code> 和 <code>SPDY</code> 压缩算法的“犯罪”安全攻击，此攻击会导致会话被劫持。 于是，<code>zlib</code> 压缩算法被 <code>HPACK</code> 替代，后者经过专门设计，可以解决发现的安全问题、实现起来也更高效和简单，当然，可以对 <code>HTTP</code> 标头元数据进行良好压缩。</p></blockquote><p>关于 <code>HPACK</code> 压缩算法的完成详情查看 <a href="https://tools.ietf.org/html/draft-ietf-httpbis-header-compression" target="_blank" rel="noopener">https://tools.ietf.org/html/draft-ietf-httpbis-header-compression</a>。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://developers.google.cn/web/fundamentals/performance/http2/?hl=zh-cn" target="_blank" rel="noopener">HTTP/2 简介</a></li><li><a href="https://www.cnblogs.com/ghj1976/p/4586529.html" target="_blank" rel="noopener">为 HTTP/2 头压缩专门设计的 HPACK</a></li><li><a href="https://www.cnblogs.com/hustdc/p/8487366.html" target="_blank" rel="noopener">http协议的队首阻塞</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;code&gt;HTTP/2&lt;/code&gt; 可以让我们的应用更快、更简单、更稳定。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HTTP/2&lt;/code&gt; 的目的是通过支持完整的请求与响应复用来减少延迟，通过有效压缩 &lt;code&gt;HTTP&lt;/code&gt; 标头字段将协议开销降至最低，同时增加对请求优先级和服务器推送的支持。为达成这些目标，&lt;code&gt;HTTP/2&lt;/code&gt; 还给我们带来了大量其他协议层面的辅助实现，例如新的流控制、错误处理和升级机制。&lt;/p&gt;
&lt;p&gt;需要注意的是，&lt;code&gt;HTTP/2&lt;/code&gt; 仍是对之前 &lt;code&gt;HTTP&lt;/code&gt; 标准的扩展，而非替代。&lt;code&gt;HTTP&lt;/code&gt; 的应用语义不变，提供的功能不变，&lt;code&gt;HTTP&lt;/code&gt; 方法、状态代码、&lt;code&gt;URI&lt;/code&gt; 和标头字段等这些核心概念也不变。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://1016990109.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="网络" scheme="http://1016990109.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="HTTP/2" scheme="http://1016990109.github.io/tags/HTTP-2/"/>
    
  </entry>
  
  <entry>
    <title>前端基础之关键路径渲染优化</title>
    <link href="http://1016990109.github.io/2018/08/09/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84%E6%B8%B2%E6%9F%93%E4%BC%98%E5%8C%96/"/>
    <id>http://1016990109.github.io/2018/08/09/前端基础之关键路径渲染优化/</id>
    <published>2018-08-09T15:14:24.000Z</published>
    <updated>2018-08-15T11:00:03.092Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器接收到服务器返回的 <code>HTML</code>、<code>CSS</code> 和 <code>JavaScript</code> 字节数据并对其进行解析和转变成像素的渲染过程被称为关键渲染路径。通过优化关键渲染路径即可以缩短浏览器渲染页面的时间。</p><p>浏览器渲染页面前需要先构建 <code>DOM</code> 和 <code>CSSOM</code> 树。因此，我们需要确保尽快将 <code>HTML</code> 和 <code>CSS</code> 都提供给浏览器。</p><a id="more"></a><h2 id="文档对象模型-DOM"><a href="#文档对象模型-DOM" class="headerlink" title="文档对象模型 (DOM)"></a>文档对象模型 (DOM)</h2><p>先看一下浏览器是如何构建 <code>DOM</code> 的：</p><p><img src="/assets/img/dom-full-process.png" alt="dom full process"></p><ol><li>转换： 浏览器从磁盘或网络读取 <code>HTML</code> 的原始字节，并根据文件的指定编码（例如 <code>UTF-8</code>）将它们转换成各个字符。</li><li>令牌化： 浏览器将字符串转换成 <code>W3C HTML5</code> 标准规定的各种令牌，例如，<code>&lt;html&gt;</code>、<code>&lt;body&gt;</code>，以及其他尖括号内的字符串。每个令牌都具有特殊含义和一组规则。</li><li>词法分析： 发出的令牌转换成定义其属性和规则的“对象”。</li><li><code>DOM</code> 构建： 最后，由于 <code>HTML</code> 标记定义不同标记之间的关系（一些标记包含在其他标记内），创建的对象链接在一个树数据结构内，此结构也会捕获原始标记中定义的父项-子项关系：<code>HTML</code> 对象是 <code>body</code> 对象的父项，<code>body</code> 是 <code>paragraph</code> 对象的父项，依此类推。</li></ol><h2 id="CSS-对象模型-CSSOM"><a href="#CSS-对象模型-CSSOM" class="headerlink" title="CSS 对象模型 (CSSOM)"></a>CSS 对象模型 (CSSOM)</h2><p>与处理 <code>HTML</code> 时一样，我们需要将收到的 <code>CSS</code> 规则转换成某种浏览器能够理解和处理的东西。因此，我们会重复 <code>HTML</code> 过程，不过是为 <code>CSS</code> 而不是 <code>HTML</code>：</p><p><img src="/assets/img/cssom-construction.png" alt="cssom construction"></p><p>这就是构建 <code>CSSOM</code> 树的过程。</p><h2 id="构建渲染树"><a href="#构建渲染树" class="headerlink" title="构建渲染树"></a>构建渲染树</h2><p>我们根据 <code>HTML</code> 和 <code>CSS</code> 输入构建了 <code>DOM</code> 树和 <code>CSSOM</code> 树。不过，它们都是独立的对象，分别网罗文档不同方面的信息：一个描述内容，另一个则是描述需要对文档应用的样式规则。需要将二者结合生成渲染树才是渲染到屏幕上的东西。</p><p><img src="/assets/img/render-tree-construction.png" alt="render tree construction"></p><p>为构建渲染树，浏览器大体上完成了下列工作：</p><p>1.从 <code>DOM</code> 树的根节点开始遍历每个可见节点。</p><ul><li>某些节点不可见（例如脚本标记、元标记等），因为它们不会体现在渲染输出中，所以会被忽略。</li><li>某些节点通过 <code>CSS</code> 隐藏，因此在渲染树中也会被忽略，例如，上例中的 <code>span</code> 节点—不会出现在渲染树中，—因为有一个显式规则在该节点上设置了 <code>display: none</code> 属性。(值得注意的是<code>visibility: hidden</code> 属性并不算是不可见属性，它的语义是隐藏元素，但元素仍然占据着布局空间，所以它会被渲染成一个空框)</li></ul><p>2.对于每个可见节点，为其找到适配的 <code>CSSOM</code> 规则并应用它们。</p><p>3.发射可见节点，连同其内容和计算的样式。</p><p>渲染树构建完毕后，浏览器得到了每个可见节点的内容与其样式，下一步工作则需要计算每个节点在窗口内的确切位置与大小，也就是 <strong>布局阶段</strong>。</p><p>布局阶段会从渲染树的根节点开始遍历，然后确定每个节点对象在页面上的确切大小与位置，布局阶段的输出是一个盒子模型，它会精确地捕获每个元素在屏幕内的确切位置与大小，所有相对的测量值也都会被转换为屏幕内的绝对像素值。</p><h2 id="关键渲染路径"><a href="#关键渲染路径" class="headerlink" title="关键渲染路径"></a>关键渲染路径</h2><p>1.处理 HTML 标记并构建 DOM 树。</p><p>2.处理 CSS 标记并构建 CSSOM 树。</p><p>3.将 DOM 与 CSSOM 合并成一个渲染树。</p><p>4.根据渲染树来布局，以计算每个节点的几何信息。</p><p>5.将各个节点绘制到屏幕上。</p><p><strong>优化关键渲染路径_就是指最大限度缩短执行上述第 1 步至第 5 步耗费的总时间</strong></p><h2 id="阻塞渲染的-CSS"><a href="#阻塞渲染的-CSS" class="headerlink" title="阻塞渲染的 CSS"></a>阻塞渲染的 CSS</h2><p><code>CSS</code> 是阻塞渲染的资源。需要将它尽早、尽快地下载到客户端，以便缩短首次渲染的时间。</p><p>通过使用媒体查询，我们可以根据特定用例（比如显示或打印），也可以根据动态情况（比如屏幕方向变化、尺寸调整事件等）定制外观。<strong>声明样式表资产时，请密切注意媒体类型和查询，因为它们将严重影响关键渲染路径的性能</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"style.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"print.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">media</span>=<span class="string">"print"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"other.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">media</span>=<span class="string">"(min-width: 40em)"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>像上面的第一个适用所有情况，故而会阻塞渲染；而第二个和第三个分别适应打印时和屏幕宽度大于 <code>40em</code> 时，所以不会阻塞渲染。</p><blockquote><p>请注意“阻塞渲染”仅是指浏览器是否需要暂停网页的首次渲染，直至该资源准备就绪。无论哪一种情况，浏览器仍会下载 <code>CSS</code> 资源，只不过不阻塞渲染的资源优先级较低罢了。</p></blockquote><h2 id="优化-JavaScript"><a href="#优化-JavaScript" class="headerlink" title="优化 JavaScript"></a>优化 JavaScript</h2><ul><li><code>JavaScript</code> 可以查询和修改 <code>DOM</code> 与 <code>CSSOM</code>。</li><li><code>JavaScript</code> 执行会阻止 <code>CSSOM</code>。</li><li>除非将 <code>JavaScript</code> 显式声明为异步，否则它会阻止构建 <code>DOM</code>。</li></ul><p>可以将脚本标记为异步防止阻塞 <code>DOM</code> 和 <code>CSSOM</code> 构建：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app.js"</span> <span class="attr">async</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="优化关键渲染路径总结"><a href="#优化关键渲染路径总结" class="headerlink" title="优化关键渲染路径总结"></a>优化关键渲染路径总结</h2><ul><li><p>关键资源：可能阻塞网页首次渲染的资源。</p></li><li><p>关键路径长度：获取关键资源所需的往返次数或总时间。</p></li><li><p>关键字节：所有关键资源文件大小的总和。</p></li></ul><p>优化关键渲染路径就是在对关键资源、关键路径长度和关键字节进行优化。关键资源越少，浏览器在渲染前的准备工作就越少；同样，关键路径长度和关键字节关系到浏览器下载资源的效率，它们越少，浏览器下载资源的速度就越快。</p><blockquote><p>评估关键渲染路径可以使用 <code>Lighthouse</code> 审核页面，参阅 <a href="https://developers.google.cn/web/tools/lighthouse/?hl=zh-cn" target="_blank" rel="noopener">使用 Lighthouse 审核网络应用</a>。</p></blockquote><h2 id="PageSpeed-规则和建议"><a href="#PageSpeed-规则和建议" class="headerlink" title="PageSpeed 规则和建议"></a>PageSpeed 规则和建议</h2><ul><li><p>优化 <code>JavaScript</code> 的使用<br>避免同步服务器调用<br>延迟解析 <code>JavaScript</code>，<code>async</code> 和 <code>defer</code><br>避免运行时间长的 <code>JavaScript</code></p></li><li><p>优化 CSS 的使用<br>将 <code>CSS</code> 置于文档 <code>head</code> 标签内，尽早下载<br>避免使用 <code>CSS import</code>，它们会在关键路径中增加往返次数<br>内联阻塞渲染的 <code>CSS</code>，这样不会增加关键路径中增加往返次数</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;浏览器接收到服务器返回的 &lt;code&gt;HTML&lt;/code&gt;、&lt;code&gt;CSS&lt;/code&gt; 和 &lt;code&gt;JavaScript&lt;/code&gt; 字节数据并对其进行解析和转变成像素的渲染过程被称为关键渲染路径。通过优化关键渲染路径即可以缩短浏览器渲染页面的时间。&lt;/p&gt;
&lt;p&gt;浏览器渲染页面前需要先构建 &lt;code&gt;DOM&lt;/code&gt; 和 &lt;code&gt;CSSOM&lt;/code&gt; 树。因此，我们需要确保尽快将 &lt;code&gt;HTML&lt;/code&gt; 和 &lt;code&gt;CSS&lt;/code&gt; 都提供给浏览器。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://1016990109.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="性能优化" scheme="http://1016990109.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>前端基础之浏览器性能优化</title>
    <link href="http://1016990109.github.io/2018/08/02/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B5%8F%E8%A7%88%E5%99%A8%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://1016990109.github.io/2018/08/02/前端基础之浏览器性能优化/</id>
    <published>2018-08-02T15:43:25.000Z</published>
    <updated>2018-09-04T03:20:59.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="渲染性能"><a href="#渲染性能" class="headerlink" title="渲染性能"></a>渲染性能</h1><h2 id="重绘重排"><a href="#重绘重排" class="headerlink" title="重绘重排"></a>重绘重排</h2><p>以下三种情况会导致网页重新渲染：</p><ul><li>修改 DOM</li><li>修改样式表</li><li>用户事件（比如鼠标悬停、页面滚动、输入框键入文字、改变窗口大小等等）</li></ul><a id="more"></a><p>需要注意的是，”重绘”不一定需要”重排”，比如改变某个网页元素的颜色，就只会触发”重绘”，不会触发”重排”，因为布局没有改变。但是，”重排”必然导致”重绘”，比如改变一个网页元素的位置，就会同时触发”重排”和”重绘”，因为布局改变了。像重绘一般很难避免，所以这里不讨论。</p><h3 id="减少重排方案"><a href="#减少重排方案" class="headerlink" title="减少重排方案"></a>减少重排方案</h3><p>1.分离读写操作<br><code>DOM</code> 的多个读操作（或多个写操作），应该放在一起。不要两个读操作之间，加入一个写操作。</p><p>2.如果某个样式是通过重排得到的，那么最好缓存结果。避免下一次用到的时候，浏览器又要重排。</p><p>3.不要一条条地改变样式，而要通过改变 <code>class</code>，或者 <code>csstext</code> 属性，一次性地改变样式。</p><p>4.尽量使用离线 <code>DOM</code>，而不是真实的网面 <code>DOM</code>，来改变元素样式。比如，操作 <code>Document Fragment</code> 对象，完成后再把这个对象加入 <code>DOM</code>。再比如，使用 <code>cloneNode()</code> 方法，在克隆的节点上进行操作，然后再用克隆的节点替换原始节点。</p><p>5.先将元素设为 <code>display: none</code>（需要 1 次重排和重绘），然后对这个节点进行 100 次操作，最后再恢复显示（需要 1 次重排和重绘）。这样一来，你就用两次重新渲染，取代了可能高达 100 次的重新渲染。</p><p>6.<code>position</code> 属性为 <code>absolute</code> 或 <code>fixed</code> 的元素，重排的开销会比较小，因为不用考虑它对其他元素的影响。原理就是使得元素不再同一层，<strong>基于这种想法还可以使用 <code>transform:translateZ(0);</code> 或者 <code>will-change:transform</code> 来创建新层</strong>，同样能减少重排，一般是对有动画的元素，因为重排很会频繁。</p><p>7.只在必要的时候，才将元素的 <code>display</code> 属性为可见，因为不可见的元素不影响重排和重绘。另外，<code>visibility : hidden</code> 的元素只对重绘有影响，不影响重排。先把元素设置为 <code>display:none</code> 最后再 <code>display:block</code> 就只会触发两次次重绘重排，一次消失，一次出现。</p><p>8.使用 <code>createDocumentFragment</code> 来创建 <code>DocumentFragment</code>(不属于文档树)，把需要插入的节点放到其中，最后再把 <code>DocumentFragment</code> 插入到文档流。当请求把一个 <code>DocumentFragment</code> 节点插入文档树时，插入的不是 <code>DocumentFragment</code> 自身，而是它的所有子孙节点。这使得 <code>DocumentFragment</code> 成了有用的占位符，暂时存放那些一次插入文档的节点。它还有利于实现文档的剪切、复制和粘贴操作。</p><p>9.使用 <code>cloneNode(true or false)</code> 和 <code>replaceChild</code> 技术，引发一次回流和重绘；</p><p>10.使用虚拟 <code>DOM</code> 的脚本库，比如 <code>React</code> 等。</p><p>11.使用 <code>window.requestAnimationFrame()</code>、<code>window.requestIdleCallback()</code> 这两个方法调节重新渲染（详见后文）。</p><h2 id="刷新率"><a href="#刷新率" class="headerlink" title="刷新率"></a>刷新率</h2><p>网页动画的每一帧（<code>frame</code>）都是一次重新渲染。每秒低于 24 帧的动画，人眼就能感受到停顿。一般的网页动画，需要达到每秒 30 帧到 60 帧的频率，才能比较流畅。如果能达到每秒 70 帧甚至 80 帧，就会极其流畅。</p><p>如果想达到 60 帧的刷新率，就意味着 <code>JavaScript</code> 线程每个任务的耗时，必须少于 16 毫秒。一个解决办法是使用 <code>Web Worker</code>，主线程只用于 <code>UI</code> 渲染，然后跟 <code>UI</code> 渲染不相干的任务，都放在 <code>Worker</code> 线程。</p><h3 id="开发者工具-Timeline"><a href="#开发者工具-Timeline" class="headerlink" title="开发者工具 Timeline"></a>开发者工具 Timeline</h3><p><code>Chrome</code> 或 <code>Safari</code> 之类的浏览器在开发者模式下有个 <code>Timeline</code> 的选项卡，可以录制一段时间内浏览器性能的问题，有帧模式和事件模式，可以互相切换。横条的是”事件模式”（<code>Event Mode</code>），显示重新渲染的各种事件所耗费的时间；竖条的是”帧模式”（<code>Frame Mode</code>），显示每一帧的时间耗费在哪里。</p><p>帧模式有两条水平线，下面的一条是 <code>60FPS</code>，低于这条线，可以达到每秒 60 帧；上面的一条是 <code>30FPS</code>，低于这条线，可以达到每秒 30 次渲染。如果色柱都超过 <code>30FPS</code>，这个网页就有性能问题了。</p><h2 id="PerformanceObserver"><a href="#PerformanceObserver" class="headerlink" title="PerformanceObserver"></a>PerformanceObserver</h2><p>这是个性能监测的 <code>API</code>，可以观察不同性能类型。</p><p><code>Google</code> 提出了以用户为中心的四个衡量指标：</p><ol><li>Is it happening? First Paint (<code>FP</code>,首次渲染,背景颜色之类的) / First Contentful Paint (<code>FCP</code>,首次内容渲染,有 <code>DOM</code> 出现)</li><li>Is it useful? First Meaningful Paint (<code>FMP</code>,首次有意义渲染) / Hero Element Timing</li><li>Is it usable? Time to Interactive (<code>TTI</code>,可以交互时间)</li><li>Is it delightful? Long Tasks(长任务)</li></ol><p><img src="/assets/img/perf-metrics-load-timeline.png" alt="perf-metrics-load-timeline"></p><ul><li><p>跟踪 <code>FP/FCP</code>，监听 <code>paint</code> 事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> PerformanceObserver(<span class="function"><span class="params">list</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> entry <span class="keyword">of</span> list.getEntries()) &#123;</span><br><span class="line">    <span class="comment">// `name` will be either 'first-paint' or 'first-contentful-paint'.</span></span><br><span class="line">    <span class="keyword">const</span> metricName = entry.name</span><br><span class="line">    <span class="keyword">const</span> time = <span class="built_in">Math</span>.round(entry.startTime + entry.duration)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送到 Google Analytics</span></span><br><span class="line">    ga(<span class="string">'send'</span>, <span class="string">'event'</span>, &#123;</span><br><span class="line">      eventCategory: <span class="string">'Performance Metrics'</span>,</span><br><span class="line">      eventAction: metricName,</span><br><span class="line">      eventValue: time,</span><br><span class="line">      nonInteraction: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">observer.observe(&#123; <span class="attr">entryTypes</span>: [<span class="string">'paint'</span>] &#125;)</span><br></pre></td></tr></table></figure></li><li><p>同理监听 <code>longtask</code> 事件，可以发现阻塞主进程的长任务进而进行优化。</p></li><li><p><code>FMP</code><br>关于页面有效内容，或者“Hero element”，由于依赖具体实现，并没有给出通用方法。 具体可以使用 <a href="https://speedcurve.com/blog/user-timing-and-custom-metrics/" target="_blank" rel="noopener">performance api 度量指标</a>。</p></li><li><p><code>TTI</code><br>对于 <code>TTI</code> 可以使用 <a href="https://github.com/GoogleChromeLabs/tti-polyfill" target="_blank" rel="noopener">tti-polyfill</a> 的垫片来完成对 <code>TTI</code> 的监控：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ttiPolyfill <span class="keyword">from</span> <span class="string">'./path/to/tti-polyfill.js'</span></span><br><span class="line"></span><br><span class="line">ttiPolyfill.getFirstConsistentlyInteractive().then(<span class="function"><span class="params">tti</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//发送到 Google Analytics</span></span><br><span class="line">  ga(<span class="string">'send'</span>, <span class="string">'event'</span>, &#123;</span><br><span class="line">    eventCategory: <span class="string">'Performance Metrics'</span>,</span><br><span class="line">    eventAction: <span class="string">'TTI'</span>,</span><br><span class="line">    eventValue: tti,</span><br><span class="line">    nonInteraction: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>input latency(输入延迟)<br>有时候鼠标事件可能会超过很长一段时间才响应，这也是需要我们发现并解决的，可以用当前时间与事件事件比较得出结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> subscribeBtn = <span class="built_in">document</span>.querySelector(<span class="string">'#subscribe'</span>);</span><br><span class="line"></span><br><span class="line">subscribeBtn.addEventListener(<span class="string">'click'</span>, (event) =&gt; &#123;</span><br><span class="line">  <span class="comment">// Event listener logic goes here...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> lag = performance.now() - event.timeStamp;</span><br><span class="line">  <span class="keyword">if</span> (lag &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    ga(<span class="string">'send'</span>, <span class="string">'event'</span>, &#123;</span><br><span class="line">      eventCategory: <span class="string">'Performance Metric'</span></span><br><span class="line">      eventAction: <span class="string">'input-latency'</span>,</span><br><span class="line">      eventLabel: <span class="string">'#subscribe:click'</span>,</span><br><span class="line">      eventValue: <span class="built_in">Math</span>.round(lag),</span><br><span class="line">      nonInteraction: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在某一个根元素上绑定对应监测事件，获得时间差，大于 100ms 则发送报告。</p></li></ul><h2 id="window-requestAnimationFrame"><a href="#window-requestAnimationFrame" class="headerlink" title="window.requestAnimationFrame"></a>window.requestAnimationFrame</h2><p><code>window.requestAnimationFrame(callback)</code> 方法可以将某些代码放到下一次重新渲染时执行。</p><p>页面滚动事件（<code>scroll</code>）的监听函数，就很适合用 <code>window.requestAnimationFrame()</code> ，推迟到下一次重新渲染。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.requestAnimationFrame(scrollHandler)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>但是得注意一个问题，像滚动或者触屏事件可能频繁触发，导致在一帧内多次渲染，造成不必要的计算与绘制，解决方法一个是使用节流函数，另一个比较完美的方法就是通过 <code>requestAnimationFrame</code> 来管理队列，其思路就是保证 <code>requestAnimationFrame</code> 的队列里，同样的回调函数只有一个。示意代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> scheduledAnimationFrame = <span class="literal">false</span></span><br><span class="line"><span class="keyword">const</span> onScroll = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (scheduledAnimationFrame) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  scheduledAnimationFrame = <span class="literal">true</span></span><br><span class="line">  <span class="built_in">window</span>.requestAnimationFrame(scrollHandler)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, onScroll)</span><br></pre></td></tr></table></figure><p>当然，最适用的场合还是网页动画。下面是一个旋转动画的例子，元素每一帧旋转 1 度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rAF = <span class="built_in">window</span>.requestAnimationFrame</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> degrees = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  div.style.transform = <span class="string">'rotate('</span> + degrees + <span class="string">'deg)'</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'updated to degrees '</span> + degrees)</span><br><span class="line">  degrees = degrees + <span class="number">1</span></span><br><span class="line">  rAF(update)</span><br><span class="line">&#125;</span><br><span class="line">rAF(update)</span><br></pre></td></tr></table></figure><h2 id="window-requestIdleCallback"><a href="#window-requestIdleCallback" class="headerlink" title="window.requestIdleCallback()"></a>window.requestIdleCallback()</h2><p>另一个比较冷门的就是 <code>window.requestIdleCallback(callback [,timeout])</code> 了，这个函数指定只有当一帧的末尾有空闲时间，才会执行回调函数。也就是说只有当前帧的运行时间小于 16.66ms 时，函数 <code>callback</code> 才会执行。否则，就推迟到下一帧，如果下一帧也没有空闲时间，就推迟到下下一帧，以此类推。</p><p>第二个参数代表过了规定时间后如果还没出发就强制执行，怕浏览器一直很忙而来不及渲染。</p><p><code>callback</code> 可以接收 <code>deadline</code> 作为参数，<code>deadline</code> 对象有一个方法和一个属性：<code>timeRemaining()</code> 和 <code>didTimeout</code>。</p><p><code>timeRemaining()</code> 方法返回当前帧还剩余的毫秒。这个方法只能读，不能写，而且会动态更新。因此可以不断检查这个属性，如果还有剩余时间的话，就不断执行某些任务。一旦这个属性等于 0，就把任务分配到下一轮 <code>requestIdleCallback</code>。<code>didTimeout</code> 属性会返回一个布尔值，表示指定的时间是否过期。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNonEssentialWork</span>(<span class="params">deadline</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//当前帧还有空余时间就做任务，如果任务没做完移动到下一个 requestIdleCallback</span></span><br><span class="line">  <span class="keyword">while</span> (</span><br><span class="line">    (deadline.timeRemaining() &gt; <span class="number">0</span> || deadline.didTimeout) &amp;&amp;</span><br><span class="line">    tasks.length &gt; <span class="number">0</span></span><br><span class="line">  )</span><br><span class="line">    doWorkIfNeeded()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (tasks.length &gt; <span class="number">0</span>) requestIdleCallback(myNonEssentialWork)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">requestIdleCallback(myNonEssentialWork, <span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>上面代码确保了，<code>doWorkIfNeeded</code> 函数一定会在将来某个比较空闲的时间（或者在指定时间过期后）得到反复执行。</p><h2 id="使输入处理程序去除抖动"><a href="#使输入处理程序去除抖动" class="headerlink" title="使输入处理程序去除抖动"></a>使输入处理程序去除抖动</h2><p>输入处理程序可能是应用出现性能问题的原因，因为它们可能阻止帧完成，并且可能导致额外（且不必要）的布局工作。</p><p>解决方案如下：</p><ul><li>避免长时间运行输入处理程序；它们可能阻止滚动。</li><li>不要在输入处理程序中进行样式更改。</li><li>使处理程序去除抖动；存储事件值并在下一个 <code>requestAnimationFrame</code> 回调中处理样式更改(<strong>注意更改样式放到最后，读取操作放在更改样式之前，以免发生强制同步布局</strong>)。</li></ul><p>去抖动：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onScroll</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Store the scroll value for laterz.</span></span><br><span class="line">  lastScrollY = <span class="built_in">window</span>.scrollY</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Prevent multiple rAF callbacks.</span></span><br><span class="line">  <span class="keyword">if</span> (scheduledAnimationFrame) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  scheduledAnimationFrame = <span class="literal">true</span></span><br><span class="line">  requestAnimationFrame(readAndUpdatePage)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, onScroll)</span><br></pre></td></tr></table></figure><p>可以发现是先存储了 <code>window.scrollY</code>，然后在 <code>requestAnimationFram</code> 的回调函数中再去获取这个值，不用担心触发强制同步布局；使用 <code>scheduledAnimationFrame</code> 来防止抖动；这样做还有一个好处是使输入处理程序轻量化，效果非常好，因为现在您不用去阻止计算开销很大的代码的操作，处理逻辑都放到了 <code>requestAnimationFrame</code> 的回调函数中执行了！</p><h2 id="worker"><a href="#worker" class="headerlink" title="worker"></a>worker</h2><p>todo</p><h1 id="加载性能"><a href="#加载性能" class="headerlink" title="加载性能"></a>加载性能</h1><h2 id="压缩资源"><a href="#压缩资源" class="headerlink" title="压缩资源"></a>压缩资源</h2><ul><li><p>源码压缩：预处理和环境特定优化<br>压缩冗余或不必要数据的最佳方法是将其全部消除。我们不能只是删除任意数据，但在某些环境中，我们可能对数据格式及其属性有内容特定了解，往往可以在不影响其实际含义的情况下显著减小负载的大小。<br>比如消除 <code>CSS</code>, <code>JS</code>的注释，空格等等。</p></li><li><p>通过 <code>GZIP</code> 压缩文本<br><code>GZIP</code> 对基于文本的资产的压缩效果最好：<code>CSS</code>、<code>JavaScript</code> 和 <code>HTML</code>。<br>所有现代浏览器都支持 <code>GZIP</code> 压缩，并且会自动请求该压缩。<br>您的服务器必须配置为启用 <code>GZIP</code> 压缩。<br>某些 <code>CDN</code> 需要特别注意以确保 <code>GZIP</code> 已启用。</p></li></ul><h2 id="图像优化"><a href="#图像优化" class="headerlink" title="图像优化"></a>图像优化</h2><ul><li>消除多余的图像资源</li><li>尽可能利用 <code>CSS3</code> 效果</li><li>使用网页字体取代在图像中进行文本编码</li><li>使用矢量图(SVG)，还可以同时使用 <code>GZIP</code> 压缩</li><li>将图片格式转为 <code>WebP</code> 来压缩图片(有些浏览器不支持需要注意)</li><li>一些 <code>CDN</code> 也提供图片的优化</li><li>懒加载(将页面里所有 <code>img</code> 属性 <code>src</code> 属性用 <code>data-xx</code> 代替，当页面滚动直至此图片出现在可视区域时，用 <code>js</code> 取到该图片的 <code>data-xx</code> 的值赋给 <code>src</code>，<code>onscroll</code> 监听每一个 <code>li</code> 的 <code>scrollTop</code>，或者对于 <code>css</code> 属性的图片可以动态添加 <code>visible</code> 的 <code>class</code> 来完成，比如初始化的时候找一张 <code>holder</code> 的图片，等到滚动到可视区域后加上 <code>visible</code> 的 <code>class</code> 来替换成真实的图片)。这里可以了解一下 <code>IntersectionObserver API</code> 来检测对象是否在用户可视区。<strong>有时候为了节约渲染性能会使用和图片相同大小的占位符</strong></li><li>大的 <code>GIF</code> 可以转化为视频，减少加载时间</li><li>使用 <code>Progressive JPEG</code>(这种加载时从低分辨率到高分辨率，从模糊到清晰) 代替传统的 <code>JPEG</code>(这种是 Baseline 的，从上加载到下，需要等待加载完才知道图片是啥)，更加具体的细节可以查看谷歌文档 <a href="https://developers.google.cn/web/fundamentals/performance/optimizing-content-efficiency/automating-image-optimization/?hl=zh-cn" target="_blank" rel="noopener">automating-image-optimization</a></li><li>视频使用 <code>preload=&quot;none&quot;</code> 来阻止预加载视频，有时可以使用 <code>GIF</code> 替换视频</li></ul><h2 id="JS-优化"><a href="#JS-优化" class="headerlink" title="JS 优化"></a>JS 优化</h2><ul><li>只发送用户需要的，可使用代码分割技术，例如 <code>webpack</code> 中的 <code>code-spliting</code>。</li><li>缩小，<code>UglifyJS</code> 缩小 <code>ES5</code> 的代码，使用 <code>babel-minify</code> 来缩小 <code>ES6</code> 及以上代码。</li><li>压缩，<code>GZIP</code>。</li><li>使用 <code>HTTP</code> 缓存。</li><li>加载第三方脚本可以使用 <code>async</code> 或者 <code>defer</code> 属性。</li><li>移除未引用的代码，<code>tree-shaking</code>。</li></ul><p><img src="/assets/img/async_defer.png" alt="aysnc-defer"></p><p>这里可以看到 <code>async</code> 与 <code>defer</code> 的区别，<code>async</code> 是使得脚本的下载和 <code>DOM</code> 的解析同时进行，当脚本下载好的时候立即停止 <code>DOM</code> 解析然后执行脚本；而 <code>defer</code> 虽然也是同时下载和解析，但是就算下载完成了也是需要等待 <code>DOM</code> 解析完成了才可以执行。</p><h2 id="字体优化"><a href="#字体优化" class="headerlink" title="字体优化"></a>字体优化</h2><ul><li>在构建渲染树之前会延迟字体请求，这可能会导致文本渲染延迟，<code>CSS</code> 已经下载完并与 <code>DOM</code> 共同构建渲染树，这个时候如果需要请求字体可能会阻塞渲染，产生了“空白文本问题”，出现该问题时，浏览器会在渲染网页布局时遗漏所有文本。</li><li>可以通过 <code>Font Loading API</code> 实现自定义字体加载和渲染策略，以替换默认延迟加载字体加载。</li><li>可以通过字体内联替换较旧浏览器中的默认延迟加载字体加载。</li></ul><h3 id="通过-Font-Loading-API-优化字体渲染"><a href="#通过-Font-Loading-API-优化字体渲染" class="headerlink" title="通过 Font Loading API 优化字体渲染"></a>通过 Font Loading API 优化字体渲染</h3><p><a href="https://drafts.csswg.org/css-font-loading/" target="_blank" rel="noopener">Font Loading API</a> 提供了一种脚本编程接口来定义和操纵 <code>CSS</code> 字体，追踪其下载进度，以及替换其默认延迟下载行为。例如，如果您确定将需要特定字体变体，您可以定义它并指示浏览器启动对字体资源的立即获取：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> font = <span class="keyword">new</span> FontFace(<span class="string">'Awesome Font'</span>, <span class="string">'url(/fonts/awesome.woff2)'</span>, &#123;</span><br><span class="line">  style: <span class="string">'normal'</span>,</span><br><span class="line">  unicodeRange: <span class="string">'U+000-5FF'</span>,</span><br><span class="line">  weight: <span class="string">'400'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">font.load() <span class="comment">// don't wait for the render tree, initiate an immediate fetch!</span></span><br><span class="line"></span><br><span class="line">font.ready().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// apply the font (which may re-render text and cause a page reflow)</span></span><br><span class="line">  <span class="comment">// after the font has finished downloading</span></span><br><span class="line">  <span class="built_in">document</span>.fonts.add(font)</span><br><span class="line">  <span class="built_in">document</span>.body.style.fontFamily = <span class="string">'Awesome Font, serif'</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// OR... by default the content is hidden,</span></span><br><span class="line">  <span class="comment">// and it's rendered after the font is available</span></span><br><span class="line">  <span class="keyword">var</span> content = <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>)</span><br><span class="line">  content.style.visibility = <span class="string">'visible'</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// OR... apply your own render strategy here...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="通过内联优化字体渲染"><a href="#通过内联优化字体渲染" class="headerlink" title="通过内联优化字体渲染"></a>通过内联优化字体渲染</h3><p>使用 <code>Font Loading API</code> 消除“空白文本问题”的简单替代策略是将字体内容内联到 <code>CSS</code> 样式表内：</p><ul><li>浏览器会使用高优先级自动下载具有匹配媒体查询的 <code>CSS</code> 样式表，因为需要使用它们来构建 <code>CSSOM</code>。</li><li>将字体数据内联到 <code>CSS</code> 样式表中会强制浏览器使用高优先级下载字体，而不等待渲染树。即它起到的是手动替换默认延迟加载行为的作用。</li></ul><h2 id="离线"><a href="#离线" class="headerlink" title="离线"></a>离线</h2><p>一些需要离线的资源(下次也能用上，如购物车)也可以考虑放到本地存储里，如 <code>localStorage</code>、<code>sessionStorage</code> 等等。</p><p>离线的图片可以使用 <code>Cache API</code> 来完成，详情查看 <a href="https://developers.google.cn/web/fundamentals/instant-and-offline/web-storage/cache-api?hl=zh-cn" target="_blank" rel="noopener">Using the Cache API</a>。</p><p>当数据量较大的时候，就可能用到 <code>IndexedDB</code> 来存储了。注意使用的时候需要注意并不是所有的类型都能写到 <code>IndexedDB</code> 中的，<code>IOS</code> 上的 <code>Safari</code> 是不能存储 <code>Blob</code> 类型的数据的，但是 <code>ArrayBuffer</code> 类型就是比较通用的了。写入可能失败，开发者需要意识到这一点，添加错误的监听函数。</p><h2 id="使用-CDN-加速"><a href="#使用-CDN-加速" class="headerlink" title="使用 CDN 加速"></a>使用 CDN 加速</h2><p>todo</p><h2 id="使用-HTTP-缓存"><a href="#使用-HTTP-缓存" class="headerlink" title="使用 HTTP 缓存"></a>使用 HTTP 缓存</h2><p>详情查看另一篇博客 <a href="/2018/08/09/前端基础之网络/#强缓存与协商缓存">前端基础之网络–强缓存与协商缓存</a>。</p><h2 id="关键路径渲染优化"><a href="#关键路径渲染优化" class="headerlink" title="关键路径渲染优化"></a>关键路径渲染优化</h2><p>详情查看另一篇博客 <a href="/2018/08/09/前端基础之关键路径渲染优化/index.html">前端基础之关键路径渲染优化</a>。</p><h2 id="PRPL-模式"><a href="#PRPL-模式" class="headerlink" title="PRPL 模式"></a>PRPL 模式</h2><p><code>PRPL</code> 是一种用于结构化和提供 <code>Progressive Web App</code> (<code>PWA</code>) 的模式，该模式强调应用交付和启动的性能。 它代表：</p><ul><li>推送 - 为初始网址路由推送关键资源。(Push critical resources for the initial route.)</li><li>渲染 - 渲染初始路由。(Render initial route.)</li><li>预缓存 - 预缓存剩余路由。(Pre-cache remaining routes.)</li><li>延迟加载 - 延迟加载并按需创建剩余路由。(Lazy-load and create remaining routes on demand.)</li></ul><p>像下面这种应用结构就很适合用 <code>RPRL</code> 模式：</p><ol><li>应用的主<em>进入点</em>从每个有效的路由提供。 此文件应非常小，它从不同网址提供，因此会被缓存多次。 进入点的所有资源网址都需要是绝对网址，因为它可以从非顶级网址提供。</li><li><code>Shell</code> 或 <code>App Shell</code>，包含顶级应用逻辑、路由器，等等。</li><li>延迟加载的应用 _片段_ 。片段可以表示特定视图的代码，或可延迟加载的其他代码（例如，首次绘制不需要的部分主应用，如用户与应用交互前未显示的菜单）。<code>Shell</code> 负责在需要时动态导入片段。</li></ol><p><img src="/assets/img/app-build-components.png" alt="app-build-components"></p><p>在此图表中，实线表示<em>静态依赖项</em>：使用 <code>&lt;link&gt;</code> 和 <code>&lt;script&gt;</code> 标记在文件中标识的外部资源。 虚线表示<em>动态</em>或<em>按需加载的依赖项</em>：根据 <code>Shell</code> 所需加载的文件。</p><p>构建过程会构建一个包含所有这些依赖项的图表，服务器会使用此信息高效地提供文件。 还会为不支持 <code>HTTP/2</code> 的浏览器构建一组硬化捆绑包。</p><h2 id="资源优先级"><a href="#资源优先级" class="headerlink" title="资源优先级"></a>资源优先级</h2><p>不是每个资源的都是同等重要的，浏览器加载资源有一定的优先级(例如 <code>CSS</code> 的加载优先级就比脚本和图片要高)。</p><h3 id="浏览器默认优先级"><a href="#浏览器默认优先级" class="headerlink" title="浏览器默认优先级"></a>浏览器默认优先级</h3><p>一般来说 <code>HTML</code> 和 <code>CSS</code> 有同样高的优先级(<code>Highest</code>)，而在 <code>head</code> 标签中的 <code>script</code> 标签的优先级就是 <code>High</code>，在 <code>body</code> 里最后时是 <code>Medium</code>，但是如加上了 <code>async</code> 属性那么优先级就会变成 <code>Low</code>，等等。具体的读者可以打开 <code>Chrome</code> 的开发者工具中的 <code>Network</code> 右键表头显示 <code>Priority</code> 查看网站加载资源优先级的详情，如图：</p><p><img src="/assets/img/chrome_priority.png" alt="resources priority"></p><p>那么当你发现资源的优先级和你预想的不一样该怎么办？这里提供三种解决方案，都是和新的 <code>&lt;link&gt;</code> 类型相关的。一方面，如果发现资源对用户是关键的，但是加载优先级却特别低，你可以使用 <code>preload</code> 或者 <code>preconnect</code> 来解决；另一方面，如果想要当其他所有资源都已经处理完毕再让浏览器去获取某些资源，可以使用 <code>prefetch</code>。</p><h3 id="Preload"><a href="#Preload" class="headerlink" title="Preload"></a>Preload</h3><p><code>&lt;link rel=&quot;preload&quot;&gt;</code> 告诉浏览器这个资源是当前页面所需要的，需要尽快获取。可以这么使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">as</span>=<span class="string">"script"</span> <span class="attr">href</span>=<span class="string">"super-important.js"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">as</span>=<span class="string">"style"</span> <span class="attr">href</span>=<span class="string">"critical.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>as</code> 属性是用来告诉浏览器资源的类型(<strong>如果类型没有设置那么浏览器是不会拿这个资源来用的</strong>)。大部分基于标签的资源会被浏览器内部的预加载器（<a href="https://calendar.perfplanet.com/2013/big-bad-preloader/" target="_blank" rel="noopener">preloader</a>）提早发现，但并非所有资源都是基于标签的。有些资源是隐藏在 <code>CSS</code> 和 <code>JavaScript</code> 中的，浏览器不知道页面即将需要这些资源，而等到发现它们时已经为时已晚。所以在有些情况，这些资源延缓了首屏渲染，或是延缓了页面关键部分的加载。而 <code>preload</code> 就告诉浏览器当前页面一定会用到这个资源的，赶紧去获取。</p><blockquote><p>注意 <code>preload</code> 不会阻塞 <code>window.onload</code> 事件，除非该资源是被一个阻塞该事件的资源请求的。</p></blockquote><blockquote><p>加载该资源后，如果 3s 内还没有被当前页面使用，那么控制台会抛出一个警告，故而需要注意！！！</p></blockquote><p><img src="/assets/img/res-prio-timeout.png" alt="res-prio-timeout"></p><p><strong>使用场景：</strong></p><ul><li><p>较早加载字体<br>一种流行的“较晚发现关键资源”的代表是 <code>Web</code> 字体。一方面，它对页面渲染字体很关键（除非你在使用最新的 <code>font-display</code>）。另一方面，它们被埋在 <code>CSS</code> 很深的地方，很难发现。所以对一定需要的字体可以使用 <code>preload</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">as</span>=<span class="string">"font"</span> <span class="attr">crossorigin</span>=<span class="string">"crossorigin"</span> <span class="attr">type</span>=<span class="string">"font/woff2"</span> <span class="attr">href</span>=<span class="string">"myfont.woff2"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>有一点需要指明，获取字体时必须加上 <code>crossorigin</code> 属性，就如使用 <code>CORS</code> 的匿名模式获取一样，即使你的字体与页面同域(否则会被浏览器忽略)。</strong></p></li><li><p>加载关键路径的 <code>CSS</code> 和 <code>JavaScript</code><br>关键路径资源是初始加载所必需的，虽然可以使用内联来达到及时加载的目的，但是却失去了缓存(<code>HTML</code> 是不缓存的，文件太大的话缓存的作用就不明显了)的优势和版本控制(修改关键路径的任何资源都导致整个页面更新，而如果是分开的资源则只需更新部分资源)的优势。</p></li></ul><h3 id="Preconnect"><a href="#Preconnect" class="headerlink" title="Preconnect"></a>Preconnect</h3><p><code>&lt;link rel=&quot;preconnect&quot;&gt;</code> 告诉浏览器你的页面将要与另一个域建立连接，并且想要这个过程尽快开始。</p><p>建立连接在慢网络中通常需要较多的时间来建立，尤其是安全连接时，包括了 <code>DNS</code> 查找、重定向、若干循环才找到能处理用户请求的服务器，不仅完成 <code>DNS</code> 预解析，同时还将进行 <code>TCP</code> 握手和建立传输层协议，而将这些操作提前能提升网页的性能和用户体验。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preconnect"</span> <span class="attr">href</span>=<span class="string">"http://example.com"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>尽量使用 <code>preload</code>，因为它是更为全面的性能提升。</p></blockquote><blockquote><p><code>dns-prefetch</code> 的浏览器支持度会好点，但是这个只是提前做了 <code>DNS</code> 查找，并不进行 <code>TCP</code> 握手和传输层协议的建立。</p></blockquote><p><strong>使用场景：</strong></p><ul><li>知道当前需要获取的资源在哪却不知道具体是什么资源</li><li>流媒体</li></ul><h3 id="Prefetch"><a href="#Prefetch" class="headerlink" title="Prefetch"></a>Prefetch</h3><p>不像 <code>preload</code> 和 <code>preconnect</code> 使用关键资源更早被获取或连接，<code>prefetch</code> 使得那些非关键的资源被下载(如果可能的话)。这个是优先级最低的，在 <code>Chrome</code> 中能看到是 <code>Lowest</code>。</p><p>一般预测用户下一步要干什么并提前准备好，比如加载某个列表的第一项、加载下一页(小说里比较常见).</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prefetch"</span> <span class="attr">href</span>=<span class="string">"page-2.html"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意 <code>prefetch</code> 不能覆盖，如果同时有一个正常请求的资源和一个 <code>prefetch</code> 的相同资源，那么这个资源会被加载两次，一个以高优先级下载，一个以低优先级下载。</p></blockquote><blockquote><p>预获取的资源没有同源限制！</p></blockquote><blockquote><p><code>subresources</code> 是另一个预获取资源的方式，只不过优先级更高，在所有的 <code>prefetch</code> 之前进行。<code>&lt;link rel=&quot;subresource&quot; href=&quot;styles.css&quot;&gt;</code>。</p></blockquote><h2 id="Webpack-优化加载性能"><a href="#Webpack-优化加载性能" class="headerlink" title="Webpack 优化加载性能"></a>Webpack 优化加载性能</h2><p>1.有效利用浏览器缓存：<code>code split</code>，如第三方库、<code>polyfill</code> 单独打包，分离公共库；<code>css</code> 单独提取出一个文件，<code>ExtractTextPlugin</code>。</p><p>2.懒加载：动态引入，<code>import</code>，注意可能需要使用 <code>babel</code> 的 <code>dynamic-webpack-import</code> 插件，不然编译会报错。</p><p>3.减少代码体积：<code>Minification</code>，使用 <code>UglifyJsPlugin</code> 来 <code>minify</code> 代码，生产环境相要对应上源代码需要同时设置 <code>devtool</code> 的值和 <code>UglifyJsPlugin</code> 的 <code>sourceMap</code> 为 <code>true</code>；使用 <code>babel-preset-env</code> 的 <code>useBuiltIns</code> 和 <code>target</code> 来共同控制需要 <code>shim</code> 的 <code>polyfill</code> 代码，尽量少加载垫片，比原来直接 <code>import &#39;babel-polyfill&#39;</code> 要少一部分的垫片；<code>tree-shaking</code> 来去除无用的代码。</p><p>4.图片压缩：使用 <code>image-webpack-loader</code> 来压缩图片，注意 <code>webp</code> 支持度较低，不建议使用。</p><p>5.分析包结构：使用 <code>BundleAnalyzerPlugin</code> 来分析打包后的包结构以及大小，便于后续的优化。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;渲染性能&quot;&gt;&lt;a href=&quot;#渲染性能&quot; class=&quot;headerlink&quot; title=&quot;渲染性能&quot;&gt;&lt;/a&gt;渲染性能&lt;/h1&gt;&lt;h2 id=&quot;重绘重排&quot;&gt;&lt;a href=&quot;#重绘重排&quot; class=&quot;headerlink&quot; title=&quot;重绘重排&quot;&gt;&lt;/a&gt;重绘重排&lt;/h2&gt;&lt;p&gt;以下三种情况会导致网页重新渲染：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改 DOM&lt;/li&gt;
&lt;li&gt;修改样式表&lt;/li&gt;
&lt;li&gt;用户事件（比如鼠标悬停、页面滚动、输入框键入文字、改变窗口大小等等）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://1016990109.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="性能优化" scheme="http://1016990109.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="浏览器" scheme="http://1016990109.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>前端基础之从输入url到页面呈现的过程</title>
    <link href="http://1016990109.github.io/2018/08/02/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%91%88%E7%8E%B0%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>http://1016990109.github.io/2018/08/02/前端基础之从输入url到页面呈现的过程/</id>
    <published>2018-08-02T08:18:52.000Z</published>
    <updated>2018-08-02T15:39:38.250Z</updated>
    
    <content type="html"><![CDATA[<p>1.用户输入网址</p><p>2.浏览器通过 <code>DNS</code> 获取网站的 <code>IP</code> 地址。客户端先检查本地是否有对应的 <code>IP</code> 地址，若找到则返回响应的 <code>IP</code> 地址。若没找到则请求上级 <code>DNS</code> 服务器，直至找到或到根节点。</p><blockquote><p><code>DNS</code> 查找 <code>IP</code> 地址的顺序: 浏览器缓存、系统缓存、互联网服务提供商（<code>ISP</code>）的 <code>DNS</code> 缓存、递归搜索（从浏览器缓存开始，如果没找到就继续往下一个找）。找到后，浏览器会获得一个 <code>IP</code> 地址。</p></blockquote><a id="more"></a><p><code>DNS</code> 递归查询和迭代查询区别：</p><p><img src="/assets/img/dns.png" alt="DNS"></p><blockquote><p>关于 <code>DNS</code> 的一些知识可以看看阮一峰老师的 <a href="http://www.ruanyifeng.com/blog/2018/05/root-domain.html" target="_blank" rel="noopener">根域名的知识</a> 和 <a href="http://www.ruanyifeng.com/blog/2016/06/dns.html" target="_blank" rel="noopener">DNS 原理入门</a></p></blockquote><p>3.浏览器客户端发送 <code>HTTP</code> 请求<br><code>HTTP</code> 请求包括请求报头和请求主体两个部分，其中请求报头包含了至关重要的信息，包括请求的方法（<code>GET</code> / <code>POST</code>）、目标 <code>url</code>、遵循的协议（<code>http</code> / <code>https</code> / <code>ftp</code> …），返回的信息是否需要缓存，以及客户端是否发送 <code>cookie</code> 等。</p><p>4.传输层 <code>TCP</code> 传输报文。<br><code>TCP</code> 协议通过“三次握手”等方法保证传输的安全可靠。</p><p>5.网络层 <code>IP</code> 协议查询 <code>MAC</code> 地址<br><code>IP</code> 协议的作用是把 <code>TCP</code> 分割好的各种数据包传送给接收方。而要保证确实能传到接收方还需要接收方的 <code>MAC</code> 地址，也就是物理地址。<code>IP</code> 地址和 <code>MAC</code> 地址是一一对应的关系，一个网络设备的 <code>IP</code> 地址可以更换，但是 <code>MAC</code> 地址一般是固定不变的。<code>ARP</code> 协议可以将 <code>IP</code> 地址解析成对应的 <code>MAC</code> 地址。当通信的双方不在同一个局域网时，需要多次中转才能到达最终的目标，在中转的过程中需要通过下一个中转站的 <code>MAC</code> 地址来搜索下一个中转目标。</p><p>6.数据到达数据链路层<br>在找到对方的 <code>MAC</code> 地址后，就将数据发送到数据链路层传输。这时，客户端发送请求的阶段结束。</p><p>7.服务器接收数据<br>接收端的服务器在链路层接收到数据包，再层层向上直到应用层。这过程中包括在运输层通过 <code>TCP</code> 协议将分段的数据包重新组成原来的 <code>HTTP</code> 请求报文。</p><p>8.服务器响应请求<br>服务接收到客户端发送的 <code>HTTP</code> 请求后，查找客户端请求的资源，并返回响应报文，响应报文中包括一个重要的信息——状态码。状态码由三位数字组成，其中比较常见的是:</p><p><code>200 OK</code> 表示请求成功。<br><code>301 Moved Permanently</code> 表示永久重定向，即请求的资源已经永久转移到新的位置。在返回 <code>301</code> 状态码的同时，响应报文也会附带重定向的 <code>url</code>，客户端接收到后将 <code>http</code> 请求的 <code>url</code> 做相应的改变再重新发送。<br><code>302</code> 是暂时重定向，对用户来说没有区别，只是对搜索引擎有区别，具体可查看 <a href="https://www.jianshu.com/p/995a3000f7d6" target="_blank" rel="noopener">https://www.jianshu.com/p/995a3000f7d6</a>。<br><code>404 Not Found</code> 表示客户端请求的资源找不到。<br><code>400 Bad Request</code>，客户端请求语法错误，一般是参数错了。<br><code>401 Unauthorized</code>，需要用户认证，一般未登录。<br><code>403 Forbidden</code>，拒绝请求，可能是没权限。<br><code>405 Method Not Allowed</code>，方法错了。<br><code>500</code>，服务器错误，一般是服务器抛异常。<br><code>501 Not Implemented</code>，服务器还没实现这个功能。<br><code>502 Bad Gateway</code>，网关错误，可能是网关与后端服务连接断了。<br><code>503 Service Unavailable</code>，服务暂不可用，系统维护。<br><code>504 Gateway Time-out</code>，网关超时，后端处理太久还没返回，网关直接返回 <code>504</code>。</p><p>9.服务器返回响应文件<br>请求成功后，服务器会返回相应的 <code>HTML</code> 文件。接下来就到了页面的渲染阶段了。</p><p>10.页面渲染：  解析 <code>HTML</code> 以构建 <code>DOM</code> 树 –&gt; 构建渲染树 –&gt; 布局渲染树 –&gt; 绘制渲染树。<br>关于页面渲染过程：<br>1）解析 <code>HTML</code> 代码，生成一棵 <code>DOM</code> 树<br>2）解析 <code>CSS</code> 文件<br>3）生成渲染树（受样式影响，不包含不可见元素）<br>4）渲染树中的节点</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.用户输入网址&lt;/p&gt;
&lt;p&gt;2.浏览器通过 &lt;code&gt;DNS&lt;/code&gt; 获取网站的 &lt;code&gt;IP&lt;/code&gt; 地址。客户端先检查本地是否有对应的 &lt;code&gt;IP&lt;/code&gt; 地址，若找到则返回响应的 &lt;code&gt;IP&lt;/code&gt; 地址。若没找到则请求上级 &lt;code&gt;DNS&lt;/code&gt; 服务器，直至找到或到根节点。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;DNS&lt;/code&gt; 查找 &lt;code&gt;IP&lt;/code&gt; 地址的顺序: 浏览器缓存、系统缓存、互联网服务提供商（&lt;code&gt;ISP&lt;/code&gt;）的 &lt;code&gt;DNS&lt;/code&gt; 缓存、递归搜索（从浏览器缓存开始，如果没找到就继续往下一个找）。找到后，浏览器会获得一个 &lt;code&gt;IP&lt;/code&gt; 地址。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://1016990109.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>《Node.js 设计模式》读书笔记 第七章</title>
    <link href="http://1016990109.github.io/2018/07/28/Node-js-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%83%E7%AB%A0/"/>
    <id>http://1016990109.github.io/2018/07/28/Node-js-设计模式读书笔记-第七章/</id>
    <published>2018-07-28T15:36:33.000Z</published>
    <updated>2018-08-02T08:13:28.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Wiring-Modules-连接模块"><a href="#Wiring-Modules-连接模块" class="headerlink" title="Wiring Modules(连接模块)"></a>Wiring Modules(连接模块)</h1><p>对模块常见的一个问题就是：将组件 X 的实例传递到模块 Y 的最佳方式是什么？</p><p>常见的模式有一下几种：</p><ul><li>硬编码依赖</li><li>依赖注入</li><li>服务定位器</li><li>依赖注入容器</li></ul><a id="more"></a><h2 id="Modules-and-dependencies-模块和依赖"><a href="#Modules-and-dependencies-模块和依赖" class="headerlink" title="Modules and dependencies(模块和依赖)"></a>Modules and dependencies(模块和依赖)</h2><h3 id="The-most-common-dependency-in-Node-js-Node-js-中最常见的模块"><a href="#The-most-common-dependency-in-Node-js-Node-js-中最常见的模块" class="headerlink" title="The most common dependency in Node.js(Node.js 中最常见的模块)"></a>The most common dependency in Node.js(Node.js 中最常见的模块)</h3><p>一个模块的属性可以概括如下：</p><ul><li>一个模块应该具有可读性和可理解性，因为它应该专注于一件事。</li><li>一个模块被表示为一个单独的文件，使得其更容易被识别。</li><li>模块可以更容易地在不同的应用程序中复用。</li></ul><h3 id="Cohesion-and-coupling-内聚和耦合"><a href="#Cohesion-and-coupling-内聚和耦合" class="headerlink" title="Cohesion and coupling(内聚和耦合)"></a>Cohesion and coupling(内聚和耦合)</h3><p>评判创建的模块平衡性两个最重要的特征就是内聚度和耦合度。这两个特征可以应用于软件体系结构中的任何类型的组件或子系统。因此在构建 <code>Node.js</code> 模块时也可以把这两个特征作为重要的参考价值。这两个属性定义如下：</p><p>内聚度：用于度量模块内部功能之间的相关性。例如，对于一个只做一件事的模块，其中的所有部件都只对这一件事起作用，那说明这个模块具有很高的内聚度。举个例子，那种包含把任何类型的对象存储到数据库的函数内聚度就较低，如 <code>saveProduct()</code>、<code>saveInvoice()</code>、<code>saveUser()</code> 等。</p><p>耦合度：评判模块对系统其他模块的依赖程度。例如，当一个模块直接读取或修改另一个模块的数据时，该模块与另一个模块是紧密耦合的；另外，通过全局或共享状态交互的两个模块也是紧密耦合的；另一方面，仅通过参数传递进行通信的两个模块耦合度较低。</p><p>理想情况下，一个模块应该具有较高的内聚度和较低的耦合度，这样的模块更易于理解、重用和扩展。</p><h3 id="Stateful-modules-有状态的模块"><a href="#Stateful-modules-有状态的模块" class="headerlink" title="Stateful modules(有状态的模块)"></a>Stateful modules(有状态的模块)</h3><p>在 <code>JavaScript</code> 中，将接口与实现分离的例子很少。 然而，通过使用 <code>Node.js</code> 模块系统，我们引入了一个特定的模块，接口不会受到其它模块的影响。在正常情况下，这没有什么问题，但是如果我们使用 <code>require()</code> 来加载一个导出有状态实例的模块，比如数据库交互对象，<code>HTTP</code> 服务器实例，乃至普通的任何对象这不是无状态的，我们实际上是在引用的模块都是一个又一个的单例，因此模块系统有着单例模式的优点和缺点，此外，也有一些不同的地方。</p><h4 id="The-Singleton-pattern-in-Node-js-Node-js-中的单例模式"><a href="#The-Singleton-pattern-in-Node-js-Node-js-中的单例模式" class="headerlink" title="The Singleton pattern in Node.js(Node.js 中的单例模式)"></a>The Singleton pattern in Node.js(Node.js 中的单例模式)</h4><p>在 <code>Node.js</code> 中其实单例很简单，在 <code>export</code> 的过程中就完成了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//'db.js' module</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> Database(<span class="string">'my-app-db'</span>)</span><br></pre></td></tr></table></figure><p>因为在第一次 <code>require</code> 之后就会把模块缓存下来，之后只会返回缓存的实例。但是这不是一定是单例的，有可能有多个包都含有这个 <code>db</code> 依赖，那么就会有多个实例出来，例如这样的依赖结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app/</span><br><span class="line">   `-- node_modules</span><br><span class="line">       |-- packageA</span><br><span class="line">       |  `-- node_modules</span><br><span class="line">       |      `-- mydb</span><br><span class="line">       `-- packageB</span><br><span class="line">           `-- node_modules</span><br><span class="line">               `-- mydb</span><br></pre></td></tr></table></figure><p>这个时候可以赋予实例给全局变量来达到真正单例的效果(<strong>通常不这么做</strong>，这是比较危险的)。</p><h2 id="Patterns-for-wiring-modules-连接模块的模式"><a href="#Patterns-for-wiring-modules-连接模块的模式" class="headerlink" title="Patterns for wiring modules(连接模块的模式)"></a>Patterns for wiring modules(连接模块的模式)</h2><h3 id="Hardcoded-dependency-硬编码依赖"><a href="#Hardcoded-dependency-硬编码依赖" class="headerlink" title="Hardcoded dependency(硬编码依赖)"></a>Hardcoded dependency(硬编码依赖)</h3><p><img src="/assets/img/hardcoded_dependency.png" alt="Hardcoded denpendency"></p><p>从图中可以发现，硬编码依赖就是一层层依赖下来，从模块中直接导出有状态的实例，最原始的方案。</p><p>优点：管理起来非常直观，易于理解和调试，每个模块初始化和引入，都不会受到任何外部条件的干预。</p><p>缺点：限制将模块与其他实例关联的可能性，这使得在单元测试的过程中，其可重用性更低，测试难度更大。</p><h3 id="Dependency-injection-依赖注入"><a href="#Dependency-injection-依赖注入" class="headerlink" title="Dependency injection(依赖注入)"></a>Dependency injection(依赖注入)</h3><p>依赖注入模式背后的主要思想是由外部实体提供输入的组件的依赖关系。这样的实体可以是客户端组件或全局容器，它集中了系统所有模块的关联。这种方法的主要优点是解耦，特别是对于取决于有状态实例的模块。</p><p>可以使用工厂来创建有状态的实例，然后将实例注入组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="keyword">const</span> errorHandler = <span class="built_in">require</span>(<span class="string">'errorhandler'</span>)</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = (<span class="built_in">module</span>.exports = <span class="keyword">new</span> Express())</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dbFactory = <span class="built_in">require</span>(<span class="string">'./lib/db'</span>)</span><br><span class="line"><span class="keyword">const</span> authServiceFactory = <span class="built_in">require</span>(<span class="string">'./lib/authService'</span>)</span><br><span class="line"><span class="keyword">const</span> authControllerFactory = <span class="built_in">require</span>(<span class="string">'./lib/authController'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = dbFactory(<span class="string">'example-db'</span>)</span><br><span class="line"><span class="keyword">const</span> authService = authServiceFactory(db, <span class="string">'SHHH!'</span>)</span><br><span class="line"><span class="keyword">const</span> authController = authControllerFactory(authService)</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/login'</span>, authController.login)</span><br><span class="line">app.get(<span class="string">'/checkToken'</span>, authController.checkToken)</span><br><span class="line"></span><br><span class="line">app.use(errorHandler())</span><br><span class="line">http.createServer(app).listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Express server started'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当然还有其他注入的方式，比如构造函数注入和属性注入。</p><p>构造函数注入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> service = <span class="keyword">new</span> Service(dependencyA, dependencyB)</span><br></pre></td></tr></table></figure><p>属性注入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> service = <span class="keyword">new</span> Service()</span><br><span class="line">service.dependencyA = anInstanceOfDependencyA</span><br></pre></td></tr></table></figure><blockquote><p>注意属性注入会导致实例的不一致状态，创建时的初始状态和设置依赖后的状态。但是当存在依赖循环时就很有用了，比如有两个组件 <code>A</code> 和 <code>B</code>，它们都使用工厂或构造函数注入，并且都相互依赖，我们不能实例化它们中的任何一个，因为两者都需要另一个存在才能被创建。</p></blockquote><p>举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Afactory</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    foo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      b.say()</span><br><span class="line">    &#125;,</span><br><span class="line">    what: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Hello!'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bfactory</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    a: a,</span><br><span class="line">    say: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'I say: '</span> + a.what)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里先创建一个不完整的B，再使用这个b实例创建A的实例，最后再反过来设置b的依赖</span></span><br><span class="line"><span class="keyword">const</span> b = Bfactory(<span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> a = Afactory(b)</span><br><span class="line">a.b = b</span><br></pre></td></tr></table></figure><blockquote><p>依赖倒置通常还会提到 <code>DIP</code>(Dependency Inversion Principle，依赖倒置原则) 和 <code>IoC</code>(Inversion of Control，控制反转)。依赖倒置就是原来都是高层组件依赖底层组件，针对不同的底层组件实现不同的接口，倒置就是定义好高层组件的接口，而让底层组件去实现接口，这样当新加了底层组件的时候就不用修改高层组件的代码了。控制反转一种重要的方式，就是将依赖对象的创建和绑定转移到被依赖对象类的外部来实现，就像上面的代码一样 <code>authService</code> 需要依赖 <code>db</code> 那么这个建立依赖的过程却交给 <code>authController</code> 来处理了，这样能很好地将 <code>Service</code> 与 <code>DB</code> 解耦。</p></blockquote><h3 id="Service-locator-服务定位器"><a href="#Service-locator-服务定位器" class="headerlink" title="Service locator(服务定位器)"></a>Service locator(服务定位器)</h3><p>服务定位器核心原则是拥有一个中央注册中心，以便管理系统组件，并在模块需要加载依赖时作为中介，但是要求连接的是使用依赖注入的模块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> dependencies = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> factories = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> serviceLocator = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  serviceLocator.factory = <span class="function">(<span class="params">name, factory</span>) =&gt;</span> &#123;</span><br><span class="line">    factories[name] = factory</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  serviceLocator.register = <span class="function">(<span class="params">name, instance</span>) =&gt;</span> &#123;</span><br><span class="line">    dependencies[name] = instance</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  serviceLocator.get = <span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!dependencies[name]) &#123;</span><br><span class="line">      <span class="keyword">const</span> factory = factories[name]</span><br><span class="line">      dependencies[name] = factory &amp;&amp; factory(serviceLocator)</span><br><span class="line">      <span class="keyword">if</span> (!dependencies[name]) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Cannot find module: '</span> + name)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dependencies[name]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> serviceLocator</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">const</span> svcLoc = <span class="built_in">require</span>(<span class="string">'./lib/serviceLocator'</span>)()</span><br><span class="line"></span><br><span class="line">svcLoc.register(<span class="string">'dbName'</span>, <span class="string">'example-db'</span>)</span><br><span class="line">svcLoc.factory(<span class="string">'db'</span>, <span class="built_in">require</span>(<span class="string">'./lib/db'</span>))</span><br><span class="line">svcLoc.factory(<span class="string">'authService'</span>, <span class="built_in">require</span>(<span class="string">'./lib/authService'</span>))</span><br><span class="line">svcLoc.factory(<span class="string">'authController'</span>, <span class="built_in">require</span>(<span class="string">'./lib/authController'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> authController = svcLoc.get(<span class="string">'authController'</span>)</span><br></pre></td></tr></table></figure><p>想要更换依赖只需要更改注册的实例或者工厂函数即可，之后便可通过 <code>get(name)</code> 来获得定制好的对应实例。这里还可以将这些参数写成配置，那么就可以不动代码只改写配置就能完成依赖的替换了。</p><p>服务定位器惰性加载模块。每个实例仅在需要时创建。还有另一个重要的含义：事实上，我们可以看到，每个依赖关系都是自动连接的，无需手动完成。好处是我们不必事先知道实例化和连接模块的正确顺序是什么 - 这一切都是自动和按需进行的。与简单的依赖注入模式相比，这更方便。</p><p>与依赖注入的区别：</p><ul><li>可重用性：依赖于服务定位器的组件不易重用，因为它要求系统中有一个服务定位器。</li><li>可读性：正如我们已经说过的，服务定位器混淆了组件的依赖性要求。</li></ul><h3 id="Dependency-injection-container-依赖注入容器"><a href="#Dependency-injection-container-依赖注入容器" class="headerlink" title="Dependency injection container(依赖注入容器)"></a>Dependency injection container(依赖注入容器)</h3><p>和服务定位器十分类似，只不过不用传递 <code>locator</code> 对象到模块中，而是通过某些手段(如参数名，导出模块的其他配置项)来声明所需要的依赖，之后便会自动注入。看一个具体例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里直接使用参数名声明所需要的依赖</span></span><br><span class="line"><span class="comment">//authService.js，声明需要一个db依赖和一个tokenSecret依赖</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">db, tokenSecret</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里也可以使用其他方法声明，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;&#125;</span><br><span class="line"><span class="built_in">module</span>.exports._inject = [<span class="string">'db'</span>, <span class="string">'tokenSecret'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;&#125;</span><br><span class="line"><span class="built_in">module</span>.exports._inject = [<span class="string">'db'</span>, <span class="string">'tokenSecret'</span>]</span><br></pre></td></tr></table></figure><p>接着就是我们的依赖注入容器了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fnArgs = <span class="built_in">require</span>(<span class="string">'parse-fn-args'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> dependencies = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> factories = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> diContainer = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  diContainer.factory = <span class="function">(<span class="params">name, factory</span>) =&gt;</span> &#123;</span><br><span class="line">    factories[name] = factory</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  diContainer.register = <span class="function">(<span class="params">name, dep</span>) =&gt;</span> &#123;</span><br><span class="line">    dependencies[name] = dep</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  diContainer.get = <span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!dependencies[name]) &#123;</span><br><span class="line">      <span class="keyword">const</span> factory = factories[name]</span><br><span class="line">      dependencies[name] = factory &amp;&amp; diContainer.inject(factory)</span><br><span class="line">      <span class="keyword">if</span> (!dependencies[name]) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Cannot find module: '</span> + name)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dependencies[name]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  diContainer.inject = <span class="function"><span class="params">factory</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> args = fnArgs(factory).map(<span class="function"><span class="keyword">function</span>(<span class="params">dependency</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> diContainer.get(dependency)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> factory.apply(<span class="literal">null</span>, args)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> diContainer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">const</span> Express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="keyword">const</span> errorHandler = <span class="built_in">require</span>(<span class="string">'errorhandler'</span>)</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = (<span class="built_in">module</span>.exports = <span class="keyword">new</span> Express())</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> diContainer = <span class="built_in">require</span>(<span class="string">'./lib/diContainer'</span>)()</span><br><span class="line"></span><br><span class="line">diContainer.register(<span class="string">'dbName'</span>, <span class="string">'example-db'</span>)</span><br><span class="line">diContainer.register(<span class="string">'tokenSecret'</span>, <span class="string">'SHHH!'</span>)</span><br><span class="line">diContainer.factory(<span class="string">'db'</span>, <span class="built_in">require</span>(<span class="string">'./lib/db'</span>))</span><br><span class="line">diContainer.factory(<span class="string">'authService'</span>, <span class="built_in">require</span>(<span class="string">'./lib/authService'</span>))</span><br><span class="line">diContainer.factory(<span class="string">'authController'</span>, <span class="built_in">require</span>(<span class="string">'./lib/authController'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> authController = diContainer.get(<span class="string">'authController'</span>)</span><br></pre></td></tr></table></figure><p>和服务定位器不同的就是创建实例的地方，不是直接调用工厂函数，而是通过 <code>inject</code> 来自动获取某个模块所需要的依赖，并自动创建出依赖实例，然后将这些实例作为参数传递个这个模块的工厂函数。拿 <code>authService</code> 来说，取到 <code>authService</code> 的工厂函数的参数列表 <code>[db, tokenSecret]</code>，然后就去取对应的这两个的实例，<code>db</code> 的实例取到 <code>example-db</code> 的数据块实例，<code>tokenSecret</code> 就直接取到了 <code>SHHH!</code>，然后再把取到的数据库实例和 <code>SHHH!</code> 作为参数传递给 <code>authService</code> 的工厂函数从而构造出 <code>authService</code> 的实例。</p><blockquote><p>具体是使用 <strong>服务定位器</strong> 还是 <strong>依赖注入容器</strong> 就取决于你自己了，只是使用的方式不一样而已，都是用来实现控制反转的且都是基于模块本身是依赖注入的。</p></blockquote><h2 id="Wiring-plugins-连接插件"><a href="#Wiring-plugins-连接插件" class="headerlink" title="Wiring plugins(连接插件)"></a>Wiring plugins(连接插件)</h2><p>软件工程的架构都希望拥有一个最小功能，其他的功能通过插件来补充。但是会因为时间、资源、复杂度上的限制使得没有那么容易达成这个目标。尽管如此我们还是希望通过插件来扩展系统，我们关注两个问题：</p><ul><li>将应用程序服务暴露给插件</li><li>将插件集成到应用程序中</li></ul><h3 id="Plugins-as-packages-包装插件成包"><a href="#Plugins-as-packages-包装插件成包" class="headerlink" title="Plugins as packages(包装插件成包)"></a>Plugins as packages(包装插件成包)</h3><p>通常来说插件会作为包安装到 <code>node_modules</code> 目录中。这样做有两个好处，首先，我们可以利用 npm 的功能来分发插件并管理它的依赖关系。其次，一个包可以有自己的私有依赖关系图，这样可以减少依赖关系之间发生冲突和不兼容的可能性，而不是让插件使用父项目的依赖关系。</p><p>有些插件是有状态的，因为插件有时候也需要用到父项目的一些服务。</p><h3 id="Extension-points-扩展点"><a href="#Extension-points-扩展点" class="headerlink" title="Extension points(扩展点)"></a>Extension points(扩展点)</h3><p>有很多种方法可以是的我们程序变得可扩展，例如代理模式、装饰者模式，而重要的是找到扩展点。</p><h3 id="Plugin-controlled-vs-application-controlled-extension-插件控制扩展-vs-应用控制扩展"><a href="#Plugin-controlled-vs-application-controlled-extension-插件控制扩展-vs-应用控制扩展" class="headerlink" title="Plugin-controlled vs application-controlled extension(插件控制扩展 vs 应用控制扩展)"></a>Plugin-controlled vs application-controlled extension(插件控制扩展 vs 应用控制扩展)</h3><p>主要有两种方式去扩展一个应用的组件：</p><ul><li>直接扩展</li><li>通过 <code>IoC</code>(控制反转) 扩展</li></ul><p><img src="/assets/img/extension_points.png" alt="Extension points"></p><p>可以看到直接扩展就是一个特定组件直接控制基础设施，而第二种就是基础设施通过加载、安装、执行特定组件来完成控制扩展。</p><p>将这两种方法应用到插件就是 “插件控制扩展” 和 “应用控制扩展”了。</p><p>插件控制扩展例子，插件接收应用作为参数，然后对扩展点进行扩展：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//in the application</span></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'thePlugin'</span>)(app)</span><br><span class="line"><span class="comment">//in the plugin</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">plugin</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.get(<span class="string">'/newRoute'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;...&#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>应用控制扩展例子，是直接在应用中使用 <code>plugin</code> 来扩展：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//in the application</span></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> plugin = <span class="built_in">require</span>(<span class="string">'thePlugin'</span>)()</span><br><span class="line">app[plugin.method](plugin.route, plugin.handler)</span><br><span class="line"><span class="comment">//in the plugin</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">plugin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    method: <span class="string">'get'</span>,</span><br><span class="line">    route: <span class="string">'/newRoute'</span>,</span><br><span class="line">    handler: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种方式的不同：</p><ul><li><p>插件控制扩展更加强大和灵活，因为插件能获取到应用内部的内容，如果插件原来就是应用的一部分那么也是很容易抽离出插件的，不用更改多少的代码。但是这种方式可能有更多的不利，实际上，应用中的任何改动很容就间接影响到插件，使得插件得不断地更新。</p></li><li><p>插件控制扩展没啥要求，而应用控制扩展则需要插件具有一个基础结构(上面类似于 <code>method</code>,<code>route</code>,<code>handler</code>这些东西)。</p></li><li><p>插件控制扩展必须得共享应用实例，否则就做不到扩展。而应用控制扩展可能只需要共享应用的一部分服务。</p></li></ul><h3 id="Implementing-a-logout-plugin-实现一个日志插件"><a href="#Implementing-a-logout-plugin-实现一个日志插件" class="headerlink" title="Implementing a logout plugin(实现一个日志插件)"></a>Implementing a logout plugin(实现一个日志插件)</h3><h4 id="Exposing-services-using-a-service-locator-使用服务定位器暴露服务"><a href="#Exposing-services-using-a-service-locator-使用服务定位器暴露服务" class="headerlink" title="Exposing services using a service locator(使用服务定位器暴露服务)"></a>Exposing services using a service locator(使用服务定位器暴露服务)</h4><p>这就是使用插件控制扩展的实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//plugin-logou/index.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">serviceLocator</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> authSerive = serviceLocator.get(<span class="string">'authService'</span>)</span><br><span class="line">  <span class="keyword">const</span> db = serviceLocator.get(<span class="string">'db'</span>)</span><br><span class="line">  <span class="keyword">const</span> app = serviceLocator.get(<span class="string">'app'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> tokensDb = db.sublevel(<span class="string">'tokens'</span>)</span><br><span class="line">  <span class="keyword">const</span> oldLogin = authService.login</span><br><span class="line">  authService.login = <span class="function">(<span class="params">username, password, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//...same as in the previous version</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> oldCheckToken = authService.checkToken</span><br><span class="line">  authService.checkToken = <span class="function">(<span class="params">token, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//...same as in the previous version</span></span><br><span class="line">  &#125;</span><br><span class="line">  authService.logout = <span class="function">(<span class="params">token, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//...same as in the previous version</span></span><br><span class="line">  &#125;</span><br><span class="line">  app.get(<span class="string">'/logout'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="comment">//...same as in the previous version</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">const svcLoc = require('./lib/serviceLocator')()</span></span><br><span class="line"><span class="comment">svcLoc.register(...)</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line">svcLoc.register(<span class="string">'app'</span>, app)</span><br><span class="line"><span class="keyword">const</span> plugin = <span class="built_in">require</span>(<span class="string">'plugin-logout'</span>)</span><br><span class="line">plugin(svcLoc)</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>过程：注册 <code>app</code> 本身到服务定位器，因为插件可能需要用到 <code>app</code> 中的某些服务；引入插件；调用插件的主函数，服务定位器作为参数。</p><h4 id="Exposing-services-using-DI-container-使用依赖注入容器暴露服务"><a href="#Exposing-services-using-DI-container-使用依赖注入容器暴露服务" class="headerlink" title="Exposing services using DI container(使用依赖注入容器暴露服务)"></a>Exposing services using DI container(使用依赖注入容器暴露服务)</h4><p>这就是使用应用控制扩展的实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//plugin-logout/index.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">app, authSercice, db</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> tokensDb = db.sublevel(<span class="string">'tokens'</span>)</span><br><span class="line">  <span class="keyword">const</span> oldLogin = authService.login</span><br><span class="line">  authService.login = <span class="function">(<span class="params">username, password, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//...same as in the previous version</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> oldCheckToken = authService.checkToken</span><br><span class="line">  authService.checkToken = <span class="function">(<span class="params">token, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//...same as in the previous version</span></span><br><span class="line">  &#125;</span><br><span class="line">  authService.logout = <span class="function">(<span class="params">token, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//...same as in the previous version</span></span><br><span class="line">  &#125;</span><br><span class="line">  app.get(<span class="string">'/logout'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="comment">//...same as in the previous version</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> diContainer = <span class="built_in">require</span>(<span class="string">'./lib/diContainer'</span>)(); diContainer.register(...);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">//initialize the plugin</span></span><br><span class="line">diContainer.inject(<span class="built_in">require</span>(<span class="string">'plugin-logout'</span>))</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>这种情况下，可能插件在暗地里会使用各种各样的服务，存在潜在的危险，一个解决方案就是创建一个单独的依赖注入容器，一种只注册我们想要暴露的服务，这样我们就能控制插件所能看到的主应用的东西。这也解释了依赖注入容器可以很好地实现封装和信息隐藏。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Wiring-Modules-连接模块&quot;&gt;&lt;a href=&quot;#Wiring-Modules-连接模块&quot; class=&quot;headerlink&quot; title=&quot;Wiring Modules(连接模块)&quot;&gt;&lt;/a&gt;Wiring Modules(连接模块)&lt;/h1&gt;&lt;p&gt;对模块常见的一个问题就是：将组件 X 的实例传递到模块 Y 的最佳方式是什么？&lt;/p&gt;
&lt;p&gt;常见的模式有一下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬编码依赖&lt;/li&gt;
&lt;li&gt;依赖注入&lt;/li&gt;
&lt;li&gt;服务定位器&lt;/li&gt;
&lt;li&gt;依赖注入容器&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://1016990109.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>前端基础之网络</title>
    <link href="http://1016990109.github.io/2018/07/19/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%BD%91%E7%BB%9C/"/>
    <id>http://1016990109.github.io/2018/07/19/前端基础之网络/</id>
    <published>2018-07-19T08:20:00.000Z</published>
    <updated>2018-08-30T09:16:06.988Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h2><p><img src="/assets/img/network_model.png" alt="Network Model"></p><ul><li><code>TCP/IP</code> 四层模型</li></ul><p>应用层、运输层、网际层和网络接口层。从实质上讲，只有上边三层，网络接口层没有什么具体的内容。<code>HTTP</code> 对应应用层。</p><ul><li><code>OSI</code> 七层模型</li></ul><p>应用层（<code>Application</code>）、表示层（<code>Presentation</code>）、会话层（<code>Session</code>）、传输层（<code>Transport</code>）、网络层（<code>Network</code>）、数据链路层（<code>Data Link</code>）、物理层（<code>Physical</code>）。<code>HTTP</code> 也是对应应用层。</p><ul><li>五层模型</li></ul><p>应用层、运输层、网络层、数据链路层和物理层。</p><a id="more"></a><h2 id="强缓存与协商缓存"><a href="#强缓存与协商缓存" class="headerlink" title="强缓存与协商缓存"></a>强缓存与协商缓存</h2><h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><p>1.<code>Expires</code>：<br>服务器返回的一个时间，在这个时间之前都使用缓存，不发送 <code>http</code> 请求。</p><p>例如：<code>Expires: Thu, 10 Dec 2015 23:21:37 GMT</code></p><p><strong>缺点</strong>：服务器的时间和客户端不同会出现问题，老版本 <code>http 1.0</code> 中才使用，现在一般使用 <code>Cache-Contorl</code>。</p><p>2.<code>Cache-Control</code>(优先级高)：<br>声明一个相对的秒数，表示从现在起一段时间内缓存都有效，也不会发送 <code>http</code> 请求。</p><p>例如：<code>Cache-Control: max-age=3600</code></p><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>1.<code>Last-Modified</code> / <code>If-Modified-Since</code>:<br>第一次请求一个资源时，服务器返回 <code>Last-Modified</code>(例如：<code>Last-Modified: Mon, 30 Nov 2015 23:21:37 GMT</code>)，下一次请求是客户端带上 <code>If-Modified-Since</code> 的 <code>header</code>。</p><p>例如 <code>If-Modified-Since: Mon, 30 Nov 2015 23:21:37 GMT</code>，如果资源没改变则返回 <code>304</code> 状态码。</p><p><strong>缺点</strong>：服务器可能频繁修改文件（<code>ms</code>级），而 <code>Last-Modified</code> 只能精确到秒，可能返回错误的状态码(已经变动却返回相同的时间)；服务器修改了文件但是内容没变化，只是修改时间变了，这个时候其实是不用更新缓存的，故而 <code>ETag</code> 更好。</p><p>2.<code>ETag</code> / <code>If-None-Match</code>(优先级高):<br>用一个 <code>ETag</code> 标记服务器的文件(可以用 <code>hash</code> 之类的算法计算)，如果 <code>ETag</code> 没变则服务器返回 <code>304</code> 状态码。</p><p>例如：服务器返回：<code>ETag: &quot;d41d8cd98f00b204e9800998ecf8427e&quot;</code>；客户端发送：<code>If-None-Match: W/&quot;d41d8cd98f00b204e9800998ecf8427e&quot;</code></p><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h3 id="三次握手建立连接"><a href="#三次握手建立连接" class="headerlink" title="三次握手建立连接"></a>三次握手建立连接</h3><p><img src="/assets/img/tcp_connect.png" alt="TCP connect"></p><ol><li>客户端请求建立 <code>TCP</code> 连接，标记 <code>SYN</code>(Synchronize Sequence Numbers，同步序列号) 为 <code>1</code>，并发送客户端的序列号 <code>x</code>，即 <code>SYN=1;seq=x</code>。发送完毕后，客户端进入 <code>SYN_SEND</code> 状态。</li><li>服务器收到后，标记 <code>ACK</code>(Acknowledgement) 为 <code>1</code>，返回一个确认码 <code>ack</code>，值为客户端序列号加 <code>1</code>，并发送自己的同步序列号 <code>y</code> 给客户端，即 <code>SYN=1;seq=y;ACK=1;ack=x+1</code>。发送完毕后，服务器端进入 <code>SYN_RCVD</code> 状态，一段时间后没收到回复，自动尝试 5 次重新发送确认报文，每次时间间隔指数递增(1s,2s,4s,8s,16s)，第 5 次后等待 31s 后(总共 63s)才能断开连接。</li><li>客户端收到后需要告知服务器它收到了，同样发送确认码和序列号，即 <code>SYN=1;ACK=1;ack=y+1;seq=x+1</code>。发送完毕后，客户端进入 <code>ESTABLISHED</code> 状态，当服务器端接收到这个包时，也进入 <code>ESTABLISHED</code> 状态，TCP 握手结束。</li></ol><blockquote><p>注意：客户端发送每次 <code>TCP</code> 报文时 <code>seq</code> 都会递增 <code>1</code>，便于收到报文后确认报文发送的先后顺序。第三次握手不需要发送 <code>SYN=1</code> 信号，因为不是初始建立连接状态，如果标记为 <code>1</code> 那么服务器又会认为是建立一个新连接了。</p></blockquote><h3 id="四次握手关闭连接-以客户端发起关闭为例"><a href="#四次握手关闭连接-以客户端发起关闭为例" class="headerlink" title="四次握手关闭连接(以客户端发起关闭为例)"></a>四次握手关闭连接(以客户端发起关闭为例)</h3><p><img src="/assets/img/tcp_finish.png" alt="TCP finis"></p><ol><li>客户端请求关闭连接，标记 <code>FIN</code>(finish) 标记为 <code>1</code>，带上序列号 <code>u</code>，这个时候客户端还可以接收数据但是不再发送数据了。</li><li>服务器收到请求后标记 <code>ACK</code> 为 <code>1</code>，返回确认码 <code>u+1</code>，告诉客户端它收到了，服务器开始关闭连接（发送剩余数据等等操作）。</li><li>服务器等待关闭后(需要把没发完的发完)，向客户端发起关闭请求，标记 <code>FIN</code> 为 <code>1</code>，序列号为 <code>w</code>，这个时候服务器也不发送数据了。</li><li>客户端收到确认后，知道服务器关闭了，那么自己也不再接受数据了，标记 <code>ACK</code> 为 <code>1</code>，发送确认码 <code>w+1</code>，进入等待阶段，等待 <code>2MSL</code>(Maximum Segment Lifetime，最大报文生存周期)，保证服务器收到确认并已关闭了，客户端才可以放心关闭，如果继续收到服务器的数据，说明确认码未收到，需要再次向服务器发送，这就是等待 <code>2MSL</code> 的原因。</li></ol><blockquote><p>需要四次握手的原因，建立连接时服务器返回确认码时可以同时传输序列号 <code>SYN</code>，但是关闭连接时服务器可能还有剩余数据需要发送，所以先回复一个 <code>ACK</code> 告诉客户端它知道该关闭了只是需要做一些收尾，等到收尾工作做完（发送完剩余数据），再告诉客户端可以关闭了。</p></blockquote><h3 id="SYN-攻击"><a href="#SYN-攻击" class="headerlink" title="SYN 攻击"></a>SYN 攻击</h3><p>在三次握手过程中，服务器发送 <code>SYN-ACK</code> 之后，收到客户端的 <code>ACK</code> 之前的 <code>TCP</code> 连接称为半连接(<code>half-open connect</code>)。此时服务器处于 <code>SYN_RCVD</code> 状态。当收到 <code>ACK</code> 后，服务器才能转入 <code>ESTABLISHED</code> 状态.</p><p><code>SYN</code> 攻击指的是，攻击客户端在短时间内伪造大量不存在的 <code>IP</code> 地址，向服务器不断地发送 <code>SYN</code> 包，服务器回复确认包，并等待客户的确认。由于源地址是不存在的，服务器需要不断的重发直至超时，这些伪造的 <code>SYN</code> 包将长时间占用未连接队列，正常的 <code>SYN</code> 请求被丢弃，导致目标系统运行缓慢，严重者会引起网络堵塞甚至系统瘫痪。</p><p><code>SYN</code> 攻击是一种典型的 <code>DoS/DDoS</code> 攻击。防御可以限制最大半连接数、网关过滤、缩短超时时间等等。</p><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><p>先来了解一下前提：</p><ol><li><code>TCP</code> 协议的两端分别为发送者 <code>A</code> 和接收者 <code>B</code>，由于是全双工协议，因此 <code>A</code> 和 <code>B</code> 应该分别维护着一个独立的发送缓冲区和接收缓冲区，由于对等性（<code>A</code> 发 <code>B</code> 收和 <code>B</code> 发 <code>A</code> 收），我们以 <code>A</code> 发送 <code>B</code> 接收的情况作为例子；</li><li>发送窗口是发送缓存中的一部分，是可以被 <code>TCP</code> 协议发送的那部分，其实应用层需要发送的所有数据都被放进了发送者的发送缓冲区；</li><li>发送窗口中相关的有四个概念：已发送并收到确认的数据（不再发送窗口和发送缓冲区之内）、已发送但未收到确认的数据（位于发送窗口之中）、允许发送但尚未发送的数据以及发送窗口外发送缓冲区内暂时不允许发送的数据。</li></ol><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p><code>TCP</code> 建立的开始，<code>B</code> 会告诉 <code>A</code> 自己的接受窗口大小，比如 <code>20</code>。</p><p><code>A</code> 发送 <code>11</code> 个字节后，发送窗口位置不变，<code>B</code> 接收到了乱序的数据分组：</p><p><img src="/assets/img/tcp_slide1.png" alt="TCP Slide 1"></p><p>只有当 <code>A</code> 成功发送了数据，即发送的数据得到了 <code>B</code> 的确认之后，才会移动滑动窗口离开已发送的数据；同时 <code>B</code> 则确认连续的数据分组，对于乱序的分组则先接收下来，避免网络重复传递：</p><p><img src="/assets/img/tcp_slide2.png" alt="TCP Slide 2"></p><h4 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h4><p>流量控制方面主要有两个要点需要掌握。一是 <code>TCP</code> 利用滑动窗口实现流量控制的机制；二是如何考虑流量控制中的传输效率。</p><p>1.流量控制</p><p>所谓流量控制，主要是接收方传递信息给发送方，使其不要发送数据太快，是一种端到端的控制。主要的方式就是返回的 <code>ACK</code> 中会包含自己的接收窗口的大小，并且利用大小来控制发送方的数据发送。</p><p>这里面涉及到一种情况，如果 <code>B</code> 已经告诉 <code>A</code> 自己的缓冲区已满，于是 <code>A</code> 停止发送数据；等待一段时间后，<code>B</code> 的缓冲区出现了富余，于是给 <code>A</code> 发送报文告诉 <code>A</code> 我的 <code>rwnd</code> 大小为 400，但是这个报文不幸丢失了，于是就出现 <code>A</code> 等待 <code>B</code> 的通知||<code>B</code> 等待 <code>A</code> 发送数据的死锁状态。为了处理这种问题，<code>TCP</code> 引入了持续计时器（<code>Persistence timer</code>），当 <code>A</code> 收到对方的零窗口通知时，就启用该计时器，时间到则发送一个 1 字节的探测报文，对方会在此时回应自身的接收窗口大小，如果结果仍未 0，则重设持续计时器，继续等待。</p><p>2.传递效率</p><p>单个发送字节单个确认，窗口有一个空余就通知对方，这未免也太浪费性能了，所以确认一般是批量确认一部分连续的，而窗口要等到空余较多的时候才通知对方发送。</p><ul><li>对于单发字节确认问题：</li></ul><p>使用 <code>Nagle</code> 算法：</p><p>a.要发送一段数据时候，先发送第一个数据字节，后面的数据先缓存。<br>b.等到收到确认后了解接收方的可接收窗口大小，再根据这个大小组织数据发送出去。<br>c.等到发送的数据有一半收到确认回复或者达到报文最大长度时，发送一个报文段。</p><ul><li>对于窗口空余问题：</li></ul><p>让接收方等待一段时间，或者接收方获得足够的空间容纳一个报文段或者等到接受缓存有一半空闲的时候，再通知发送方发送数据。</p><h4 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h4><p>拥塞控制就是防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。常用的方法就是：</p><p>1.慢开始、拥塞控制：</p><p>通过图我们来一步步解释：</p><p><img src="/assets/img/tcp_slow_start.png" alt="TCP Slow Start"></p><ul><li>发送方维持一个“拥塞窗口”(<code>cwnd</code>,congestion window)的变量，与发送方的允许窗口大小(<code>rwnd</code>,receiver window)共同决定发送窗口大小，显然 <code>cwnd</code> 是不能超过 <code>rwnd</code> 的。</li><li>当开始发送数据时，避免一下子将大量字节注入到网络，造成或者增加拥塞，选择发送一个 1 字节的试探报文，收到确认后尝试发送 2 字节，收到确认再发 4 字节，等等，以此类推，以 2 的指数级增长。</li><li>最后回达到一个门限(<code>ssthresh</code>)，规则如下：<br><code>cwnd</code> &lt; <code>ssthresh</code>:继续 2 的指数增长。<br><code>cwnd</code> &gt;= <code>ssthresh</code>:拥塞避免方法，每次窗口大小只增加 1，而不是 2 的指数级增长。</li><li><p><strong>当出现拥塞时</strong>，比如丢包，也就是可能这个门限(<code>ssthresh</code>)可能设置过大了，那么把门限减少为原来的一般(<code>ssthresh/2</code>)，同时 <code>cwnd</code> 设为 1，重新开始指数级增长(慢开始)。</p><p>2.快重传、快恢复：</p></li></ul><p><img src="/assets/img/tcp_fast_start.png" alt="TCP Fast Restore"></p><ul><li>接收方建立这样的机制，如果一个包丢失，则对后续的包继续发送针对该包的重传请求。</li><li>一旦发送方接收到三个一样的确认，就知道该包之后出现了错误，立刻重传该包。</li><li>此时发送方开始执行“快恢复”算法：<br>门限设为一半，<code>cwnd</code> 直接从减少后的门限开始，即 <code>ssthresh/2</code>，之后每次收到确认递增 1 知道达到接收方的最大接收窗口大小(<code>rwnd</code>)。</li></ul><blockquote><p>这种方式能比较快的恢复传输，而不必要重新等待 <code>TCP</code> 的慢开始，现在 <code>TCP</code> 都是基于快重传的机制了，在 <code>TCP Tahoe</code> 版本是使用慢开始的，从 <code>TCP Reno</code> 版本开始使用快重传。</p></blockquote><h2 id="HTTP-80-端口-与-HTTPS-443-端口"><a href="#HTTP-80-端口-与-HTTPS-443-端口" class="headerlink" title="HTTP(80 端口) 与 HTTPS(443 端口)"></a>HTTP(80 端口) 与 HTTPS(443 端口)</h2><p><code>HTTPS</code> 是以安全为目标的 <code>HTTP</code> 通道，简单讲是 <code>HTTP</code> 的安全版，即 <code>HTTP</code> 下加入 <code>SSL</code>(<code>Secure Socekts Layer</code>) 层，<code>HTTPS</code> 的安全基础是 <code>SSL</code>，因此加密的详细内容就需要 <code>SSL</code>。</p><p>客户端拿到公玥(放在证书里)，用公钥锁定一个随机值并将随机值传给服务器，服务器用私钥解密(这是使用非对称加密的，更浪费时间)，以后就用这个随机值来传递数据(使用随机值作为对称加密的秘钥加密数据，对称加密要比非对称加密快得多)。</p><blockquote><p>如何确认是真正的服务器的公钥？权威机构颁发证书，操作系统内置了权威机构的公钥(或者后面自行安装的 <strong>根证书</strong>)，权威机构使用它的秘钥加密服务器的公钥和其他一些信息生成 <strong>数字证书</strong>，并使用 <strong>数字签名</strong>的方式对这个下发的证书做校验。客户端确认确实是服务器的公钥之后再使用该公钥非对称加密一个用来后续加密传输数据所用的对称加密的秘钥。</p></blockquote><blockquote><p>缺点：<code>HTTPS</code> 使页面加载时间延长，增加数据开销，经济开销，连接缓存问题。</p></blockquote><blockquote><p>关于如何从 <code>HTTP</code> 升级到 <code>HTTPS</code> 可以查看 <a href="http://www.ruanyifeng.com/blog/2016/08/migrate-from-http-to-https.html" target="_blank" rel="noopener">阮一峰——HTTPS 升级指南</a>。</p></blockquote><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><ol><li><code>DOM</code> 同源策略：禁止对不同源页面 <code>DOM</code> 进行操作。这里主要场景是 <code>iframe</code> 跨域的情况，不同域名的 <code>iframe</code> 是限制互相访问的。</li><li><code>XMLHttpRequest</code> 同源策略：禁止使用 <code>XHR</code> 对象向不同源的服务器地址发起 <code>HTTP</code> 请求。</li></ol><blockquote><p>只要协议、域名、端口有任何一个不同，都被当作是不同的域，之间的请求就是跨域操作。</p></blockquote><h3 id="为什么要有跨域限制"><a href="#为什么要有跨域限制" class="headerlink" title="为什么要有跨域限制"></a>为什么要有跨域限制</h3><p><code>AJAX</code> 同源策略主要用来防止 <code>CSRF</code> 攻击。如果没有 <code>AJAX</code> 同源策略，相当危险，我们发起的每一次 <code>HTTP</code> 请求都会带上请求地址对应的 <code>cookie</code>，恶意网站模拟这个请求(拿到了用户登录过网站的 <code>cookie</code>)后就可以做一些坏事情了。</p><blockquote><p><code>CSRF</code>(<code>Cross-site request forgery</code>) 跨站请求伪造：跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并执行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去执行。这利用了 <code>web</code> 中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。</p></blockquote><h3 id="跨域解决方式"><a href="#跨域解决方式" class="headerlink" title="跨域解决方式"></a>跨域解决方式</h3><h4 id="跨域资源共享-CORS-cross-origin-resource-sharing"><a href="#跨域资源共享-CORS-cross-origin-resource-sharing" class="headerlink" title="跨域资源共享 CORS(cross origin resource sharing)"></a>跨域资源共享 CORS(cross origin resource sharing)</h4><p><code>CORS</code> 需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，<code>IE</code> 浏览器不能低于 <code>IE10</code>。</p><p>实现 <code>CORS</code> 通信的关键是服务器。只要服务器实现了 <code>CORS</code> 接口，就可以跨源通信。</p><h5 id="两种请求"><a href="#两种请求" class="headerlink" title="两种请求"></a>两种请求</h5><p>浏览器将 <code>CORS</code> 请求分成两类：简单请求（<code>simple request</code>）和非简单请求（<code>not-so-simple request</code>）。<br>只要同时满足以下两大条件，就属于简单请求。</p><ol><li>请求方法是以下三种方法之一：<code>HEAD</code>，<code>GET</code>，<code>POST</code>。</li><li><code>HTTP</code> 的头信息不超出以下几种字段：<code>Accept</code>，<code>Accept-Language</code>，<code>Content-Language</code>，<code>Last-Event-ID</code>，<code>Content-Type</code>(只限于三个值 <code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code>)。</li></ol><h5 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h5><p>对于简单请求，浏览器直接发出 <code>CORS</code> 请求。具体来说，就是在头信息之中，增加一个 <code>Origin</code> 字段。</p><p>如果 <code>Origin</code> 指定的源，不在许可范围内，服务器会返回一个正常的 <code>HTTP</code> 回应。浏览器发现，这个回应的头信息没有包含 <code>Access-Control-Allow-Origin</code> 字段（详见下文），就知道出错了，从而抛出一个错误，被 <code>XMLHttpRequest</code> 的 <code>onerror</code> 回调函数捕获。注意，这种错误无法通过状态码识别，因为 <code>HTTP</code> 回应的状态码有可能是 <code>200</code>。</p><p>如果 <code>Origin</code> 指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。</p><ul><li><p><code>Access-Control-Allow-Origin</code><br>该字段是必须的。它的值要么是请求时 <code>Origin</code> 字段的值，要么是一个 <code>*</code>，表示接受任意域名的请求。</p></li><li><p><code>Access-Control-Allow-Credentials</code><br>该字段可选。它的值是一个布尔值，表示是否允许发送 <code>Cookie</code>。默认情况下，<code>Cookie</code> 不包括在 <code>CORS</code> 请求之中。设为 <code>true</code>，即表示服务器明确许可，<code>Cookie</code> 可以包含在请求中，一起发给服务器。这个值也只能设为 <code>true</code>，如果服务器不要浏览器发送 <code>Cookie</code>，删除该字段即可。</p></li><li><p><code>Access-Control-Expose-Headers</code><br>该字段可选。<code>CORS</code> 请求时，<code>XMLHttpRequest</code> 对象的 <code>getResponseHeader()</code> 方法只能拿到 6 个基本字段：<code>Cache-Control</code>、<code>Content-Language</code>、<code>Content-Type</code>、<code>Expires</code>、<code>Last-Modified</code>、<code>Pragma</code>。如果想拿到其他字段，就必须在 <code>Access-Control-Expose-Headers</code> 里面指定。</p></li></ul><blockquote><p><code>CORS</code> 请求默认不发送 <code>Cookie</code> 和 <code>HTTP</code> 认证信息。如果要把 <code>Cookie</code> 发到服务器，一方面要服务器同意，指定 <code>Access-Control-Allow-Credentials</code> 字段为 <code>true</code> 且 <code>Access-Control-Allow-Origin</code> 不能设为星号，同时在 <code>AJAX</code> 请求中打开 <code>withCredentials</code> 属性。</p></blockquote><h5 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h5><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是 <code>PUT</code> 或 <code>DELETE</code>，或者 <code>Content-Type</code> 字段的类型是 <code>application/json</code>。</p><p>非简单请求的 <code>CORS</code> 请求，会在正式通信之前，增加一次 <code>HTTP</code> 查询请求，称为”预检”请求（<code>preflight</code>）。</p><p>“预检”请求用的请求方法是 <code>OPTIONS</code>，表示这个请求是用来询问的。头信息里面，关键字段是 <code>Origin</code>，表示请求来自哪个源。</p><p>除了 <code>Origin</code> 字段，”预检”请求的头信息包括两个特殊字段。</p><ul><li><p><code>Access-Control-Request-Method</code><br>该字段是必须的，用来列出浏览器的 <code>CORS</code> 请求会用到哪些 <code>HTTP</code> 方法</p></li><li><p><code>Access-Control-Request-Headers</code><br>该字段是一个逗号分隔的字符串，指定浏览器 <code>CORS</code> 请求会额外发送的头信息字段</p></li></ul><p>“预检” 返回的结果除了 <code>Access-Control-Allow-Origin</code> 和 <code>Access-Control-Allow-Credentials</code> 与简单请求一样，还多两个字段：</p><p>1.<code>Access-Control-Allow-Methods</code>：该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次”预检”请求。 2.<code>Access-Control-Max-Age</code>：该字段可选，用来指定本次预检请求的有效期，单位为秒。例如 <code>1728000</code>，即允许缓存该条回应 1728000 秒（即 20 天），在此期间，不用发出另一条预检请求。</p><h4 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h4><p>动态添加一个 <code>&lt;script&gt;</code> 标签，而 <code>script</code> 标签的 <code>src</code> 属性是没有跨域的限制的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">jsonpCallback</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">            alert(result.msg);</span><br><span class="line">        &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/告诉服务器端的js代码这边的回调函数是jsonpCallback，下载的js文件会直接运行，运行回调函数把数据传回来</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">" src="</span>http:<span class="comment">//crossdomain.com/jsonServerResponse?jsonp=jsonpCallback"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>优点：它不像 <code>XMLHttpRequest</code> 对象实现的 <code>Ajax</code> 请求那样受到同源策略的限制；它的兼容性更好，在更加古老的浏览器中都可以运行，不需要 <code>XMLHttpRequest</code> 或 <code>ActiveX</code> 的支持；并且在请求完毕后可以通过调用 <code>callback</code> 的方式回传结果。</p><p>缺点：它只支持 <code>GET</code> 请求而不支持 <code>POST</code> 等其它类型的 <code>HTTP</code> 请求；它只支持跨域 <code>HTTP</code> 请求这种情况，不能解决不同域的两个页面之间如何进行 <code>JavaScript</code> 调用的问题。</p><h4 id="服务器代理"><a href="#服务器代理" class="headerlink" title="服务器代理"></a>服务器代理</h4><p>浏览器有跨域限制，但是服务器不存在跨域问题，所以可以由服务器请求所要域的资源再返回给客户端。</p><p>服务器代理是万能的。</p><h4 id="document-domain"><a href="#document-domain" class="headerlink" title="document.domain"></a>document.domain</h4><p>对于主域名相同，而子域名不同的情况，可以使用 <code>document.domain</code> 来跨域 这种方式非常适用于 <code>iframe</code> 跨域的情况，主域名指的是一级域名（如：<code>baidu.com</code>，<code>qq.com</code> 而不是 <code>www.baidu.com</code>之类的），跨域的时候需要两边都设置 <code>document.domain = ***</code>。</p><h4 id="window-name"><a href="#window-name" class="headerlink" title="window.name"></a>window.name</h4><p>页面如果设置了 <code>window.name</code>，那么在不关闭页面的情况下，即使进行了页面跳转 <code>location.href=...</code>，这个 <code>window.name</code> 还是会保留。</p><p>利用 <code>window.name</code> 的性质，我们可以在 <code>iframe</code> 中加载一个跨域页面。这个页面载入之后，让它设置自己的 <code>window.name</code>，然后再让它进行当前页面的跳转，跳转到与 <code>iframe</code> 外的页面同域的页面，此时 <code>window.name</code> 是不会改变的。这样，<code>iframe</code> 内外就属于同一个域了，且 <code>window.name</code> 还是跨域的页面所设置的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a页面的代码</span></span><br><span class="line">iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>)</span><br><span class="line">iframe.style.display = <span class="string">'none'</span></span><br><span class="line"><span class="keyword">var</span> state = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">iframe.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (state === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//第二次监听onload，说明iframe已经第二次跳转和当前域一样了，这时候可以取window.name的值了</span></span><br><span class="line">    <span class="keyword">var</span> data = iframe.contentWindow.name</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    iframe.contentWindow.document.write(<span class="string">''</span>)</span><br><span class="line">    iframe.contentWindow.close()</span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(iframe)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state === <span class="number">0</span>) &#123;</span><br><span class="line">    state = <span class="number">1</span></span><br><span class="line">    iframe.contentWindow.location = <span class="string">'http://m.zhuanzhuan.58.com:8887/b.html'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(iframe)</span><br><span class="line"></span><br><span class="line"><span class="comment">//b页面代码</span></span><br><span class="line"><span class="built_in">window</span>.name = <span class="string">'hello'</span></span><br></pre></td></tr></table></figure><h4 id="location-hash"><a href="#location-hash" class="headerlink" title="location.hash"></a>location.hash</h4><p>很少用，和 <code>window.name</code> 一样，因为子 <code>iframe</code> 有修改父框架的 <code>location.hash</code> 的权限，从而传递值，不过大小有限。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a页面代码仙童</span></span><br><span class="line"><span class="comment">//b页面</span></span><br><span class="line">parent.location.hash = <span class="string">'hello'</span></span><br></pre></td></tr></table></figure><h4 id="postMessage-实现页面间通信"><a href="#postMessage-实现页面间通信" class="headerlink" title="postMessage 实现页面间通信"></a>postMessage 实现页面间通信</h4><p>语法：<code>otherWindow.postMessage(message, targetOrigin, [transfer])</code></p><p>接收消息：<code>window.addEventListener(&quot;message&quot;, receiveMessage, false)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">receiveMessage</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//some code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果不是使用 <code>window.open()</code> 打开的页面或者 <code>iframe</code> 嵌入的页面，就跟当前页面扯不上任何关系，是无法使用 <code>window.postMessage()</code> 进行跨域通信的！</p></blockquote><blockquote><p><code>window.postMessage()</code> 中的 <code>window</code> 始终是你要通信的目标页面的 <code>window</code>，也就是 <code>PageA</code> 想法发送信息到 <code>PageB</code> 那么这个 <code>window</code> 就是 <code>PageB</code> 的 <code>window</code> 即 <code>iframe.contentWindow</code>，相反就是 <code>top</code> 或 <code>parent</code>。</p></blockquote><blockquote><p>一个很方便的回复消息的方式就是通过 <code>event.source</code> 来回复，<code>event.source</code> 就是发送消息的窗体。</p></blockquote><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><h3 id="XSS-Cross-site-Scripting，跨站脚本攻击"><a href="#XSS-Cross-site-Scripting，跨站脚本攻击" class="headerlink" title="XSS(Cross-site Scripting，跨站脚本攻击)"></a>XSS(Cross-site Scripting，跨站脚本攻击)</h3><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><ul><li><p>存储型 <code>XSS</code> 攻击<br>注入的攻击脚本永久存储在数据库，持久化。比如系统没有对用户的输入做过滤，可以插入一段自动发送网站 <code>cookie</code> 的脚本，当其他人打开包含这段信息的页面时就会自动获取隐私信息了，攻击的是多人。</p></li><li><p>反射型 <code>XSS</code> 攻击<br>非持久化的，需要欺骗用户自己去点击链接才能触发 <code>XSS</code> 代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。比如我们知道服务器会将搜索的关键词直接显示，我们就构造一个 <code>XSS</code> 的链接(<code>&lt;a href=&quot;http://xsstest.qq.com/search.php?q=%3Cscript src%3Dhttp%3A%2F%2Fhacker.qq.com%2Fhacker.js%3E%3C%2Fscript%3E&amp;commend=all&amp;ssid=s5-e&amp;search_type=item&amp;atype=&amp;filterFineness=&amp;rr=1&amp;pcat=food2011&amp;style=grid&amp;cat=&quot;&gt;点击就送998&lt;/a&gt;</code>)，这样就能将该用户的在该网站的 <code>cookie</code> 获取到了。这是针对单人的。</p></li><li><p>DOM 型 <code>XSS</code> 攻击<br>和反射性非常类似，不过是不需要经过服务器的，比如网站有个脚本是直接获取用户输入的 <code>url</code> 中的某个参数如 <code>content</code>，那么就可以伪造一个 <code>XSS</code> 的链接(<code>&lt;a href=&quot;http://example.com?content=&quot;%3Cscript src%3Dhttp%3A%2F%2Fhacker.qq.com%2Fhacker.js%3E%3C%2Fscript%3E&quot;&gt;</code>)从而完成 <code>XSS</code> 攻击，这种攻击也是单人的，只不过服务器设置的 <code>XSS</code> 防御就不起作用了，所以需要 <strong>前端同时防范</strong>。</p></li></ul><h4 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h4><p><code>XSS</code> 防御的总体思路是：对输入(和 <code>URL</code> 参数)进行过滤，对输出进行编码。这里推荐 <code>OWASP</code>。</p><ul><li><p><code>HttpOnly</code><br><code>Set-Cookie: =[; =][; expires=][; domain=][; path=][; secure][; HttpOnly]</code>，如果 <code>Cookie</code> 具有 <code>HttpOnly</code> 特性且不能通过客户端脚本访问，则为 <code>true</code>；否则为 <code>false</code>。默认值为 <code>false</code>。</p></li><li><p>过滤<br>对诸如<code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;a&gt;</code> 等标签进行过滤。</p></li><li><p>编码<br>像一些常见的符号，如 <code>&lt;</code>、<code>&gt;</code> 在输入的时候要对其进行转换编码。</p></li><li><p>限制<br><code>XSS</code> 攻击要能达成往往需要较长的字符串，因此对于一些可以预期的输入可以通过限制长度强制截断来进行防御。</p></li><li><p><code>CSP</code>(Content Security Policy 内容安全策略)<br><code>CSP</code> 的实质就是白名单制度，开发者明确告诉客户端，哪些外部资源可以加载和执行，等同于提供白名单。它的实现和执行全部由浏览器完成，开发者只需提供配置。<br>查看 <a href="https://github.com/joeyguo/blog/issues/5" target="_blank" rel="noopener">XSS 终结者-CSP 理论与实践</a></p></li></ul><h3 id="Click-Jacking-点击劫持"><a href="#Click-Jacking-点击劫持" class="headerlink" title="Click Jacking(点击劫持)"></a>Click Jacking(点击劫持)</h3><p>点击劫持就是利用透明的 <code>iframe</code> 或者被覆盖的 <code>iframe</code>，通过诱骗用户在该网页上点击某些按钮，触发 <code>iframe</code> 页面上的点击操作。</p><p>防御：<code>X-Frame-Options</code> 响应头。用来给浏览器指示允许一个页面可否在 <code>&lt;frame&gt;</code>, <code>&lt;/iframe&gt;</code> 或者 <code>&lt;object&gt;</code> 中展现的标记。网站可以使用此功能，来确保自己网站的内容没有被嵌到别人的网站中去，也从而避免了点击劫持的攻击。</p><h3 id="CSRF-Cross-site-Request-Forgery，跨站请求伪造"><a href="#CSRF-Cross-site-Request-Forgery，跨站请求伪造" class="headerlink" title="CSRF(Cross-site Request Forgery，跨站请求伪造)"></a>CSRF(Cross-site Request Forgery，跨站请求伪造)</h3><p><img src="/assets/img/CSRF.jpg" alt="CSRF"></p><h4 id="防御-1"><a href="#防御-1" class="headerlink" title="防御"></a>防御</h4><ul><li><p>Cookie-to-Header Token<br>表单的数据需要一个 <code>token</code>，这个 <code>token</code> 通过 <code>cookie</code> 来生成，服务器验证。这样攻击者伪造的请求中 <code>token</code> 不对就认为是一次 <code>CSRF</code> 攻击。</p></li><li><p>验证码<br>重要的操作让用户输入验证码，非常安全。但是用户体验差。</p></li><li><p>验证 HTTP Refer 字段<br>验证请求来源，没啥用，可以改。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;网络模型&quot;&gt;&lt;a href=&quot;#网络模型&quot; class=&quot;headerlink&quot; title=&quot;网络模型&quot;&gt;&lt;/a&gt;网络模型&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/assets/img/network_model.png&quot; alt=&quot;Network Model&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TCP/IP&lt;/code&gt; 四层模型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用层、运输层、网际层和网络接口层。从实质上讲，只有上边三层，网络接口层没有什么具体的内容。&lt;code&gt;HTTP&lt;/code&gt; 对应应用层。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OSI&lt;/code&gt; 七层模型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用层（&lt;code&gt;Application&lt;/code&gt;）、表示层（&lt;code&gt;Presentation&lt;/code&gt;）、会话层（&lt;code&gt;Session&lt;/code&gt;）、传输层（&lt;code&gt;Transport&lt;/code&gt;）、网络层（&lt;code&gt;Network&lt;/code&gt;）、数据链路层（&lt;code&gt;Data Link&lt;/code&gt;）、物理层（&lt;code&gt;Physical&lt;/code&gt;）。&lt;code&gt;HTTP&lt;/code&gt; 也是对应应用层。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;五层模型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用层、运输层、网络层、数据链路层和物理层。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://1016990109.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://1016990109.github.io/tags/js/"/>
    
      <category term="http" scheme="http://1016990109.github.io/tags/http/"/>
    
      <category term="tcp" scheme="http://1016990109.github.io/tags/tcp/"/>
    
      <category term="xss" scheme="http://1016990109.github.io/tags/xss/"/>
    
      <category term="csrf" scheme="http://1016990109.github.io/tags/csrf/"/>
    
      <category term="网络模型" scheme="http://1016990109.github.io/tags/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="跨域" scheme="http://1016990109.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="点击劫持" scheme="http://1016990109.github.io/tags/%E7%82%B9%E5%87%BB%E5%8A%AB%E6%8C%81/"/>
    
  </entry>
  
  <entry>
    <title>前端基础之JS数组</title>
    <link href="http://1016990109.github.io/2018/07/19/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E4%B9%8BJS%E6%95%B0%E7%BB%84/"/>
    <id>http://1016990109.github.io/2018/07/19/前端基础之JS数组/</id>
    <published>2018-07-19T07:18:41.000Z</published>
    <updated>2018-09-04T07:27:08.578Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><ol><li><code>push(val1,val2,...)</code>、<code>pop</code> 操作，增加和删除，后进先出。</li><li><code>unshift(val1,val2,...)</code>、<code>shift()</code> 对应在开头添加元素和删除元素。</li><li><code>splice(start,deleteCount,val1,val2,...)</code> 从开始位置删除一定数量的元素，并从这个位置插入新的元素。</li><li><code>reverse()</code> 反向。</li><li><code>sort([orderfunction])</code> 排序。</li><li><code>slice([start] [,end])</code> 返回子数组，拷贝后的，复制一个数组简单地 <code>slice()</code>。</li><li><code>join(seperator)</code> 返回以 <code>seperator</code> 作为间隔的字符串，默认为 <code>,</code>。</li><li><code>concat([arr1][,arr2]...)</code> 连接数组并返回新的数组，<code>concat()</code> 复制数组。</li><li>其他：<code>indexOf(val)</code>,<code>includes(val)</code>,<code>toString</code>(同 <code>join()</code> 或 <code>join(&quot;,&quot;)</code>),<code>forEach()</code>,<code>every</code>,<code>findIndex</code>,<code>map</code>,<code>reduce</code>,<code>keys</code>,<code>values</code>。</li></ol><a id="more"></a><h2 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h2><p>1.字符串反向：例：<code>123abc</code> =&gt; <code>cba321</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'123abc'</span></span><br><span class="line">  .split(<span class="string">''</span>)</span><br><span class="line">  .reverse()</span><br><span class="line">  .join(<span class="string">''</span>)</span><br></pre></td></tr></table></figure><p>2.拍平数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>], <span class="number">4</span>], <span class="number">5</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(arr[i])) &#123;</span><br><span class="line">      arr.splice(i, <span class="number">1</span>, ...flatten(arr[i]))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line">flatten(arr)</span><br></pre></td></tr></table></figure><p>3.打印数组全排列：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">allRange</span> (<span class="params">arr, path, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!arr.length) &#123;</span><br><span class="line">        res.push(path)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">v, idx</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> t = arr.slice()</span><br><span class="line">        <span class="keyword">const</span> p = path.slice()</span><br><span class="line">        t.splice(idx, <span class="number">1</span>)</span><br><span class="line">        p.push(v)</span><br><span class="line">        allRange(t, p, res)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">const</span> b = []</span><br><span class="line">allRange(a, [], b)</span><br><span class="line"><span class="built_in">console</span>.log(b)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;push(val1,val2,...)&lt;/code&gt;、&lt;code&gt;pop&lt;/code&gt; 操作，增加和删除，后进先出。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unshift(val1,val2,...)&lt;/code&gt;、&lt;code&gt;shift()&lt;/code&gt; 对应在开头添加元素和删除元素。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;splice(start,deleteCount,val1,val2,...)&lt;/code&gt; 从开始位置删除一定数量的元素，并从这个位置插入新的元素。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reverse()&lt;/code&gt; 反向。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sort([orderfunction])&lt;/code&gt; 排序。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slice([start] [,end])&lt;/code&gt; 返回子数组，拷贝后的，复制一个数组简单地 &lt;code&gt;slice()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;join(seperator)&lt;/code&gt; 返回以 &lt;code&gt;seperator&lt;/code&gt; 作为间隔的字符串，默认为 &lt;code&gt;,&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;concat([arr1][,arr2]...)&lt;/code&gt; 连接数组并返回新的数组，&lt;code&gt;concat()&lt;/code&gt; 复制数组。&lt;/li&gt;
&lt;li&gt;其他：&lt;code&gt;indexOf(val)&lt;/code&gt;,&lt;code&gt;includes(val)&lt;/code&gt;,&lt;code&gt;toString&lt;/code&gt;(同 &lt;code&gt;join()&lt;/code&gt; 或 &lt;code&gt;join(&amp;quot;,&amp;quot;)&lt;/code&gt;),&lt;code&gt;forEach()&lt;/code&gt;,&lt;code&gt;every&lt;/code&gt;,&lt;code&gt;findIndex&lt;/code&gt;,&lt;code&gt;map&lt;/code&gt;,&lt;code&gt;reduce&lt;/code&gt;,&lt;code&gt;keys&lt;/code&gt;,&lt;code&gt;values&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://1016990109.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://1016990109.github.io/tags/js/"/>
    
      <category term="数组" scheme="http://1016990109.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Linux 命令 —— 学习 Shell</title>
    <link href="http://1016990109.github.io/2018/07/12/Linux-%E5%91%BD%E4%BB%A4-%E5%AD%A6%E4%B9%A0Shell/"/>
    <id>http://1016990109.github.io/2018/07/12/Linux-命令-学习Shell/</id>
    <published>2018-07-12T14:38:04.000Z</published>
    <updated>2018-07-19T07:18:06.294Z</updated>
    
    <content type="html"><![CDATA[<p>系统学习 <code>Linux</code> 命令可以参考这本书：<a href="http://billie66.github.io/TLCL/book/index.html" target="_blank" rel="noopener">《The Linux Command Line》</a>。</p><h2 id="学习-Shell"><a href="#学习-Shell" class="headerlink" title="学习 Shell"></a>学习 Shell</h2><ul><li>如果提示符的最后一个字符是“#”, 而不是“$”, 那么这个终端会话就有超级用户权限。</li><li>如果是仿终端鼠标选中或者双击选中默认拷贝到缓冲区，按下鼠标中键可以粘贴。</li><li><code>ls</code> 命令选项：<code>-F</code> 如果是目录后面会加 <code>/</code>；<code>-h</code> 大小已可读的形式显示；<code>-S</code> 大小排序，<code>-t</code> 修改时间排序。</li><li><code>file</code> 命令打印文件内容简单描述，<code>file log.log</code>。</li><li><code>Linux</code> 系统中的目录：</li></ul><a id="more"></a><table><thead><tr><th>目录</th><th>描述</th></tr></thead><tbody><tr><td>/</td><td>根目录。</td></tr><tr><td>/bin</td><td>包含系统启动和运行所必须的二进制程序。</td></tr><tr><td>/boot</td><td>包含 Linux 内核、初始 RAM 磁盘映像（用于启动时所需的驱动）和 启动加载程序。</td></tr><tr><td>/dev</td><td>这是一个包含设备结点的特殊目录。在这个目录里，内核维护着所有设备的列表。</td></tr><tr><td>/etc</td><td>这个目录包含所有系统层面的配置文件。它也包含一系列的 shell 脚本， 在系统启动时，这些脚本会开启每个系统服务。<code>crontab</code> 定时任务，<code>fstab</code> 存储设备列表和相应挂载点，<code>password</code> 用户账户列表。</td></tr><tr><td>/home</td><td>每个用户一个目录。</td></tr><tr><td>/lib</td><td>核心系统程序用的共享文件</td></tr><tr><td>/lost+found</td><td>每个使用 Linux 文件系统的格式化分区或设备，例如 ext3 文件系统， 都会有这个目录。</td></tr><tr><td>/media 或 /mnt(老的 Linux 版本)</td><td>包含可移动介质的挂载点。</td></tr><tr><td>/<strong>proc</strong></td><td>Linux 内核维护的虚拟文件系统，内核窥视孔。</td></tr><tr><td>/sbin</td><td>系统二进制文件，通常为超级用户保留。</td></tr><tr><td>/tmp</td><td>临时目录，<strong>重启会清空</strong>。</td></tr><tr><td>/usr/bin</td><td>系统安装的可执行程序。</td></tr><tr><td>/usr/lib</td><td>包含由/usr/bin 目录中的程序所用的共享库。</td></tr><tr><td>/usr/sbin</td><td>包含许多系统管理程序。</td></tr><tr><td>/usr/share</td><td>由/usr/bin 目录中的程序使用的共享数据。</td></tr><tr><td>/var</td><td>存放动态文件，各种数据库，假脱机文件， 用户邮件等等。</td></tr><tr><td>/var/log</td><td>这个/var/log 目录包含日志文件、各种系统活动的记录。其中最重要的一个文件是/var/log/messages。超级用户才能查看这些日志文件。</td></tr></tbody></table><ul><li>关于命令的命令<ul><li>type:解释一个命令</li><li>which:显示会执行哪个应用程序(查看命令在哪)</li><li>man:显示命令手册</li><li>apropos:在一些特定的包含系统命令的简短描述的数据库文件里查找关键字，然后把结果送到标准输出(和 <code>man -k</code> 相同)</li><li>info:显示命令 info(类似于网页，可以跳转，方便阅读命令文档)</li><li>whatis:显示一个命令简洁描述</li><li>alias:创建命令(给详细的命令取别名)，取消使用 <code>unalias</code></li></ul></li><li>重定向<ul><li>cat:连接文件</li><li>sort:排序</li><li>uniq:打印去除重复行</li><li>grep:匹配</li><li>wc:打印文件中换行符，字，和字节个数</li><li>head/tail:打印头部或尾部</li><li>tee:从 <code>Stdin</code> 读取数据，并同时输出到 <code>Stdout</code> 和文件，<code>ls | tee out.txt</code>。</li><li><code>&gt;</code> 重定向覆盖；<code>&gt;&gt;</code> 不覆盖。</li><li><code>&gt;ls-output.txt 2&gt;&amp;1</code> 先重定向到 <code>ls-output.txt</code> 再将标准错误(<code>2</code>)重定向到标准输出(<code>1</code>)，注意顺序反的是不行的；缩写：<code>&amp;&gt; ls-output.txt</code>。</li><li>重定向输出结果到一个叫做”/dev/null”的特殊文件可以忽略输出。</li><li><code>grep -v</code> 只打印不匹配的行；<code>grep -i</code> 忽略大小写。</li><li><code>tail -f</code> 实时浏览文件。</li></ul></li><li><code>echo</code><ul><li>支持正则表达式，如打印隐藏文件：<code>echo .[!.]?*</code>，直接 <code>echo .*</code> 会将代表当前工作目录和父目录的 <code>.</code> 和 <code>..</code> 也打印出来。</li><li>支持算数表达式，<code>echo $((expression))</code>，如 <code>echo $((2+2))</code>。注意：只支持整数。</li><li>花括号展开，<code>echo {Z..A}</code>。花括号表达式本身可能包含一个由逗号分开的字符串列表，或者一个整数区间，或者单个的字符的区间。可嵌套，如 <code>echo a{A{1,2},B{3,4}}b</code>。</li><li>通过 <code>$</code> 调用变量，<code>printenv</code> 打印有效的变量列表。</li><li>命令替换，允许把一个命令的输出作为展开模式来用，例如 <code>echo $(ls)</code> 把 <code>ls</code> 命令的结果作为一个临时变量打印出来。注意：除了圆括号加美元符，倒引号也可以支持命令替换，<code>echo `ls`</code>。</li><li>双引号，双引号可以阻止单词的分割，如 <code>ls -l two word.txt</code> 是意味着列出 <code>two</code> 和 <code>word.txt</code> 的内容，改为 <code>ls -l &quot;two word.txt&quot;</code> 就可以解决这个问题了。</li><li>单引号，禁止所有展开，不存在什么表达式，写啥就是啥。</li><li>转义字符，经常在双引号中使用转义字符，能转义的字符有 “$”, “!”, “&amp;”, “ “ 等等，如 <code>\$5.00</code>，单引号中反斜杠失去意义。<code>echo</code> 命令带上 <code>-e</code> 选项，能够解释转义序列，可以把转义序列放在 <code>$&#39; &#39;</code> 里面，例如 <code>echo -e &quot;Time&#39;s up\a&quot;</code> 或 <code>echo &quot;Time&#39;s up&quot; $&#39;\a&#39;</code> 都是可以的。</li></ul></li><li>命令行编辑<ul><li><code>clear</code> 清除屏幕，<code>history</code> 显示历史命令。</li><li><code>ctrl-a</code>(ahead) 移动到行首，<code>ctrl-e</code>(end) 移动到行尾，<code>ctrl-l</code> 相当于 <code>clear</code>，<code>alt-f</code>(forward) 前一个单词，<code>alt-b</code>(behind) 后一个单词。</li></ul></li><li><p>权限</p><ul><li><code>r</code> 可读，<code>w</code> 可写，<code>x</code> 可执行。</li><li><code>ls</code> 命令显示的十个字符，第一个代表文件类型，后面九个字符分 3 组，分别表示用户、用户组、其他的权限。</li><li>八进制数可以表示各种权限，因为权限有 3 类，组合方式就刚好只有 <code>2^3=8</code> 种，例如 <code>0</code> 代表 <code>000</code> – <code>---</code>，<code>7</code> 代表 <code>111</code> – <code>rwx</code>，所以我们经常看到有 <code>chmod 777</code> 这样类似的命令，就是通过 3 个数字用来修改文件或者文件夹的所有者、用户组、其他人的权限。</li><li><code>chmod</code> 命令符号表示法:</li></ul><p><code>u</code> 是所有者(<code>user</code>)，<code>g</code> 是用户组(<code>group</code>)，<code>o</code> 是其他人(<code>other</code>)；<code>+</code> 用来添加权限，<code>-</code> 用来删除权限，<code>=</code> 用来设置权限(除设置外的其他权限都删除)。例如 <code>chmod go=rw file</code> 意思是指定该文件的用户组和其他人拥有读权限和写权限，如果群组或者其他人之前拥有可执行权限则会被移除，<strong>而所有者的权限不会变动</strong>，<code>-R</code> 为递归赋予权限，只对文件夹有效。</p><ul><li><code>umask</code> 设置默认权限，使用掩码设置，类似网络 <code>ip</code> 之类的，<code>umask 0022</code> 展开就是 <code>000 000 010 010</code>，前三位先不管，后面依次对应所有者、用户组、其他人的权限，某一位如果为 <code>1</code> 就把该位代表的权限删除，<code>0022</code> 就意味着删除用户组和其他人的写权限，只能读，默认的权限是 <code>--- rw- rw- rw-</code>，是默认没有可执行权限的。</li><li>特殊权限，<code>setuid</code>(程序运行时从运行的用户切换到程序所有者用户)、<code>setgid</code>(类似于 <code>setuid</code> 把文件运行的所有组<code>id</code>换成文件所有组<code>id</code>))、<code>sticky</code>(阻止用户删除和重命名文件)，具体的可以查看 <a href="http://billie66.github.io/TLCL/book/chap10.html" target="_blank" rel="noopener">权限</a>。</li><li><code>chown [owner][:[group]] file</code> 更改文件的所有者或所有组。</li></ul></li><li><p>进程</p><ul><li>当系统启动的时候，内核先把一些它自己的活动初始化为进程，然后运行一个叫做 <code>init</code> 的程序。<code>init</code>， 依次地，再运行一系列的称为 <code>init</code> 脚本的 <code>shell</code> 脚本（位于 <code>/etc</code>），它们可以启动所有的系统服务。</li><li><code>ps</code> 简单查看进程。<code>x</code>(注意不是 <code>-x</code>)选项显示进程在哪个终端控制的、状态(<code>STAT</code>， <code>R</code> 正在运行，<code>S</code> 正在睡眠，<code>D</code> 不可中断睡眠，<code>T</code> 已停止，<code>Z</code> 一个死进程，<code>&lt;</code> 一个高优先级级才能更，<code>N</code> 低优先级进程)，<strong>启用的命令</strong>(这个可能很有用)。<code>ps aux</code> 是经常用的一个显示更加详细信息的命令，</li><li><code>top</code> 程序以进程活动顺序显示连续更新的系统进程列表。以 <code>CPU</code> 使用率排序。</li><li>一个进程放到后台执行，只要在后面加上 <code>&amp;</code> 字符，如 <code>vi foo.txt &amp;</code>。</li><li>将进程放回前台执行，先用 <code>jobs</code> 找到对应的任务，比如 <code>[1] suspended(tty output) vi foo.txt</code>，任务就是 <code>1</code>，接着使用 <code>fg</code>(可以 <code>foreground</code> 记忆) 命令 <code>fg %1</code>。</li><li><code>Ctrl-Z</code> 停止一个前台任务，将任务移动到后台。同样地使用 <code>fg</code> 命令可以将后台进程移动到前台。</li><li><code>kill [-signal] PID</code>，发送信号给对应 <code>PID</code> 的进程，默认是终止信号(<code>TERM</code>)。<code>signal</code> 可以用数字也可以用字母，建议用字母，好记，<code>HUP</code> 挂起，<code>INT</code> 中断(类似 <code>Ctrl-C</code>)，<code>KILL</code> 杀死(不通知进程，直接在内核杀死)，<code>TERM</code> 终止，<code>CONT</code> 发送停止信号后可以使用这个来恢复，<code>STOP</code> 停止进程。<strong><code>kill -l</code> 列出完整信号列表</strong>。</li><li><code>pstree</code> 输出一个树型结构的进程列表，这个列表展示了进程间父/子关系。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;系统学习 &lt;code&gt;Linux&lt;/code&gt; 命令可以参考这本书：&lt;a href=&quot;http://billie66.github.io/TLCL/book/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《The Linux Command Line》&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;学习-Shell&quot;&gt;&lt;a href=&quot;#学习-Shell&quot; class=&quot;headerlink&quot; title=&quot;学习 Shell&quot;&gt;&lt;/a&gt;学习 Shell&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;如果提示符的最后一个字符是“#”, 而不是“$”, 那么这个终端会话就有超级用户权限。&lt;/li&gt;
&lt;li&gt;如果是仿终端鼠标选中或者双击选中默认拷贝到缓冲区，按下鼠标中键可以粘贴。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ls&lt;/code&gt; 命令选项：&lt;code&gt;-F&lt;/code&gt; 如果是目录后面会加 &lt;code&gt;/&lt;/code&gt;；&lt;code&gt;-h&lt;/code&gt; 大小已可读的形式显示；&lt;code&gt;-S&lt;/code&gt; 大小排序，&lt;code&gt;-t&lt;/code&gt; 修改时间排序。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file&lt;/code&gt; 命令打印文件内容简单描述，&lt;code&gt;file log.log&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Linux&lt;/code&gt; 系统中的目录：&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://1016990109.github.io/tags/Linux/"/>
    
      <category term="Shell" scheme="http://1016990109.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>《Node.js 设计模式》读书笔记 第六章</title>
    <link href="http://1016990109.github.io/2018/07/04/Node-js-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%85%AD%E7%AB%A0/"/>
    <id>http://1016990109.github.io/2018/07/04/Node-js-设计模式读书笔记-第六章/</id>
    <published>2018-07-04T02:37:30.000Z</published>
    <updated>2018-07-24T11:51:00.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Design-Patterns-设计模式"><a href="#Design-Patterns-设计模式" class="headerlink" title="Design Patterns(设计模式)"></a>Design Patterns(设计模式)</h1><h2 id="Factory-工厂"><a href="#Factory-工厂" class="headerlink" title="Factory(工厂)"></a>Factory(工厂)</h2><h3 id="A-generic-interface-for-creating-objects-创建对象的通用接口"><a href="#A-generic-interface-for-creating-objects-创建对象的通用接口" class="headerlink" title="A generic interface for creating objects(创建对象的通用接口)"></a>A generic interface for creating objects(创建对象的通用接口)</h3><p>调用一个工厂，而不是直接使用 <code>new</code> 运算符或 <code>Object.create()</code> 从一个原型创建一个新的对象，在很多方面是非常方便和灵活的。</p><a id="more"></a><p>首先最重要的是，工厂允许我们将对象创建与实现分离开来；从本质上讲，一个工厂包装了一个新实例的创建，给了我们更多的灵活性和怎么创建的控制权。</p><p>在工厂内部，我们可以使用闭包，使用原型和 <code>new</code> 运算符，使用 <code>Object.create()</code> 创建新实例，甚至根据特定条件返回不同的实例。对于对象的使用者而言，是完全不知道这个实例是怎么进行创建的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createImage</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (name.match(<span class="regexp">/\.jpeg$/</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JpegImage(name)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.match(<span class="regexp">/\.gif$/</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> GifImage(name)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.match(<span class="regexp">/\.png$/</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PngImage(name)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">'Unsupported format'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> image = createImage(<span class="string">'photo.jpeg'</span>)</span><br></pre></td></tr></table></figure><h3 id="A-mechanism-to-enforce-encapsulation-强制封装的机制"><a href="#A-mechanism-to-enforce-encapsulation-强制封装的机制" class="headerlink" title="A mechanism to enforce encapsulation(强制封装的机制)"></a>A mechanism to enforce encapsulation(强制封装的机制)</h3><blockquote><p>封装需要做的是隐藏对象信息，外部代码只能通过暴露的公开接口修改对象而不能直接作用于对象，这又要叫做信息隐藏，和继承、多态、抽象一起都是面向对象的基本原则。</p></blockquote><p>在 <code>JavaScript</code> 中，没有权限修饰符（不能声明私有变量），所以强制封装的唯一方法是通过函数作用域和闭包。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> privateProperties = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> person = &#123;</span><br><span class="line">    setName: <span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!name) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'A person must have a name'</span>)</span><br><span class="line">      privateProperties.name = name</span><br><span class="line">    &#125;,</span><br><span class="line">    getName: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> privateProperties.name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  person.setName(name)</span><br><span class="line">  <span class="keyword">return</span> person</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中创建了两个对象：<code>person</code> 是通过工厂返回的公开接口；<code>privateProperties</code> 是只能通过 <code>person</code> 公开接口更改的私有属性。</p><blockquote><p>工厂只是我们创建私有成员变量的技术之一，事实上，也有很多其它的方法定义私有成员变量。在构造函数中定义私有变量；使用约定，用下划线 <code>_</code> 或美元符号 <code>$</code>（实际上并不能阻止从外部访问内部成员）的属性名称前缀；使用<code>ES2015 WeakMaps</code>。更加详细的可以看看 <code>Mozilla</code> 的 <a href="https://developer.mozilla.org/en-US/docs/Archive/Add-ons/Add-on_SDK/Guides/Contributor_s_Guide/Private_Properties" target="_blank" rel="noopener">Private Properties</a> 的文章。</p></blockquote><h3 id="Build-a-simple-code-profiler-构建一个简单的-profiler"><a href="#Build-a-simple-code-profiler-构建一个简单的-profiler" class="headerlink" title="Build a simple code profiler(构建一个简单的 profiler)"></a>Build a simple code profiler(构建一个简单的 profiler)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profiler</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(label) &#123;</span><br><span class="line">    <span class="keyword">this</span>.label = label</span><br><span class="line">    <span class="keyword">this</span>.lastTime = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  start() &#123;</span><br><span class="line">    <span class="keyword">this</span>.lastTime = process.hrtime()</span><br><span class="line">  &#125;</span><br><span class="line">  end() &#123;</span><br><span class="line">    <span class="keyword">const</span> diff = process.hrtime(<span class="keyword">this</span>.lastTime)</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      <span class="string">`Timer "<span class="subst">$&#123;<span class="keyword">this</span>.label&#125;</span>" took <span class="subst">$&#123;diff[<span class="number">0</span>]&#125;</span> seconds and <span class="subst">$&#123;diff[<span class="number">1</span>]&#125;</span></span></span><br><span class="line"><span class="string">           nanoseconds.`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用这样一个 <code>profiler</code> 来记录每个程序的执行时间，在生产环境中就会产生大量的输出，我们想做的可能是将这些信息重定向到另一个源，或者在生产环境下完全禁用，如果直接通过 <code>new</code> 来创建 <code>Profiler</code> 对象的话需要做一些额外的逻辑以便在不同的逻辑间来切换。而使用工厂模式就可以很好地解决这个问题，根据传入参数的不同创建不同逻辑的 <code>Profiler</code> 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">label</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Profiler(label) <span class="comment">// [1]</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// [2]</span></span><br><span class="line">      start: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">      end: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Must set NODE_ENV'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Composable-factory-functions-可组合的工厂函数"><a href="#Composable-factory-functions-可组合的工厂函数" class="headerlink" title="Composable factory functions(可组合的工厂函数)"></a>Composable factory functions(可组合的工厂函数)</h3><p>可组合的工厂函数，它代表了一种特定类型的工厂函数，可以“组合”在一起构建新的更强大的工厂函数。</p><p>可组合工厂函数可以使用实现了 <a href="https://github.com/stampit-org/stamp-specification" target="_blank" rel="noopener">Stamp 规范</a> 的 <code>npm</code> 库 <a href="https://www.npmjs.com/package/stampit" target="_blank" rel="noopener">stampit</a>。详细的例子可直接查看官方文档 <a href="https://stampit.js.org/essentials/overview" target="_blank" rel="noopener">stampit</a>。</p><blockquote><p><code>Stamp</code> 是一个可组合的工厂函数(<code>composable factory function</code>)，根据描述符返回对象实例。它有一个 <code>compose</code> 的方法，该方法使用当前的 <code>Stamp</code> 作为一个基础，将其他的 <code>Composable</code> 组合进来，返回一个新的 <code>Stamp</code>。可以通过 <code>staticProperties</code> 属性来重写 <code>compose</code> 方法，方法在<a href="https://github.com/stampit-org/stamp-specification#overriding-compose-method" target="_blank" rel="noopener">这里</a>。</p></blockquote><h3 id="In-the-wild-实际应用"><a href="#In-the-wild-实际应用" class="headerlink" title="In the wild(实际应用)"></a>In the wild(实际应用)</h3><p>很多的 <code>Node.js</code> 的库都有使用工厂模式，利用工厂返回实例，这里就不一一举例说明了，比较有意思的可以看看 <code>Node.js</code> 的核心模块 <code>HTTP</code> (<code>http.createServer()</code>创建实例)，使用 <code>Stamp</code> 规范的包，如 <a href="https://www.npmjs.com/package/react-stampit" target="_blank" rel="noopener">react-stampit</a> 可以轻松地组合组件的功能。</p><h2 id="Revealing-constructor-揭露构造器"><a href="#Revealing-constructor-揭露构造器" class="headerlink" title="Revealing constructor(揭露构造器)"></a>Revealing constructor(揭露构造器)</h2><p>其实简单说就是将要暴露的接口返回（<code>return</code>）出去。</p><p>我们分析一下 <code>Promise</code> 的构造函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>Promise</code> 接收一个函数作为构造器的参数，这个函数被称为执行函数，在 <code>Promise</code> 内部被调用，它提供了一种暴露可以被外界调用的 <code>resolve</code> 和 <code>reject</code> 方法的机制去修改 <code>Promise</code> 内部的状态。这样的好处是，只有构造器才有对 <code>resolve</code> 和 <code>reject</code> 的访问权限，一旦 <code>Promise</code> 对象被创建，<code>resolve</code> 和 <code>reject</code> 就能安全地传递，在其他地方是调用不了的。</p><h3 id="A-read-only-event-emitter-一个只读的事件触发器"><a href="#A-read-only-event-emitter-一个只读的事件触发器" class="headerlink" title="A read-only event emitter(一个只读的事件触发器)"></a>A read-only event emitter(一个只读的事件触发器)</h3><p>使用这个模式我们创建一个只读的 <code>event emitter</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="title">Roee</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(executor) &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="keyword">const</span> emit = <span class="keyword">this</span>.emit.bind(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">this</span>.emit = <span class="literal">undefined</span></span><br><span class="line">    executor(emit)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，现在之后通过 <code>executor</code> 传入的参数才能获取到 <code>emit</code> 的访问权限了，关键就在于 <code>this.emit = undefined</code> 这一语句使得从外面不能访问 <code>emit</code> 方法了，只能通过传入构造器的函数中的参数访问，使用方式像这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Roee = <span class="built_in">require</span>(<span class="string">'./roee'</span>)</span><br><span class="line"><span class="keyword">const</span> ticker = <span class="keyword">new</span> Roee(<span class="function"><span class="params">emit</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> tickCount = <span class="number">0</span></span><br><span class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> emit(<span class="string">'tick'</span>, tickCount++), <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = ticker</span><br></pre></td></tr></table></figure><blockquote><p>注意：上面这种方式并不是完美的，有的方法可以绕过：<code>require(&#39;events&#39;).prototype.emit.call(ticker, &#39;someEvent&#39;, {});</code>。</p></blockquote><h3 id="In-the-wild"><a href="#In-the-wild" class="headerlink" title="In the wild"></a>In the wild</h3><p>除了 <code>Promise</code> 外其实很难再找到这样的库了，现在 <code>Streams</code> 议案中有一个新的规范，可以尝试使用揭示构造函数模式替代现今的模板模式，以便能够描述各种 <code>Streams</code> 对象的行为：可以看 <a href="https://streams.spec.whatwg.org" target="_blank" rel="noopener">https://streams.spec.whatwg.org</a>。</p><h2 id="Proxy-代理模式"><a href="#Proxy-代理模式" class="headerlink" title="Proxy(代理模式)"></a>Proxy(代理模式)</h2><p><code>Proxy</code> 是用来控制访问一个被称为主题（<code>subject</code>）的对象的，这种模式也可以叫做 <code>代替模式</code>，<code>Proxy</code> 拦截对 <code>subject</code> 的操作，并对行为进行增强和补充。</p><p><img src="/assets/img/proxy.png" alt="Proxy"></p><p>上图说明 <code>Proxy</code> 和 <code>Subject</code> 是有相同的接口的，对客户端都是透明的，<code>Proxy</code> 将操作转发给 <code>Subject</code> 只不过通过额外的预处理增强其行为。</p><p>代理的应用场景：</p><ul><li>数据验证：在 <code>Proxy</code> 向 <code>Subject</code> 转发数据前验证其数据输入的合法性。</li><li>安全性：代理验证客户端是否有权限，仅仅当有权限时才会向 <code>Subject</code> 发送相关请求。</li><li>缓存：代理对象保存内部缓存，仅仅当缓存未命中时才向 <code>Subject</code> 发送相关请求。</li><li>懒加载：如果 <code>Subject</code> 的创建需要消耗大量资源，代理可以推迟创建 <code>Subject</code> 的时机。</li><li>日志：代理拦截方法和对应的参数调用，并在他们执行前后实现日志打印。</li><li>远程对象：代理可以接收远程对象，并使得其呈现为本地对象。</li></ul><h3 id="Techniques-for-implementing-proxies-实现代理的方法"><a href="#Techniques-for-implementing-proxies-实现代理的方法" class="headerlink" title="Techniques for implementing proxies(实现代理的方法)"></a>Techniques for implementing proxies(实现代理的方法)</h3><h4 id="Object-Composition-对象组合"><a href="#Object-Composition-对象组合" class="headerlink" title="Object Composition(对象组合)"></a>Object Composition(对象组合)</h4><p>创建具有与主体对象相同接口的新对象，并且对该主体的引用以实例变量或闭包变量的形式存储在代理内部。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createProxy</span>(<span class="params">subject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> proto = <span class="built_in">Object</span>.getPrototypeOf(subject)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Proxy</span>(<span class="params">subject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subject = subject</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Proxy</span>.prototype = <span class="built_in">Object</span>.create(proto)</span><br><span class="line">  <span class="comment">//proxied method</span></span><br><span class="line">  <span class="built_in">Proxy</span>.prototype.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.subject.hello() + <span class="string">' world!'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//delegated method</span></span><br><span class="line">  <span class="built_in">Proxy</span>.prototype.goodbye = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.subject.goodbye.apply(<span class="keyword">this</span>.subject, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(subject)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = createProxy</span><br></pre></td></tr></table></figure><p>可以发现这个 <code>Proxy</code> 对象提供了和 <code>Subject</code> 一样的接口，加强了 <code>hello()</code> 方法，直接委托了 <code>goodbye()</code> 方法。</p><p>前面的代码也显示了一个特定情况：主体对象有一个原型，我们希望维护正确的原型链，以便执行 <code>proxy instanceof Subject</code> 将返回 <code>true</code>，使用继承实现了这一点。</p><p>更多时候由于 <code>js</code> 的动态类型，我们可以简单化，使用对象字面量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createProxy</span>(<span class="params">subject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">//proxied method</span></span><br><span class="line">    hello: <span class="function"><span class="params">()</span> =&gt;</span> subject.hello() + <span class="string">' world!'</span>,</span><br><span class="line">    <span class="comment">//delegated method</span></span><br><span class="line">    goodbye: <span class="function"><span class="params">()</span> =&gt;</span> subject.goodbye.apply(subject, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Object-augmentation-对象增强"><a href="#Object-augmentation-对象增强" class="headerlink" title="Object augmentation(对象增强)"></a>Object augmentation(对象增强)</h4><p>对象增强(或称为猴子补丁)是最为实用的实现代理的方式了，直接更改代理对象的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createProxy</span>(<span class="params">subject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> helloOrig = subject.hello</span><br><span class="line">  subject.hello = <span class="function"><span class="params">()</span> =&gt;</span> helloOrig.call(<span class="keyword">this</span>) + <span class="string">' world!'</span></span><br><span class="line">  <span class="keyword">return</span> subject</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="A-comparision-of-the-different-techniques-不同方法的比较"><a href="#A-comparision-of-the-different-techniques-不同方法的比较" class="headerlink" title="A comparision of the different techniques(不同方法的比较)"></a>A comparision of the different techniques(不同方法的比较)</h3><p>对象组合方式是比较安全的，因为不修改原对象，缺点是需要委托所有的方法，尽管可能只需要代理某一个或某几个方法，甚至有时候还需要委托属性。</p><p>对象增强就与对象组合方式相反，通常来讲，如果更改对象影响不是很大的话首选对象增强方式。</p><h3 id="Creating-a-Writable-stream"><a href="#Creating-a-Writable-stream" class="headerlink" title="Creating a Writable stream"></a>Creating a Writable stream</h3><p>实现一个代理的 <code>Writable Stream</code>，增加写入日志的功能：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createLoggingWritable</span>(<span class="params">writableOrig</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> proto = <span class="built_in">Object</span>.getPrototypeOf(writableOrig)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">LoggingWritable</span>(<span class="params">writableOrig</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.writableOrig = writableOrig</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  LoggingWritable.prototype = <span class="built_in">Object</span>.create(proto)</span><br><span class="line"></span><br><span class="line">  LoggingWritable.prototype.write = <span class="function"><span class="keyword">function</span>(<span class="params">chunk, encoding, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!callback &amp;&amp; <span class="keyword">typeof</span> encoding === <span class="string">'function'</span>) &#123;</span><br><span class="line">      callback = encoding</span><br><span class="line">      encoding = <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Writing '</span>, chunk)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.writableOrig.write(chunk, encoding, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Finished writing '</span>, chunk)</span><br><span class="line">      callback &amp;&amp; callback()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  LoggingWritable.prototype.on = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.writableOrig.on.apply(<span class="keyword">this</span>.writableOrig, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  LoggingWritable.prototype.end = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.writableOrig.end.apply(<span class="keyword">this</span>.writableOrig, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> LoggingWritable(writableOrig)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到上面的实现方式是用对象组合的方式的，这里为了简单只委托重要的几个方法，我们覆盖了 <code>write()</code> 方法，每次调用 <code>write()</code> 时都会将消息记录到标准输出，并且每次异步操作完成时都会记录消息。</p><h3 id="Proxy-in-the-ecosystem-function-hooks-and-AOP-生态中的代理——函数钩子和-AOP"><a href="#Proxy-in-the-ecosystem-function-hooks-and-AOP-生态中的代理——函数钩子和-AOP" class="headerlink" title="Proxy in the ecosystem - function hooks and AOP(生态中的代理——函数钩子和 AOP)"></a>Proxy in the ecosystem - function hooks and AOP(生态中的代理——函数钩子和 AOP)</h3><p><code>npm</code> 中有几个库帮助开发人员使用函数钩子可以看下：<a href="https://npmjs.org/package/hooks" target="_blank" rel="noopener">hooks</a>、<a href="https://npmjs.org/package/hooker" target="_blank" rel="noopener">hooker</a>、<a href="https://npmjs.org/package/meld" target="_blank" rel="noopener">meld</a>。</p><h3 id="ES2015-Proxy"><a href="#ES2015-Proxy" class="headerlink" title="ES2015 Proxy"></a>ES2015 Proxy</h3><p><code>ES2015</code> 规范引入了一个名为 <code>Proxy</code> 的全局对象，它可以从开始在 <code>Node.js v6.0</code> 中使用。</p><p><code>Proxy API</code> 包含了一个接受 <code>target</code> 和 <code>handler</code> 的构造函数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler)</span><br></pre></td></tr></table></figure><p><code>handler</code> 对象包含一系列具有预定义名称的可选方法，这些方法称为陷阱方法（例如，<code>apply</code>，<code>get</code>，<code>set</code> 和 <code>has</code>），这些方法在代理实例上执行相应的操作时会自动调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scientist = &#123;</span><br><span class="line">  name: <span class="string">'nikola'</span>,</span><br><span class="line">  surname: <span class="string">'tesla'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> uppercaseScientist = <span class="keyword">new</span> <span class="built_in">Proxy</span>(scientist, &#123;</span><br><span class="line">  get: <span class="function">(<span class="params">target, property</span>) =&gt;</span> target[property].toUpperCase()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(uppercaseScientist.name, uppercaseScientist.surname)</span><br><span class="line"><span class="comment">// prints NIKOLA TESLA</span></span><br></pre></td></tr></table></figure><p>这个例子使用 <code>Proxy API</code> 来拦截所有对 <code>scientist</code> 属性的访问，并将属性的原始值转换为大写字符串。</p><p>再看个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> evenNumbers = <span class="keyword">new</span> <span class="built_in">Proxy</span>([], &#123;</span><br><span class="line">  get: <span class="function">(<span class="params">target, index</span>) =&gt;</span> index * <span class="number">2</span>,</span><br><span class="line">  has: <span class="function">(<span class="params">target, number</span>) =&gt;</span> number % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> <span class="keyword">in</span> evenNumbers) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span> <span class="keyword">in</span> evenNumbers) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(evenNumbers[<span class="number">7</span>]) <span class="comment">// 14</span></span><br></pre></td></tr></table></figure><p>这个例子创建了一个虚拟数组，因为是不真正存储数据的，只是定义了 <code>has</code> 和 <code>get</code> 就完成了虚拟数组（包含了所有的偶数）。</p><p>更多详细的有关 <code>Proxy</code> 的用法可以查看<a href="https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noopener">官方文档</a> 或者 <code>Google</code> 的 <a href="https://developers.google.com/web/updates/2016/02/es2015-proxies" target="_blank" rel="noopener">Introducing ES2015 Proxies</a>。</p><h3 id="In-the-wild-1"><a href="#In-the-wild-1" class="headerlink" title="In the wild"></a>In the wild</h3><p><code>Mongoose</code> 是 <code>MongoDB</code> 的一个流行的对象文档映射（<code>ODM</code>）库。 在内部，它使用 <code>hooks</code> 为 <code>init</code>，<code>validate</code>，<code>save</code> 和 <code>remove</code> 函数提供预处理和后处理的钩子函数。有关官方文档，请参阅 <a href="http://mongoosejs.com/docs/middleware.html" target="_blank" rel="noopener">Mongoose</a> 的官方文档。</p><h2 id="Decorator-装饰器"><a href="#Decorator-装饰器" class="headerlink" title="Decorator(装饰器)"></a>Decorator(装饰器)</h2><p>装饰器模式：动态增强已有的一个对象实例，而不是对整个类增强；与 <code>Proxy</code> 模式类似，但是不增强或者修改现有的接口，而是新增接口。</p><p><img src="/assets/decorator.png" alt="Decorator"></p><p>从图中可以推断出，<code>Decorator</code> 模式可以和 <code>Proxy</code> 模式组合，装饰器模式负责新增接口，代理模式负责增强或修改现有的接口(拦截对主体的访问，并做增强)。</p><h3 id="Techniques-for-implementing-Decorators-实现装饰器的方法"><a href="#Techniques-for-implementing-Decorators-实现装饰器的方法" class="headerlink" title="Techniques for implementing Decorators(实现装饰器的方法)"></a>Techniques for implementing Decorators(实现装饰器的方法)</h3><h4 id="Composition-组合"><a href="#Composition-组合" class="headerlink" title="Composition(组合)"></a>Composition(组合)</h4><p>一般使用一个新的对象包含被装饰的组件，该对象继承组件，并新增需要的方法，同时委托已有的方法给源组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decorate</span>(<span class="params">component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> proto = <span class="built_in">Object</span>.getPrototypeOf(component)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Decorator</span>(<span class="params">component</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.component = component</span><br><span class="line">  &#125;</span><br><span class="line">  Decorator.prototype = <span class="built_in">Object</span>.create(proto)</span><br><span class="line">  <span class="comment">// new method</span></span><br><span class="line">  Decorator.prototype.greetings = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hi!'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// delegated method</span></span><br><span class="line">  Decorator.prototype.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.component.hello.apply(<span class="keyword">this</span>.component, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Decorator(component)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Object-augmentation-对象增强-1"><a href="#Object-augmentation-对象增强-1" class="headerlink" title="Object augmentation(对象增强)"></a>Object augmentation(对象增强)</h4><p>对象装饰器也可以直接在源对象上添加新的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decorate</span>(<span class="params">component</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// new method</span></span><br><span class="line">  component.greetings = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> component</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Decorating-a-LevelUP-database-装饰一个-LevelUP-数据库"><a href="#Decorating-a-LevelUP-database-装饰一个-LevelUP-数据库" class="headerlink" title="Decorating a LevelUP database(装饰一个 LevelUP 数据库)"></a>Decorating a LevelUP database(装饰一个 LevelUP 数据库)</h3><h4 id="Introducing-LevelUP-and-LevelDB-介绍-LevelUP-和-LevelDB"><a href="#Introducing-LevelUP-and-LevelDB-介绍-LevelUP-和-LevelDB" class="headerlink" title="Introducing LevelUP and LevelDB(介绍 LevelUP 和 LevelDB)"></a>Introducing LevelUP and LevelDB(介绍 LevelUP 和 LevelDB)</h4><p><a href="https://www.npmjs.com/package/levelup" target="_blank" rel="noopener">LevelUP</a> 是 <code>Google</code> 的 <code>LevelDB</code> 上的一个 <code>Node.js</code> 包装器，它是最初为了在 <code>Chrome</code> 浏览器中实现 <code>IndexedDB</code> 而创建的 <code>key/value</code> 存储库。详细的 <code>LevelUP</code> 生态可查看 <a href="https://github.com/rvagg/node-levelup/wiki/Modules" target="_blank" rel="noopener">https://github.com/rvagg/node-levelup/wiki/Modules</a>。</p><h4 id="Implementing-a-LevelUP-plugin"><a href="#Implementing-a-LevelUP-plugin" class="headerlink" title="Implementing a LevelUP plugin"></a>Implementing a LevelUP plugin</h4><p>我们想要构建的是一个 <code>LevelUP</code> 的插件，当将具有特定模式的对象保存到数据库时让我们接到通知。例如如果我们订阅 <code>{a:1}</code> 模式，那么当类似 <code>{a:1,b:3}</code> 或 <code>{a:1,c:&#39;x&#39;}</code> 的数据存储到数据库时，我们会收到一个通知。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">levelSubscribe</span>(<span class="params">db</span>) </span>&#123;</span><br><span class="line">  db.subscribe = <span class="function">(<span class="params">pattern, listener</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//[1]</span></span><br><span class="line">    db.on(<span class="string">'put'</span>, (key, val) =&gt; &#123;</span><br><span class="line">      <span class="comment">//[2]</span></span><br><span class="line">      <span class="keyword">const</span> match = <span class="built_in">Object</span>.keys(pattern).every(</span><br><span class="line">        k =&gt; pattern[k] === val[k] <span class="comment">//[3]</span></span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (match) &#123;</span><br><span class="line">        listener(key, val) <span class="comment">//[4]</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> db</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用对象增强的方法直接将新方法附加到 <code>db</code> 实例上。</p><h2 id="Adapter-适配器模式"><a href="#Adapter-适配器模式" class="headerlink" title="Adapter(适配器模式)"></a>Adapter(适配器模式)</h2><p>适配器模式其实是包装接口来供不同的调用，例如升级接口后用适配器包装新接口给老代码调用。</p><p><img src="/assets/img/adapter.png" alt="Adapter"></p><h3 id="Using-LevelUP-througn-the-filesystem-API-通过-fs-的-API-来使用-LevelUP"><a href="#Using-LevelUP-througn-the-filesystem-API-通过-fs-的-API-来使用-LevelUP" class="headerlink" title="Using LevelUP througn the filesystem API(通过 fs 的 API 来使用 LevelUP)"></a>Using LevelUP througn the filesystem API(通过 fs 的 API 来使用 LevelUP)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">createFsAdapter</span>(<span class="params">db</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> fs = &#123;&#125;</span><br><span class="line">  fs.readFile = <span class="function"><span class="keyword">function</span>(<span class="params">filename, options, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> options === <span class="string">'function'</span>) &#123;</span><br><span class="line">      callback = options</span><br><span class="line">      options = &#123;&#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> options === <span class="string">'string'</span>) &#123;</span><br><span class="line">      options = &#123;</span><br><span class="line">        encoding: options</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    db.get(</span><br><span class="line">      path.resolve(filename),</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">//[1]</span></span><br><span class="line">        valueEncoding: options.encoding</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">err, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">if</span> (err.type === <span class="string">'NotFoundError'</span>) &#123;</span><br><span class="line">            <span class="comment">//[2]</span></span><br><span class="line">            err = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"ENOENT, open '"</span> + filename + <span class="string">"'"</span>)</span><br><span class="line">            err.code = <span class="string">'ENOENT'</span></span><br><span class="line">            err.errno = <span class="number">34</span></span><br><span class="line">            err.path = filename</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> callback &amp;&amp; callback(err)</span><br><span class="line">        &#125;</span><br><span class="line">        callback &amp;&amp; callback(<span class="literal">null</span>, value) <span class="comment">//[3]</span></span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fs.writeFile = <span class="function">(<span class="params">filename, contents, options, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> options === <span class="string">'function'</span>) &#123;</span><br><span class="line">    callback = options</span><br><span class="line">    options = &#123;&#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> options === <span class="string">'string'</span>) &#123;</span><br><span class="line">    options = &#123; <span class="attr">encoding</span>: options &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  db.put(</span><br><span class="line">    path.resolve(filename),</span><br><span class="line">    contents,</span><br><span class="line">    &#123;</span><br><span class="line">      valueEncoding: options.encoding</span><br><span class="line">    &#125;,</span><br><span class="line">    callback</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> fs</span><br></pre></td></tr></table></figure><h3 id="In-the-wild-2"><a href="#In-the-wild-2" class="headerlink" title="In the wild"></a>In the wild</h3><p><code>LevelUP</code> 能在浏览器中能以不同的存储后端运行，从 <code>LevelDB</code> 到 <code>IndexedDB</code>。这是通过那些适应了内部 <code>LevelUP API</code> 接口的适配器(<code>Adapter</code>)来实现的。具体有哪些实现方式查看 <a href="https://github.com/rvagg/node-levelup/wiki/Modules#storage-back-ends" target="_blank" rel="noopener">https://github.com/rvagg/node-levelup/wiki/Modules#storage-back-ends</a>。</p><h2 id="Strategy-策略模式"><a href="#Strategy-策略模式" class="headerlink" title="Strategy(策略模式)"></a>Strategy(策略模式)</h2><p><img src="/assets/img/strategy.png" alt="Strategy"></p><p>从图中看出该模式其实是根据配置(或用户输入之类)来做不同逻辑的事，都实现了相同的接口。比大量的 <code>if...else</code> 或 <code>swtich</code> 更易懂。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> objectPath = <span class="built_in">require</span>(<span class="string">'object-path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(strategy) &#123;</span><br><span class="line">    <span class="keyword">this</span>.data = &#123;&#125;</span><br><span class="line">    <span class="keyword">this</span>.strategy = strategy</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get(path) &#123;</span><br><span class="line">    <span class="keyword">return</span> objectPath.get(<span class="keyword">this</span>.data, path)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  set(path, value) &#123;</span><br><span class="line">    <span class="keyword">return</span> objectPath.set(<span class="keyword">this</span>.data, path, value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  read(file) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Deserializing from <span class="subst">$&#123;file&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">this</span>.data = <span class="keyword">this</span>.strategy.deserialize(fs.readFileSync(file, <span class="string">'utf-8'</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  save(file) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Serializing to <span class="subst">$&#123;file&#125;</span>`</span>)</span><br><span class="line">    fs.writeFileSync(file, <span class="keyword">this</span>.strategy.serialize(<span class="keyword">this</span>.data))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Config</span><br></pre></td></tr></table></figure><p>上面代码可以传入不同的配置来做不同的序列化与反序列化：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// strategy 1</span></span><br><span class="line"><span class="built_in">module</span>.exports.json = &#123;</span><br><span class="line">  deserialize: <span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">JSON</span>.parse(data),</span><br><span class="line">  serialize: <span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">JSON</span>.stringify(data, <span class="literal">null</span>, <span class="string">'  '</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// strategy 2</span></span><br><span class="line"><span class="keyword">const</span> ini = <span class="built_in">require</span>(<span class="string">'ini'</span>) <span class="comment">// https://npmjs.org/package/ini</span></span><br><span class="line"><span class="built_in">module</span>.exports.ini = &#123;</span><br><span class="line">  deserialize: <span class="function"><span class="params">data</span> =&gt;</span> ini.parse(data),</span><br><span class="line">  serialize: <span class="function"><span class="params">data</span> =&gt;</span> ini.stringify(data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="State-状态模式"><a href="#State-状态模式" class="headerlink" title="State(状态模式)"></a>State(状态模式)</h2><p>状态模式是策略模式的变种，策略模式一旦确定策略在整个过程中策略(也就是处理逻辑不变)，而状态模式可以动态地改变状态来间接地影响策略：</p><p><img src="/assets/img/state.png" alt="State"></p><p>想象一下，我们有一个酒店预订系统和一个 <code>Reservation</code> 对象来模拟房间预订。</p><p>这是一个经典的情况，我们必须根据其状态来调整对象的行为。考虑以下一系列事件：</p><ul><li>当订单初始创建时，用户可以使用 <code>confirm()</code> 方法确认订单；当然，他们不能使用 <code>cancel()</code> 方法取消预约，因为订单还没有被确认。但是，如果他们在购买之前改变主意，他们可以使用 <code>delete()</code> 方法删除它。</li><li>一旦确认订单，再次使用 <code>confirm()</code> 方法没有任何意义；不过，现在应该可以取消预约，但不能再删除，因为要保留对应记录。</li><li>在预约日期前一天，不应取消订单。因为这太迟了。</li></ul><h3 id="Implementing-a-basic-fail-safe-socket-实现一个基本的-fail-safe-socket"><a href="#Implementing-a-basic-fail-safe-socket-实现一个基本的-fail-safe-socket" class="headerlink" title="Implementing a basic fail-safe socket(实现一个基本的 fail-safe socket)"></a>Implementing a basic fail-safe socket(实现一个基本的 fail-safe socket)</h3><p>尝试一个例子，建立一个 <code>socket</code>，当与服务器断开连接时保存客户端的请求，并将这些请求按顺序排队，等到下次重新连接时按照顺序一一请求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file offlineState.js</span></span><br><span class="line"><span class="keyword">const</span> jot = <span class="built_in">require</span>(<span class="string">'json-over-tcp'</span>) <span class="comment">// [1]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="title">OfflineState</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(failsafeSocket) &#123;</span><br><span class="line">    <span class="keyword">this</span>.failsafeSocket = failsafeSocket</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  send(data) &#123;</span><br><span class="line">    <span class="comment">// [2]</span></span><br><span class="line">    <span class="keyword">this</span>.failsafeSocket.queue.push(data)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  activate() &#123;</span><br><span class="line">    <span class="comment">// [3]</span></span><br><span class="line">    <span class="keyword">const</span> retry = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.activate(), <span class="number">500</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.failsafeSocket.socket = jot.connect(</span><br><span class="line">      <span class="keyword">this</span>.failsafeSocket.options,</span><br><span class="line">      () =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.failsafeSocket.socket.removeListener(<span class="string">'error'</span>, retry)</span><br><span class="line">        <span class="keyword">this</span>.failsafeSocket.changeState(<span class="string">'online'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">this</span>.failsafeSocket.socket.once(<span class="string">'error'</span>, retry)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file onlineState.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="title">OnlineState</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(failsafeSocket) &#123;</span><br><span class="line">    <span class="keyword">this</span>.failsafeSocket = failsafeSocket</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  send(data) &#123;</span><br><span class="line">    <span class="comment">// [1]</span></span><br><span class="line">    <span class="keyword">this</span>.failsafeSocket.socket.write(data)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  activate() &#123;</span><br><span class="line">    <span class="comment">// [2]</span></span><br><span class="line">    <span class="keyword">this</span>.failsafeSocket.queue.forEach(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.failsafeSocket.socket.write(data)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.failsafeSocket.queue = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.failsafeSocket.socket.once(<span class="string">'error'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.failsafeSocket.changeState(<span class="string">'offline'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file failsafeSocket.js</span></span><br><span class="line"><span class="keyword">const</span> OfflineState = <span class="built_in">require</span>(<span class="string">'./offlineState'</span>)</span><br><span class="line"><span class="keyword">const</span> OnlineState = <span class="built_in">require</span>(<span class="string">'./onlineState'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FailsafeSocket</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="comment">// [1]</span></span><br><span class="line">    <span class="keyword">this</span>.options = options</span><br><span class="line">    <span class="keyword">this</span>.queue = []</span><br><span class="line">    <span class="keyword">this</span>.currentState = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.socket = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.states = &#123;</span><br><span class="line">      offline: <span class="keyword">new</span> OfflineState(<span class="keyword">this</span>),</span><br><span class="line">      online: <span class="keyword">new</span> OnlineState(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.changeState(<span class="string">'offline'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  changeState(state) &#123;</span><br><span class="line">    <span class="comment">// [2]</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Activating state: '</span> + state)</span><br><span class="line">    <span class="keyword">this</span>.currentState = <span class="keyword">this</span>.states[state]</span><br><span class="line">    <span class="keyword">this</span>.currentState.activate()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  send(data) &#123;</span><br><span class="line">    <span class="comment">// [3]</span></span><br><span class="line">    <span class="keyword">this</span>.currentState.send(data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">options</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> FailsafeSocket(options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FailsafeSocket</code> 从一个状态切换到另一个状态，只是切换了实例，具体的发送方法根据状态来选择，离线则使用 <code>OfflineState</code> 来发送，连接则使用 <code>OnlineState</code> 来发送。</p><h2 id="Template-模板模式"><a href="#Template-模板模式" class="headerlink" title="Template(模板模式)"></a>Template(模板模式)</h2><p>和策略模式差不多，只是需要预先定义变体，使用继承改变原有的方法，注意在 <code>js</code> 中模板类是总是抛出异常的类或未定义的方法(因为一定要有实现类才能使用)。</p><p><img src="/assets/img/template.png" alt="Template"></p><h3 id="In-the-wild-3"><a href="#In-the-wild-3" class="headerlink" title="In the wild"></a>In the wild</h3><p>其实在第五章中流的实现就是用了这种模式，自定义的流需要实现 <code>_read</code> 和 <code>_write</code> 这类的方法。</p><h2 id="Middleware-中间件模式"><a href="#Middleware-中间件模式" class="headerlink" title="Middleware(中间件模式)"></a>Middleware(中间件模式)</h2><h3 id="Middleware-in-Express-Express-中的中间件"><a href="#Middleware-in-Express-Express-中的中间件" class="headerlink" title="Middleware in Express(Express 中的中间件)"></a>Middleware in Express(Express 中的中间件)</h3><p>在 <code>Express</code> 中，中间件表示一组服务，通常是函数，它们被组织在一个 <code>pipeline</code> 中，负责处理传入的 <code>HTTP</code> 请求和进行响应。</p><p>一个 <code>Express</code> 的中间件有下面这种形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>在这里，<code>req</code> 是传入的 <code>HTTP</code> 请求，<code>res</code> 是响应，<code>next</code> 是当前中间件完成其任务时调用的回调，用来触发 <code>pipeline</code> 中的下一个中间件。可能的 <code>Express</code> 中间件任务有:</p><ul><li>解析请求的 <code>body</code></li><li>压缩/解压 <code>req</code> 和 <code>res</code> 对象</li><li>生成访问日志</li><li>管理 <code>sessions</code></li><li>管理加密的 <code>cookie</code></li><li>提供跨站请求伪造（<code>CSRF</code>）保护</li></ul><p>这些都是与应用程序的主要业务逻辑没有严格关联的任务，也不是 Web 服务器最核心的部分；它们是应用程序公共功能的中间件，使得实际的请求处理程序只关注其主要业务逻辑。</p><h3 id="Middleware-as-a-pattern-中间件作为一种模式"><a href="#Middleware-as-a-pattern-中间件作为一种模式" class="headerlink" title="Middleware as a pattern(中间件作为一种模式)"></a>Middleware as a pattern(中间件作为一种模式)</h3><p>其实类似于 <code>Pipe-Filter</code> 模式，通过看一张图更能明白：</p><p><img src="/assets/img/middleware.png" alt="Middleware"></p><p>最重要的就是这个 <code>Middleware Manager</code>，负责组织和执行中间件功能。</p><ol><li>新的中间件通过 <code>use()</code>(一般约定，当然也可以用别的名称) 来注册，一般是管道末尾。</li><li>注册的中间件在异步顺序执行流中被调用，后一个的输入是前一个中间件的输出。</li><li>中间件只负责处理正常流程，错误通常会触发另一个专门的中间件序列。</li></ol><h3 id="Creating-a-middleware-for-OMQ-为-OMQ-创建一个中间件框架"><a href="#Creating-a-middleware-for-OMQ-为-OMQ-创建一个中间件框架" class="headerlink" title="Creating a middleware for ØMQ(为 ØMQ 创建一个中间件框架)"></a>Creating a middleware for ØMQ(为 ØMQ 创建一个中间件框架)</h3><p><code>ØMQ</code>（也称为 <code>ZMQ</code> 或 <code>ZeroMQ</code>）提供了一个简单的接口，用于通过各种协议在网络中交换原子消息；它的性能绝佳，其基本的抽象集是专门构建的，以促进自定义消息体系结构的实现。因此，经常选择 <code>ØMQ</code> 来构建复杂的分布式系统。</p><p>我们将构建一个中间件基础结构，以抽象通过 <code>ØMQ</code> 套接字传递的数据的预处理和后处理，以便我们可以透明地处理 <code>JSON</code> 对象，同时无缝地压缩通过线路传递的消息。</p><h4 id="The-Middleware-Manager-中间件管理器"><a href="#The-Middleware-Manager-中间件管理器" class="headerlink" title="The Middleware Manager(中间件管理器)"></a>The Middleware Manager(中间件管理器)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="title">ZmqMiddlewareManager</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(socket) &#123;</span><br><span class="line">    <span class="keyword">this</span>.socket = socket</span><br><span class="line">    <span class="keyword">this</span>.inboundMiddleware = [] <span class="comment">// [1]</span></span><br><span class="line">    <span class="keyword">this</span>.outboundMiddleware = []</span><br><span class="line">    socket.on(<span class="string">'message'</span>, message =&gt; &#123;</span><br><span class="line">      <span class="comment">// [2]</span></span><br><span class="line">      <span class="keyword">this</span>.executeMiddleware(<span class="keyword">this</span>.inboundMiddleware, &#123;</span><br><span class="line">        data: message</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  send(data) &#123;</span><br><span class="line">    <span class="keyword">const</span> message = &#123;</span><br><span class="line">      data: data</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.executeMiddleware(<span class="keyword">this</span>.outboundMiddleware, message, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.socket.send(message.data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  use(middleware) &#123;</span><br><span class="line">    <span class="keyword">if</span> (middleware.inbound) &#123;</span><br><span class="line">      <span class="keyword">this</span>.inboundMiddleware.push(middleware.inbound)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (middleware.outbound) &#123;</span><br><span class="line">      <span class="keyword">this</span>.outboundMiddleware.unshift(middleware.outbound)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  executeMiddleware(middleware, arg, finish) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">iterator</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (index === middleware.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> finish &amp;&amp; finish()</span><br><span class="line">      &#125;</span><br><span class="line">      middleware[index].call(<span class="keyword">this</span>, arg, err =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="comment">// 这里本应该有对应的错误中间件去处理，为了简洁直接输出</span></span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'There was an error: '</span> + err.message)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 一个中间件处理完参数后，传递给下一个中间件</span></span><br><span class="line">        iterator.call(<span class="keyword">this</span>, ++index)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    iterator.call(<span class="keyword">this</span>, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>管理器接收 <code>ØMQ</code> 套接字作为参数，定义一个近站中间件列表和一个出站中间件列表，当有消息来时依次调用进站中间件(按照 <code>use</code> 的顺序来)，需要发送消息时就依次调用出站中间件，被处理后的参数也是一一传播。</p><h4 id="A-middleware-to-support-JSON-messages-一个支持-JSON-消息的中间件"><a href="#A-middleware-to-support-JSON-messages-一个支持-JSON-消息的中间件" class="headerlink" title="A middleware to support JSON messages(一个支持 JSON 消息的中间件)"></a>A middleware to support JSON messages(一个支持 JSON 消息的中间件)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file jsonMiddleware.js</span></span><br><span class="line"><span class="built_in">module</span>.exports.json = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    inbound: <span class="function"><span class="keyword">function</span>(<span class="params">message, next</span>) </span>&#123;</span><br><span class="line">      message.data = <span class="built_in">JSON</span>.parse(message.data.toString())</span><br><span class="line">      next()</span><br><span class="line">    &#125;,</span><br><span class="line">    outbound: <span class="function"><span class="keyword">function</span>(<span class="params">message, next</span>) </span>&#123;</span><br><span class="line">      message.data = <span class="keyword">new</span> Buffer(<span class="built_in">JSON</span>.stringify(message.data))</span><br><span class="line">      next()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想要使用的时候只需要 <code>use(jsonMiddleware)</code> 就行了，很方便。</p><h4 id="Using-the-OMQ-middleware-framework-使用-OMQ-中间件框架"><a href="#Using-the-OMQ-middleware-framework-使用-OMQ-中间件框架" class="headerlink" title="Using the ØMQ middleware framework(使用 ØMQ 中间件框架)"></a>Using the ØMQ middleware framework(使用 ØMQ 中间件框架)</h4><h5 id="The-server"><a href="#The-server" class="headerlink" title="The server"></a>The server</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> zmq = <span class="built_in">require</span>(<span class="string">'zmq'</span>)</span><br><span class="line"><span class="keyword">const</span> ZmqMiddlewareManager = <span class="built_in">require</span>(<span class="string">'./zmqMiddlewareManager'</span>)</span><br><span class="line"><span class="keyword">const</span> jsonMiddleware = <span class="built_in">require</span>(<span class="string">'./jsonMiddleware'</span>)</span><br><span class="line"><span class="keyword">const</span> reply = zmq.socket(<span class="string">'rep'</span>)</span><br><span class="line">reply.bind(<span class="string">'tcp://127.0.0.1:5000'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> zmqm = <span class="keyword">new</span> ZmqMiddlewareManager(reply)</span><br><span class="line">zmqm.use(jsonMiddleware.json())</span><br></pre></td></tr></table></figure><h5 id="The-client"><a href="#The-client" class="headerlink" title="The client"></a>The client</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> zmq = <span class="built_in">require</span>(<span class="string">'zmq'</span>)</span><br><span class="line"><span class="keyword">const</span> ZmqMiddlewareManager = <span class="built_in">require</span>(<span class="string">'./zmqMiddlewareManager'</span>)</span><br><span class="line"><span class="keyword">const</span> jsonMiddleware = <span class="built_in">require</span>(<span class="string">'./jsonMiddleware'</span>)</span><br><span class="line"><span class="keyword">const</span> request = zmq.socket(<span class="string">'req'</span>)</span><br><span class="line">request.connect(<span class="string">'tcp://127.0.0.1:5000'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> zmqm = <span class="keyword">new</span> ZmqMiddlewareManager(request)</span><br><span class="line">zmqm.use(jsonMiddleware.json())</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理服务器响应的中间件</span></span><br><span class="line">zmqm.use(&#123;</span><br><span class="line">  inbound: <span class="function"><span class="keyword">function</span>(<span class="params">message, next</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Echoed back: '</span>, message.data)</span><br><span class="line">    next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  zmqm.send(&#123;</span><br><span class="line">    action: <span class="string">'ping'</span>,</span><br><span class="line">    echo: <span class="built_in">Date</span>.now()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="Middleware-using-generators-in-Koa-在-Koa-中使用生成器中间件"><a href="#Middleware-using-generators-in-Koa-在-Koa-中使用生成器中间件" class="headerlink" title="Middleware using generators in Koa(在 Koa 中使用生成器中间件)"></a>Middleware using generators in Koa(在 Koa 中使用生成器中间件)</h3><p><code>Koa</code> 不像 <code>Express</code> 一样使用回调函数来完成中间件模式，而是使用生成器(<code>generator</code>)，使用中间件包装核心应用程序，这种形式更像是洋葱一样：</p><p><img src="/assets/img/koa_middleware.png" alt="Koa Middleware"></p><p>我们来看一个官方的例子(<code>ES7</code>)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line"><span class="comment">// x-response-time</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> start = <span class="built_in">Date</span>.now()</span><br><span class="line">  <span class="keyword">await</span> next()</span><br><span class="line">  <span class="keyword">const</span> ms = <span class="built_in">Date</span>.now() - start</span><br><span class="line">  ctx.set(<span class="string">'X-Response-Time'</span>, <span class="string">`<span class="subst">$&#123;ms&#125;</span>ms`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// logger</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> start = <span class="built_in">Date</span>.now()</span><br><span class="line">  <span class="keyword">await</span> next()</span><br><span class="line">  <span class="keyword">const</span> ms = <span class="built_in">Date</span>.now() - start</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;ctx.method&#125;</span> <span class="subst">$&#123;ctx.url&#125;</span> - <span class="subst">$&#123;ms&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// response</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">'Hello World'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>可以发现 <code>response</code> 部分才是核心应用程序部分，只不过被其他的中间件包裹起来了，通过 <code>await</code> 分割。</p><blockquote><p>注意，现在 <code>Koa</code> 已经开始使用 <code>ES7</code> 的语法 <code>async</code>/<code>await</code> 了，详情查看<a href="https://koajs.com" target="_blank" rel="noopener">官方文档</a>。</p></blockquote><h2 id="Command-命令模式"><a href="#Command-命令模式" class="headerlink" title="Command(命令模式)"></a>Command(命令模式)</h2><p>可以认为一个命令(<code>Command</code>)是一个封装了重要的信息以便之后去执行一个特定的动作的对象。我们不直接在主体对象上调用一个方法或一个函数，而是创建一个对象来执行这样一次调用；而实现这个意图将是另一个组件的责任，该组件将意图转化为一系列操作。</p><p><img src="/assets/img/command.png" alt="Command"></p><p>命令模式典型的架构：</p><ul><li><code>Command</code>:这是一个封装了足够的信息去调用方法或函数的对象，就像是定义了一个接口。</li><li><code>Client</code>:创建命令对象并提供给调用者(<code>Invoker</code>)。</li><li><code>Invoker</code>:负责执行目标(<code>Target</code>)上的命令，负责调用 <code>Command</code>。</li><li><code>Target</code>(或 <code>Receiver</code>):调用的主体，它可以是一个对象上的单独的方法或函数。</li></ul><p>命令模式有点：</p><ul><li>命令可以稍后执行。</li><li>命令可以被序列化并在网络上传输。这使得我们可以远程分配任务，通过浏览器传输命令给服务器，创建 <code>RPC</code> 系统等等。</li><li>很容易记录操作历史。</li><li>命令是数据同步和冲突解决某些算法的重要部分。</li><li>定时执行的命令可以取消；命令也可以撤销(<code>undone</code>)。</li><li>命令可以组合起来，用来创建原子事务或实现同时执行一些操作的机制。</li><li>一组命令可以有不同的变化，例如可以删除、插入、分割等等。</li></ul><h3 id="A-flexible-pattern-一个灵活的模式"><a href="#A-flexible-pattern-一个灵活的模式" class="headerlink" title="A flexible pattern(一个灵活的模式)"></a>A flexible pattern(一个灵活的模式)</h3><p>正如上面所说，命令模式可以有很多种实现方式，我们来看看其中几个。</p><h4 id="A-task-pattern-任务模式"><a href="#A-task-pattern-任务模式" class="headerlink" title="A task pattern(任务模式)"></a>A task pattern(任务模式)</h4><p>最简单的方式就是创建一个闭包：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createTask</span>(<span class="params">target, args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    target.apply(<span class="literal">null</span>, args)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种技术允许我们使用单独的组件来控制和调度任务的执行，这在本质上等同于命令模式的调用者(<code>Invoker</code>，其实是同时创建了命令(<code>Command</code>))。</p><h4 id="A-more-complex-command-一个更复杂的命令"><a href="#A-more-complex-command-一个更复杂的命令" class="headerlink" title="A more complex command(一个更复杂的命令)"></a>A more complex command(一个更复杂的命令)</h4><p>我们希望撤销和序列化。命令的目标(<code>Target</code>) 是一个负责发送状态更新的对象:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> statusUpdateService = &#123;</span><br><span class="line">  statusUpdates: &#123;&#125;,</span><br><span class="line">  sendUpdate: <span class="function"><span class="keyword">function</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Status sent: '</span> + status)</span><br><span class="line">    <span class="keyword">let</span> id = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">1000000</span>)</span><br><span class="line">    statusUpdateService.statusUpdates[id] = status</span><br><span class="line">    <span class="keyword">return</span> id</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyUpdate: <span class="function"><span class="params">id</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Status removed: '</span> + id)</span><br><span class="line">    <span class="keyword">delete</span> statusUpdateService.statusUpdates[id]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着创建一个命令来新状态的发布：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSendStatusCmd</span>(<span class="params">service, status</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> postId = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">const</span> command = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    postId = service.sendUpdate(status)</span><br><span class="line">  &#125;</span><br><span class="line">  command.undo = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (postId) &#123;</span><br><span class="line">      service.destroyUpdate(postId)</span><br><span class="line">      postId = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  command.serialize = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      type: <span class="string">'status'</span>,</span><br><span class="line">      action: <span class="string">'post'</span>,</span><br><span class="line">      status: status</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> command</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>command</code> 本身是一个函数，使用目标的方法发送状态更新，附在上面的 <code>undo</code> 函数直接调用目标的 <code>destroyUpdate</code> 函数来完成命令撤销，<code>serialize</code> 函数构建了一个 <code>JSON</code> 对象记录执行命令所需要的重要信息。</p><p>然后再来创建执行者 <code>Invoker</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.history = []</span><br><span class="line">  &#125;</span><br><span class="line">  run(cmd) &#123;</span><br><span class="line">    <span class="keyword">this</span>.history.push(cmd)</span><br><span class="line">    cmd()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Command executed'</span>, cmd.serialize())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行者还可以做一些额外的操作，如记录命令的执行，远程调用，延迟执行命令，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.history = []</span><br><span class="line">  &#125;</span><br><span class="line">  run(cmd) &#123;</span><br><span class="line">    <span class="keyword">this</span>.history.push(cmd)</span><br><span class="line">    cmd()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Command executed'</span>, cmd.serialize())</span><br><span class="line">  &#125;</span><br><span class="line">  delay(cmd, delay) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.run(cmd)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">  runRemotely(cmd) &#123;</span><br><span class="line">    request.post(</span><br><span class="line">      <span class="string">'http://localhost:3000/cmd'</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        json: cmd.serialize()</span><br><span class="line">      &#125;,</span><br><span class="line">      err =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Command executed remotely'</span>, cmd.serialize())</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后编写客户端(<code>Client</code>):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> invoker = <span class="keyword">new</span> Invoker()</span><br><span class="line"><span class="keyword">const</span> command = createSendStatusCmd(statusUpdateService, <span class="string">'HI!'</span>)</span><br><span class="line">invoker.run(command)</span><br><span class="line">invoker.runRemotely(command)</span><br></pre></td></tr></table></figure><blockquote><p>命令模式最好在需要一些复杂的代码来调用目标上的函数或方法时使用，不然只是简单地调用一个方法就显得非常多余了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Design-Patterns-设计模式&quot;&gt;&lt;a href=&quot;#Design-Patterns-设计模式&quot; class=&quot;headerlink&quot; title=&quot;Design Patterns(设计模式)&quot;&gt;&lt;/a&gt;Design Patterns(设计模式)&lt;/h1&gt;&lt;h2 id=&quot;Factory-工厂&quot;&gt;&lt;a href=&quot;#Factory-工厂&quot; class=&quot;headerlink&quot; title=&quot;Factory(工厂)&quot;&gt;&lt;/a&gt;Factory(工厂)&lt;/h2&gt;&lt;h3 id=&quot;A-generic-interface-for-creating-objects-创建对象的通用接口&quot;&gt;&lt;a href=&quot;#A-generic-interface-for-creating-objects-创建对象的通用接口&quot; class=&quot;headerlink&quot; title=&quot;A generic interface for creating objects(创建对象的通用接口)&quot;&gt;&lt;/a&gt;A generic interface for creating objects(创建对象的通用接口)&lt;/h3&gt;&lt;p&gt;调用一个工厂，而不是直接使用 &lt;code&gt;new&lt;/code&gt; 运算符或 &lt;code&gt;Object.create()&lt;/code&gt; 从一个原型创建一个新的对象，在很多方面是非常方便和灵活的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://1016990109.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="http://1016990109.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>《Node.js 设计模式》读书笔记 第五章</title>
    <link href="http://1016990109.github.io/2018/06/29/Node-js-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%BA%94%E7%AB%A0/"/>
    <id>http://1016990109.github.io/2018/06/29/Node-js-设计模式读书笔记-第五章/</id>
    <published>2018-06-29T02:35:28.000Z</published>
    <updated>2018-08-02T07:18:39.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Coding-with-Streams-使用流编程"><a href="#Coding-with-Streams-使用流编程" class="headerlink" title="Coding with Streams(使用流编程)"></a>Coding with Streams(使用流编程)</h1><h2 id="Discovering-the-importance-of-streams-流的重要性"><a href="#Discovering-the-importance-of-streams-流的重要性" class="headerlink" title="Discovering the importance of streams(流的重要性)"></a>Discovering the importance of streams(流的重要性)</h2><h3 id="Buffering-versus-streaming-缓存-vs-流"><a href="#Buffering-versus-streaming-缓存-vs-流" class="headerlink" title="Buffering versus streaming(缓存 vs 流)"></a>Buffering versus streaming(缓存 vs 流)</h3><ul><li><code>Buffering</code>:等到所有数据都收集完了才发送给消费者。</li><li><code>Streaming</code>:实时发送数据到消费者。</li></ul><a id="more"></a><p>我们从几个方面来对比这两种方式：</p><h4 id="Spatial-efficiency-空间效率"><a href="#Spatial-efficiency-空间效率" class="headerlink" title="Spatial efficiency(空间效率)"></a>Spatial efficiency(空间效率)</h4><p>当我们需要去读一个非常大的文件时，比方说数百 MB 或 GB，如果等到文件全部读取完了再返回一个巨大的 <code>buffer</code> 就会很快耗尽内存，在 <code>V8</code> 中 <code>buffer</code> 最大不能超过 <code>0x3FFFFFFF</code>(比 1GB 略小)。</p><blockquote><p>在 64 位系统中，<code>buffer</code> 的最大大小为 <code>2^31 - 1</code>(约 2GB)，书中默认是 32 位系统了，详情可查看官方文档给出的<a href="https://nodejs.org/api/buffer.html#buffer_buffer_constants_max_length" target="_blank" rel="noopener">buffer.constants.MAX_LENGTH</a>。</p></blockquote><h5 id="Gzipping-using-a-buffered-API-使用缓冲-API-压缩"><a href="#Gzipping-using-a-buffered-API-使用缓冲-API-压缩" class="headerlink" title="Gzipping using a buffered API(使用缓冲 API 压缩)"></a>Gzipping using a buffered API(使用缓冲 API 压缩)</h5><p>使用下面代码读一个非常大的文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>)</span><br><span class="line"><span class="keyword">const</span> file = process.argv[<span class="number">2</span>]</span><br><span class="line">fs.readFile(file, (err, buffer) =&gt; &#123;</span><br><span class="line">  zlib.gzip(buffer, (err, buffer) =&gt; &#123;</span><br><span class="line">    fs.writeFile(file + <span class="string">'.gz'</span>, buffer, err =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'File successfully compressed'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node gzip &lt;big file path&gt;</span><br></pre></td></tr></table></figure><p>会抛出异常，<code>RangeError: File size is greater than possible Buffer:0x7FFFFFFF</code>。</p><h5 id="Gzipping-using-streams-使用流压缩"><a href="#Gzipping-using-streams-使用流压缩" class="headerlink" title="Gzipping using streams(使用流压缩)"></a>Gzipping using streams(使用流压缩)</h5><p>使用流 <code>API</code> 来压缩就没有上面的问题了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>)</span><br><span class="line"><span class="keyword">const</span> file = process.argv[<span class="number">2</span>]</span><br><span class="line">fs.createReadStream(file)</span><br><span class="line">  .pipe(zlib.createGzip())</span><br><span class="line">  .pipe(fs.createWriteStream(file + <span class="string">'.gz'</span>))</span><br><span class="line">  .on(<span class="string">'finish'</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'File successfully compressed'</span>))</span><br></pre></td></tr></table></figure><h4 id="Time-efficiency-时间效率"><a href="#Time-efficiency-时间效率" class="headerlink" title="Time efficiency(时间效率)"></a>Time efficiency(时间效率)</h4><p>考虑一个压缩文件并将该文件上传到远程服务器的例子，如果使用 <code>buffer</code> 来实现，那么就需要等待文件全部读完才能开始上传，服务器也要等到完全接收完才能进行下一步处理，这很明显就浪费了很多时间去等待上一步任务的完成，使用 <code>stream</code> 来处理则没有这些瓶颈，可以一步步处理一个数据块而不是全部的数据，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file gzipReceive.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> filename = req.headers.filename</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'File request received: '</span> + filename)</span><br><span class="line">  req</span><br><span class="line">    .pipe(zlib.createGunzip())</span><br><span class="line">    .pipe(fs.createWriteStream(filename))</span><br><span class="line">    .on(<span class="string">'finish'</span>, () =&gt; &#123;</span><br><span class="line">      res.writeHead(<span class="number">201</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></span><br><span class="line">      &#125;)</span><br><span class="line">      res.end(<span class="string">"That's it\n"</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`File saved: <span class="subst">$&#123;filename&#125;</span>`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'Listening'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// file gzipSend.js</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>)</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> file = process.argv[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">const</span> server = process.argv[<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  hostname: server,</span><br><span class="line">  port: <span class="number">3000</span>,</span><br><span class="line">  path: <span class="string">'/'</span>,</span><br><span class="line">  method: <span class="string">'PUT'</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    filename: path.basename(file),</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/octet-stream'</span>,</span><br><span class="line">    <span class="string">'Content-Encoding'</span>: <span class="string">'gzip'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> req = http.request(options, res =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Server response: '</span> + res.statusCode)</span><br><span class="line">&#125;)</span><br><span class="line">fs.createReadStream(file)</span><br><span class="line">  .pipe(zlib.createGzip())</span><br><span class="line">  .pipe(req)</span><br><span class="line">  .on(<span class="string">'finish'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'File successfully sent'</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>使用 <code>stream</code> 更像是流水线，我们用一张图来说明这个问题：</p><p><img src="/assets/img/bufferVSstream.png" alt="buffer vs stream"></p><p>一个文件被处理的过程，它经过以下阶段：</p><ol><li>客户端从文件系统中读取</li><li>客户端压缩数据</li><li>客户端将数据发送到服务器</li><li>服务端接收数据</li><li>服务端解压数据</li><li>服务端将数据写入磁盘</li></ol><p>当我们使用 <code>Streams</code> 时，只要我们收到第一个数据块，流水线就会被启动，而不需要等待整个文件的读取。当有多个块时，就会有多条流水线，每个操作又是异步的，完成任务的顺序就变得不确定了，所以需要保证的就是每个阶段数据块的到达顺序了（还好<code>Node.js</code> 的流已经帮我做好了这件事了）。</p><p>总结：使用 <code>stream</code> 的时间效率也要更高。</p><h4 id="Composability-组合型"><a href="#Composability-组合型" class="headerlink" title="Composability(组合型)"></a>Composability(组合型)</h4><p>其实从前面的代码就可以看到，通过 <code>pipe</code> 函数可以很方便的组合处理函数，也就是使用了我们所熟知的 <code>Pipe-Fillter</code> 模式。</p><p>这种模式可以很方便地组合过滤器，使得代码更加清晰，便于维护，同时也加强了功能模块的复用。</p><h2 id="Getting-started-with-streams-开始使用-streams"><a href="#Getting-started-with-streams-开始使用-streams" class="headerlink" title="Getting started with streams(开始使用 streams)"></a>Getting started with streams(开始使用 streams)</h2><h3 id="Anatomy-of-streams-流的结构"><a href="#Anatomy-of-streams-流的结构" class="headerlink" title="Anatomy of streams(流的结构)"></a>Anatomy of streams(流的结构)</h3><p><code>Node.js</code> 中的流都是下面四种抽象类的实现:</p><ul><li>stream.Readable</li><li>stream.Writable</li><li>stream.Duplex(同时 Readable 和 Writable)</li><li>stream.Transform(Duplex 的扩展)</li></ul><p>每个流同时也是 <code>EventEmitter</code> 的一个实例。实际上 <code>Streams</code> 可以产生几种类型的事件，比如 <code>end</code> 事件会在一个可读的 <code>Streams</code> 完成读取后触发，或者 <code>error</code> 事件在出现错误时触发。</p><blockquote><p>注意在生产环境中最好为 <code>Stream</code> 注册错误事件的监听。</p></blockquote><p><code>Stream</code> 支持两种操作模式：</p><ul><li>二进制模式:以数据块形式（例如 <code>buffers</code> 或 <code>strings</code>）流式传输数据</li><li>对象模式:将流数据视为一系列离散对象（这使得我们几乎可以使用任何 <code>JavaScript</code> 值）</li></ul><h3 id="Readable-streams-可读的流"><a href="#Readable-streams-可读的流" class="headerlink" title="Readable streams(可读的流)"></a>Readable streams(可读的流)</h3><p>一个可读的 <code>Streams</code> 表示一个数据源，在 <code>Node.js</code> 中，它使用 <code>stream</code> 模块中的 <code>Readable</code> 抽象类实现。</p><h4 id="Reading-from-a-stream-从一个流中读数据"><a href="#Reading-from-a-stream-从一个流中读数据" class="headerlink" title="Reading from a stream(从一个流中读数据)"></a>Reading from a stream(从一个流中读数据)</h4><p>从可读 <code>Streams</code> 接收数据有两种方式：<code>non-flowing</code>(<code>paused</code>) 模式和 <code>flowing</code> 模式。</p><h5 id="The-non-flowing-mode-paused"><a href="#The-non-flowing-mode-paused" class="headerlink" title="The non-flowing mode(paused)"></a>The non-flowing mode(paused)</h5><p>从可读的 <code>Streams</code> 中读取数据的默认模式是为其附加一个可读事件侦听器，标识已经有数据可以读了。</p><p>然后，在一个循环中，我们读取所有的数据，直到内部 <code>buffer</code> 被清空。这可以使用 <code>read()</code> 方法完成，该方法同步从内部缓冲区中读取数据，并返回表示数据块的 <code>Buffer</code> 或 <code>String</code> 对象。然后，在一个循环中，我们读取所有的数据，直到内部 <code>buffer</code> 被清空。这可以使用 <code>read()</code> 方法完成，该方法同步从内部缓冲区中读取数据，并返回表示数据块的 <code>Buffer</code> 或 <code>String</code> 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">process.stdin</span><br><span class="line">  .on(<span class="string">'readable'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> chunk</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'New data available'</span>)</span><br><span class="line">    <span class="keyword">while</span> ((chunk = process.stdin.read()) !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`Chunk read: (<span class="subst">$&#123;chunk.length&#125;</span>) "<span class="subst">$&#123;chunk.toString()&#125;</span>"`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .on(<span class="string">'end'</span>, () =&gt; process.stdout.write(<span class="string">'End of stream'</span>))</span><br></pre></td></tr></table></figure><p><code>read()</code> 方法是一个同步操作，它从可读 <code>Streams</code> 的内部 <code>Buffers</code> 区中提取数据块。如果 <code>Streams</code> 在二进制模式下工作，返回的数据块默认为一个 <code>Buffer</code> 对象。当没有数据消费时，<code>read()</code> 会返回 <code>undefined</code>。</p><p>我们也可以尝试将我们的程序与其他程序连接起来;这可以使用管道运算符（|），它将程序的标准输出重定向到另一个程序的标准输入:</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;path to a file&gt; | node readStdin</span><br></pre></td></tr></table></figure><h5 id="The-flowing-mode"><a href="#The-flowing-mode" class="headerlink" title="The flowing mode"></a>The flowing mode</h5><p>另外一种读取流的方式是使用流动模式，给 <code>data</code> 事件添加一个监听，这种模式是一有数据就会推送到这个监听器中:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">process.stdin</span><br><span class="line">  .on(<span class="string">'data'</span>, chunk =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'New data available'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Chunk read: (<span class="subst">$&#123;chunk.length&#125;</span>) "<span class="subst">$&#123;chunk.toString()&#125;</span>"`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .on(<span class="string">'end'</span>, () =&gt; process.stdout.write(<span class="string">'End of stream'</span>))</span><br></pre></td></tr></table></figure><p><code>flowing</code> 模式是旧版 <code>Streams</code> 接口（也称为 <code>Streams1</code>）的继承，这里补充一下从 <code>Stream1</code> 到 <code>Stream3</code> 的比较:</p><h5 id="从-Stream1-到-Stream3"><a href="#从-Stream1-到-Stream3" class="headerlink" title="从 Stream1 到 Stream3"></a>从 Stream1 到 Stream3</h5><ul><li>Stream1 推流</li></ul><p>在最初的流实现中，每次当有数据可用时，都有一个数据事件发生，开发者可以使用 <code>pause()</code> 和 <code>resume()</code> 来控制流，调用 <code>pause()</code> 将引起底层停止发送数据事件的发生。<br>存在的问题:</p><ol><li>暂停 <code>pause()</code> 方法并不暂停，它只是建议 <code>advisory-only</code>。</li><li>无论你是否准备好，’数据’ 事件就立即来了。</li><li>没有办法消费使用指定数量的字节，然后将剩余的交给程序其他部分来处理。</li></ol><ul><li>Stream2 拉流</li></ul><p><code>Node</code> <code>0.10</code> 引入了 <code>Stream2</code>，增加了 <code>Pull</code> 拉方式，也就是从数据流读取时可以采取拉方式，这样解决了以前的问题，流总是从暂停状态开始，通过 <code>read(numBytes)</code> 读取，此外，当数据可用时，一个可读的事件将被触发。</p><p><code>Stream2</code> 预设模式就是拉方式也就是非流动模式，想要转回流动模式只要给 <code>data</code> 事件加上监听就行了。</p><blockquote><p>注意：Flowing/Non-flowing 模式只能择一使用。也就是 <code>data</code> 和 <code>readable</code> 事件监听只能有一个，虽然二者同时监听程序也不会挂掉，但是还是会出现预期之外的现象。</p></blockquote><ul><li>Stream3 混合流</li></ul><p>可以看看<a href="https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_readable_streams" target="_blank" rel="noopener">官方文档</a>对现在可读流的描述。<br>从 <code>Node</code> <code>0.12</code> 开始，<code>Stream</code> 就已经使用这种方式了，可以在 <code>flowing</code> 模式和 <code>paused</code> 模式之间切换，延续至今。</p><p><code>Readable</code> 流初始为 <code>paused</code> 模式，有以下行为会转为 <code>flowing</code> 模式：</p><ul><li>添加 <code>data</code> 事件监听</li><li>调用 <code>stream.resume()</code></li><li>调用 <code>stream.pipe()</code> 将数据发送到一个 <code>Writable Stream</code></li></ul><p>使用下面某一种方法可以切换回 <code>paused</code> 模式：</p><ul><li>如果没有定义过管道，直接调用 <code>stream.pause()</code></li><li>如果有管道定义过，必须先删除所有管道，</li></ul><blockquote><p>注意：移除 <code>data</code> 事件的监听并不会自动切回 <code>paused</code> 模式；如果还有管道没有被移除，调用 <code>stream.pause()</code> 也不能保证就是 <code>paused</code> 模式。</p></blockquote><blockquote><p>注意：在 <code>flowing</code> 模式下如果没有消费者消费数据，那么数据会丢失。举个例子：调用 <code>readable.resume</code> 时没有绑定 <code>data</code> 事件或该事件已被移除，这样数据就丢失了。</p></blockquote><p>推荐使用 <code>stream.pipe()</code> 来处理，这种方式是比较容易处理流数据的。</p><h4 id="Implementing-Readable-streams-实现可读流"><a href="#Implementing-Readable-streams-实现可读流" class="headerlink" title="Implementing Readable streams(实现可读流)"></a>Implementing Readable streams(实现可读流)</h4><p>需要实现 <code>_read([size])</code> 方法，<code>push()</code> 方法将数据放到缓冲区：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stream = <span class="built_in">require</span>(<span class="string">'stream'</span>)</span><br><span class="line"><span class="keyword">const</span> Chance = <span class="built_in">require</span>(<span class="string">'chance'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chance = <span class="keyword">new</span> Chance()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomStream</span> <span class="keyword">extends</span> <span class="title">stream</span>.<span class="title">Readable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="keyword">super</span>(options)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _read(size) &#123;</span><br><span class="line">    <span class="keyword">const</span> chunk = chance.string() <span class="comment">//[1]</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Pushing chunk of size: <span class="subst">$&#123;chunk.length&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">this</span>.push(chunk, <span class="string">'utf8'</span>) <span class="comment">//[2]</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      chance.bool(&#123;</span><br><span class="line">        likelihood: <span class="number">5</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="comment">//[3]</span></span><br><span class="line">      <span class="keyword">this</span>.push(<span class="literal">null</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = RandomStream</span><br></pre></td></tr></table></figure><h3 id="Writable-streams-可写流"><a href="#Writable-streams-可写流" class="headerlink" title="Writable streams(可写流)"></a>Writable streams(可写流)</h3><p>一个可写的 <code>stream</code> 表示一个数据目标点，在 <code>Node.js</code> 中，它使用 <code>stream</code> 模块中的 <code>Writable</code> 抽象类来实现。</p><h4 id="Writing-to-a-stream"><a href="#Writing-to-a-stream" class="headerlink" title="Writing to a stream"></a>Writing to a stream</h4><p><code>writable.write(chunk, [encoding], [callback])</code> 写数据。</p><p><code>writable.end([chunk], [encoding], [callback])</code> 表示没有更多的数据写入了，也就是流的结束，这种情况 <code>callback</code> 相当于给 <code>finish</code> 事件加了个监听。</p><h4 id="Back-pressure-回压"><a href="#Back-pressure-回压" class="headerlink" title="Back-pressure(回压)"></a>Back-pressure(回压)</h4><p>当写入数据比消费该数据要快时，可以先缓冲数据，如果超过某个限制就需要通知 <code>writer</code> 不能再写了。</p><p>内部 <code>buffer</code> 超过 <code>highWaterMark</code> 的限制时，<code>write()</code> 方法会返回 <code>false</code>。</p><p>看一个使用例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Chance = <span class="built_in">require</span>(<span class="string">'chance'</span>)</span><br><span class="line"><span class="keyword">const</span> chance = <span class="keyword">new</span> Chance()</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line">  .createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">generateMore</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//[1]</span></span><br><span class="line">      <span class="keyword">while</span> (</span><br><span class="line">        chance.bool(&#123;</span><br><span class="line">          likelihood: <span class="number">95</span></span><br><span class="line">        &#125;)</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="keyword">const</span> shouldContinue = res.write(</span><br><span class="line">          chance.string(&#123;</span><br><span class="line">            length: <span class="number">16</span> * <span class="number">1024</span> - <span class="number">1</span></span><br><span class="line">          &#125;) <span class="comment">//[2]</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> (!shouldContinue) &#123;</span><br><span class="line">          <span class="comment">//[3]</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'Backpressure'</span>)</span><br><span class="line">          <span class="keyword">return</span> res.once(<span class="string">'drain'</span>, generateMore)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      res.end(<span class="string">'\nThe end...\n'</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'All data was sent'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    generateMore()</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">8080</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'Listening on http://localhost:8080'</span>))</span><br></pre></td></tr></table></figure><blockquote><p>注意当 <code>write()</code> 返回 <code>false</code> 时，跳出函数，等到队列释放后，<code>Writable Stream</code> 会触发一个 <code>drain</code> 事件，这时候再继续启动写入程序继续写入数据。</p></blockquote><h4 id="Implementing-Writabel-streams-实现可写流"><a href="#Implementing-Writabel-streams-实现可写流" class="headerlink" title="Implementing Writabel streams(实现可写流)"></a>Implementing Writabel streams(实现可写流)</h4><p>实现可写流需要实现 <code>_wirte()</code> 方法。</p><p>让我们构建一个可写入的 <code>stream</code>，它接收对象的格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: &lt;path to a file&gt;</span><br><span class="line">  content: &lt;string or buffer&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于每一个对象，我们的 <code>stream</code> 必须将 <code>content</code> 部分保存到在给定路径中创建的文件中。 我们可以立即看到，我们 <code>stream</code> 的输入是对象，而不是 <code>Strings</code> 或 <code>Buffers</code>，这意味着我们的 <code>stream</code> 必须以 <strong>对象模式</strong> 工作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stream = <span class="built_in">require</span>(<span class="string">'stream'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> mkdirp = <span class="built_in">require</span>(<span class="string">'mkdirp'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToFileStream</span> <span class="keyword">extends</span> <span class="title">stream</span>.<span class="title">Writable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>(&#123;</span><br><span class="line">      objectMode: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _write(chunk, encoding, callback) &#123;</span><br><span class="line">    mkdirp(path.dirname(chunk.path), err =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(err)</span><br><span class="line">      &#125;</span><br><span class="line">      fs.writeFile(chunk.path, chunk.content, callback)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = ToFileStream</span><br></pre></td></tr></table></figure><p>传入 <code>options</code> 为 <code>{objectMode: true}</code> 设置可写流为 <strong>对象模式</strong>，接收的其他选项如下：</p><ul><li><code>highWaterMark</code>（默认值是 <code>16KB</code>）：控制 <code>back-pressure</code> 的上限。</li><li><code>decodeStrings</code>（默认为 <code>true</code>）：在字符串传递给 <code>_write()</code> 方法之前，将字符串自动解码为二进制 <code>buffer</code>，<strong>在对象模式下这个参数被忽略</strong>。</li></ul><h3 id="Duplex-streams-复用流，同时可写可读"><a href="#Duplex-streams-复用流，同时可写可读" class="headerlink" title="Duplex streams(复用流，同时可写可读)"></a>Duplex streams(复用流，同时可写可读)</h3><p>同时实现 <code>stream.Readable</code> 和 <code>stream.Writable</code>。</p><p><code>options</code> 和上文提到的都一样，有一个额外的选项 <code>allowHalfOpen</code> (默认是 <code>true</code>)，如果设置为 <code>false</code> 那么当读/写一方关闭时，整个都会关闭。</p><p>常见的 <code>Deplex Stream</code> 就是 <code>net</code> 的 <code>Socket</code>。</p><h3 id="Transform-streams-转换流"><a href="#Transform-streams-转换流" class="headerlink" title="Transform streams(转换流)"></a>Transform streams(转换流)</h3><p>转换流是复用流的扩展，在同时实现了 <code>Readable</code> 和 <code>Writable</code> 的基础上，加了一层转换，</p><p><img src="/assets/img/transform_stream.png" alt="Transform Stream"></p><h4 id="Implementing-Transform-streams-实现转换流"><a href="#Implementing-Transform-streams-实现转换流" class="headerlink" title="Implementing Transform streams(实现转换流)"></a>Implementing Transform streams(实现转换流)</h4><p>我们来实现一个 <code>Transform Stream</code>，它将替换给定所有出现的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file replaceStream.js</span></span><br><span class="line"><span class="keyword">const</span> stream = <span class="built_in">require</span>(<span class="string">'stream'</span>)</span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReplaceStream</span> <span class="keyword">extends</span> <span class="title">stream</span>.<span class="title">Transform</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(searchString, replaceString) &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="keyword">this</span>.searchString = searchString</span><br><span class="line">    <span class="keyword">this</span>.replaceString = replaceString</span><br><span class="line">    <span class="keyword">this</span>.tailPiece = <span class="string">''</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _transform(chunk, encoding, callback) &#123;</span><br><span class="line">    <span class="keyword">const</span> pieces = (<span class="keyword">this</span>.tailPiece + chunk) <span class="comment">//[1]</span></span><br><span class="line">      .split(<span class="keyword">this</span>.searchString)</span><br><span class="line">    <span class="keyword">const</span> lastPiece = pieces[pieces.length - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">const</span> tailPieceLen = <span class="keyword">this</span>.searchString.length - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.tailPiece = lastPiece.slice(-tailPieceLen) <span class="comment">//[2]</span></span><br><span class="line">    pieces[pieces.length - <span class="number">1</span>] = lastPiece.slice(<span class="number">0</span>, -tailPieceLen)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.push(pieces.join(<span class="keyword">this</span>.replaceString)) <span class="comment">//[3]</span></span><br><span class="line">    callback()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _flush(callback) &#123;</span><br><span class="line">    <span class="keyword">this</span>.push(<span class="keyword">this</span>.tailPiece)</span><br><span class="line">    callback()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = ReplaceStream</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ReplaceStream = <span class="built_in">require</span>(<span class="string">'./replaceStream'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rs = <span class="keyword">new</span> ReplaceStream(<span class="string">'World'</span>, <span class="string">'Node.js'</span>)</span><br><span class="line">rs.on(<span class="string">'data'</span>, chunk =&gt; <span class="built_in">console</span>.log(chunk.toString()))</span><br><span class="line"></span><br><span class="line">rs.write(<span class="string">'Hello W'</span>)</span><br><span class="line">rs.write(<span class="string">'orld!'</span>)</span><br><span class="line">rs.end()</span><br></pre></td></tr></table></figure><p>上面代码的思路是将新来的数据块与上次处理后剩下的数据(最大长度为搜索字符串长度减 1，这样长度的字符串是不可能包含搜索字符串的，保证前面的出现的搜索字符串已被处理完)拼接起来，按照搜索字符串分割，最后一片除掉尾部搜索字符串长度减 1 长度的字符串，然后重新拼接处理后的字符串 <code>pieces.join(this.replaceString)</code>，再 <code>push</code> 进可读流，这里是触发 <code>data</code> 事件。</p><h3 id="Connecting-streams-using-pipes-使用管道连接流"><a href="#Connecting-streams-using-pipes-使用管道连接流" class="headerlink" title="Connecting streams using pipes(使用管道连接流)"></a>Connecting streams using pipes(使用管道连接流)</h3><p><code>readable.pipe(writable, [options])</code>，使用管道连接了 <code>Readable Stream</code> 和 <code>Writable Stream</code>，很显然，<code>pipe()</code> 方法将从 <code>Readable Stream</code> 中发出的数据抽取到所提供的 <code>Writable Stream</code> 中，该方法返回作为参数提供的 <code>writable</code>。</p><p>将两个 <code>Streams</code> 连接到一起时，则允许数据自动流向 <code>Wratable Stream</code>，所以不需要调用 <code>read()</code> 或 <code>write()</code> 方法；但最重要的是不需要控制 <code>back-pressure</code>，因为它会自动处理。</p><p>举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ReplaceStream = <span class="built_in">require</span>(<span class="string">'./replaceStream'</span>)</span><br><span class="line">process.stdin</span><br><span class="line">  .pipe(<span class="keyword">new</span> ReplaceStream(process.argv[<span class="number">2</span>], process.argv[<span class="number">3</span>]))</span><br><span class="line">  .pipe(process.stdout)</span><br></pre></td></tr></table></figure><blockquote><p>注意：error 事件不会通过管道自动传播。也就是说</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stream1.pipe(stream2).on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>是不会监听到 <code>stream1</code> 的错误的，要想监听 <code>stream1</code> 的错误只能另外加一个监听函数。</p></blockquote><h4 id="Through-and-form-for-working-with-streams-through-和-form-库"><a href="#Through-and-form-for-working-with-streams-through-和-form-库" class="headerlink" title="Through and form for working with streams(through 和 form 库)"></a>Through and form for working with streams(through 和 form 库)</h4><p>总是去自定义一个流是比较繁琐的，这里提供两个库能简单地创建流：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> transform = through2([options], [_transform], [_flush])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readable = from2([options], _read)</span><br></pre></td></tr></table></figure><h2 id="Asynchorous-control-flow-with-streams-使用流的异步控制流"><a href="#Asynchorous-control-flow-with-streams-使用流的异步控制流" class="headerlink" title="Asynchorous control flow with streams(使用流的异步控制流)"></a>Asynchorous control flow with streams(使用流的异步控制流)</h2><h3 id="Sequential-execution-顺序执行"><a href="#Sequential-execution-顺序执行" class="headerlink" title="Sequential execution(顺序执行)"></a>Sequential execution(顺序执行)</h3><p>默认情况 <code>stream</code> 是顺序处理数据的，这是 <code>Stream</code> 的一个重要属性，可以利用这个属性实现传统的异步控制流：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fromArray = <span class="built_in">require</span>(<span class="string">'from2-array'</span>)</span><br><span class="line"><span class="keyword">const</span> through = <span class="built_in">require</span>(<span class="string">'through2'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatFiles</span>(<span class="params">destination, files, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> destStream = fs.createWriteStream(destination)</span><br><span class="line">  fromArray</span><br><span class="line">    .obj(files) <span class="comment">//[1]</span></span><br><span class="line">    .pipe(</span><br><span class="line">      through.obj(<span class="function">(<span class="params">file, enc, done</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//[2]</span></span><br><span class="line">        <span class="keyword">const</span> src = fs.createReadStream(file)</span><br><span class="line">        src.pipe(</span><br><span class="line">          destStream,</span><br><span class="line">          &#123; <span class="attr">end</span>: <span class="literal">false</span> &#125;</span><br><span class="line">        )</span><br><span class="line">        src.on(<span class="string">'end'</span>, done) <span class="comment">//[3]</span></span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .on(<span class="string">'finish'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="comment">//[4]</span></span><br><span class="line">      destStream.end()</span><br><span class="line">      callback()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = concatFiles</span><br></pre></td></tr></table></figure><ol><li>首先从文件数组创建 <code>Readable Stream</code>。</li><li>创建 <code>Transform Stream</code> 来处理每个文件，对于每个文件创建一个 <code>Readable Stream</code>，通过管道将读取的数据传递给目标 <code>Writable Stream</code>，指定第二个参数 <code>end</code> 为 <code>false</code> 确保处理完每个文件后 <code>Writable Stream</code> 不会被关闭。</li><li>所有文件处理完后，触发 <code>finish</code> 事件，关闭 <code>Writable Stream</code>，调用 <code>concatFiles</code> 的 <code>callback</code>。</li></ol><h3 id="Unordered-parallel-execution-无序并行执行"><a href="#Unordered-parallel-execution-无序并行执行" class="headerlink" title="Unordered parallel execution(无序并行执行)"></a>Unordered parallel execution(无序并行执行)</h3><p>有时候数据块之间没有任何关系，这时候可以并行执行异步任务，这通常发生在 <strong>对象模式</strong> 中，而对于 <strong>二进制模式</strong> 流是非常罕见的。</p><h4 id="Implementing-an-unordered-parallel-stream-实现无序并行流"><a href="#Implementing-an-unordered-parallel-stream-实现无序并行流" class="headerlink" title="Implementing an unordered parallel stream(实现无序并行流)"></a>Implementing an unordered parallel stream(实现无序并行流)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stream = <span class="built_in">require</span>(<span class="string">'stream'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParallelStream</span> <span class="keyword">extends</span> <span class="title">stream</span>.<span class="title">Transform</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(userTransform) &#123;</span><br><span class="line">    <span class="keyword">super</span>(&#123; <span class="attr">objectMode</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="keyword">this</span>.userTransform = userTransform</span><br><span class="line">    <span class="keyword">this</span>.running = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.terminateCallback = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _transform(chunk, enc, done) &#123;</span><br><span class="line">    <span class="keyword">this</span>.running++</span><br><span class="line">    <span class="keyword">this</span>.userTransform(</span><br><span class="line">      chunk,</span><br><span class="line">      enc,</span><br><span class="line">      <span class="keyword">this</span>._onComplete.bind(<span class="keyword">this</span>),</span><br><span class="line">      <span class="keyword">this</span>.push.bind(<span class="keyword">this</span>)</span><br><span class="line">    )</span><br><span class="line">    done()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _flush(done) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.running &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.terminateCallback = done</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      done()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _onComplete(err) &#123;</span><br><span class="line">    <span class="keyword">this</span>.running--</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.emit(<span class="string">'error'</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.running === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.terminateCallback &amp;&amp; <span class="keyword">this</span>.terminateCallback()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = ParallelStream</span><br></pre></td></tr></table></figure><p>这个同步执行流接收一个 <code>userTransform</code> 作为参数，这个是用户规定的异步转换流（用来真实处理流数据的），<code>_transform()</code> 函数中不用等待 <code>userTransform()</code> 执行完成，直接执行 <code>done()</code> 通知改转换已完成，另一方面将 <code>this._onComplete()</code> 传递给 <code>userTransform()</code>，使得在真正的处理完成后调用 <code>this._onComplete()</code>。</p><p>在 <code>Stream</code> 终止前会调用 <code>_flush()</code> 方法，如果这个时候还有异步任务在执行(<code>running &gt; 0</code>)那么将会持有 <code>done</code> 的引用，等到所有异步任务完成调用 <code>this._onComplete()</code> 回调函数时才会调用真实的 <code>done</code> 方法即 <code>this.terminateCallback</code>，调用后会结束 <code>Stream</code>，触发 <code>finish</code> 事件。</p><h4 id="Implementing-a-URL-status-monitoring-application-实现一个-URL-状态监听应用"><a href="#Implementing-a-URL-status-monitoring-application-实现一个-URL-状态监听应用" class="headerlink" title="Implementing a URL status monitoring application(实现一个 URL 状态监听应用)"></a>Implementing a URL status monitoring application(实现一个 URL 状态监听应用)</h4><p>看一个使用上面实现的 <code>Paralle Stream</code> 的一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> split = <span class="built_in">require</span>(<span class="string">'split'</span>)</span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>)</span><br><span class="line"><span class="keyword">const</span> ParallelStream = <span class="built_in">require</span>(<span class="string">'./parallelStream'</span>)</span><br><span class="line"></span><br><span class="line">fs.createReadStream(process.argv[<span class="number">2</span>]) <span class="comment">//[1]</span></span><br><span class="line">  .pipe(split()) <span class="comment">//[2]</span></span><br><span class="line">  .pipe(</span><br><span class="line">    <span class="keyword">new</span> ParallelStream(<span class="function">(<span class="params">url, enc, done, push</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//[3]</span></span><br><span class="line">      <span class="keyword">if</span> (!url) <span class="keyword">return</span> done()</span><br><span class="line">      request.head(url, (err, response) =&gt; &#123;</span><br><span class="line">        push(url + <span class="string">' is '</span> + (err ? <span class="string">'down'</span> : <span class="string">'up'</span>) + <span class="string">'\n'</span>)</span><br><span class="line">        done()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">  .pipe(fs.createWriteStream(<span class="string">'results.txt'</span>)) <span class="comment">//[4]</span></span><br><span class="line">  .on(<span class="string">'finish'</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'All urls were checked'</span>))</span><br></pre></td></tr></table></figure><ol><li>首先，我们通过给定的文件参数创建一个可读的 <code>Streams</code>，便于接下来读取文件。</li><li>我们通过 <code>split</code> 将输入的文件内容输出到一个 <code>Transform Stream</code> 管道中，并且将数据的每一行分成不同的块。</li><li>然后，使用 <code>ParallelStream</code> 来检查 <code>URL</code>，我们发送一个 <code>HEAD</code> 请求然后等待请求的 <code>response</code>。当请求返回时，我们把请求的结果 <code>push</code> 到 <code>stream</code> 中。</li><li>最后，通过管道把结果保存到 <code>results.txt</code> 文件中。</li></ol><h3 id="Unordered-limited-parallel-execution-无序限制并行执行"><a href="#Unordered-limited-parallel-execution-无序限制并行执行" class="headerlink" title="Unordered limited parallel execution(无序限制并行执行)"></a>Unordered limited parallel execution(无序限制并行执行)</h3><p>和第三种中异步控制流实现限制并行执行一样，改变 <code>_transform</code> 如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.running++</span><br><span class="line"><span class="keyword">this</span>.userTransform(</span><br><span class="line">  chunk,</span><br><span class="line">  enc,</span><br><span class="line">  <span class="keyword">this</span>.push.bind(<span class="keyword">this</span>),</span><br><span class="line">  <span class="keyword">this</span>._onComplete.bind(<span class="keyword">this</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.running &lt; <span class="keyword">this</span>.concurrency) &#123;</span><br><span class="line">  done()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.continueCallback = done</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_flush</code> 方法保持不变，更改 <code>_onComplete</code> 方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">_onComplete(err) &#123;</span><br><span class="line">  <span class="keyword">this</span>.running--</span><br><span class="line">  <span class="keyword">if</span>(err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.emit(<span class="string">'error'</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> tmpCallback = <span class="keyword">this</span>.continueCallback</span><br><span class="line">  <span class="keyword">this</span>.continueCallback = <span class="literal">null</span></span><br><span class="line">  tmpCallback &amp;&amp; tmpCallback()</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.running === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.terminateCallback &amp;&amp; <span class="keyword">this</span>.terminateCallback()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可以看出，调用 <code>_transform</code> 需要检查是否达到最大执行任务数，达到则不会立即调用 <code>done</code>，即流处理会阻塞在那里，直到正在执行的任务中某一个结束调用 <code>_onComplete</code> 才会执行 <code>done</code>，这样才能继续处理下一个 <code>chunk</code>。</p><h4 id="Ordered-parallel-execution-有序并行执行"><a href="#Ordered-parallel-execution-有序并行执行" class="headerlink" title="Ordered parallel execution(有序并行执行)"></a>Ordered parallel execution(有序并行执行)</h4><p>对接收顺序有要求的场景下仍然可以使用并行执行，只不过需要对每个任务发出的数据排序（和接收到数据的顺序一致），这里不再累述，可以使用第三方库 <a href="https://npmjs.org/package/through2-parallel" target="_blank" rel="noopener">throught2-parallel</a>。</p><h2 id="Piping-patterns-管道模式"><a href="#Piping-patterns-管道模式" class="headerlink" title="Piping patterns(管道模式)"></a>Piping patterns(管道模式)</h2><h3 id="Combining-streams-组合流"><a href="#Combining-streams-组合流" class="headerlink" title="Combining streams(组合流)"></a>Combining streams(组合流)</h3><p>单个 <code>Stream</code> 使得我们可以复用一条流，那当我们想要复用整条流水线时怎么办，即合并多个 <code>Stream</code> 使得看起来是一整个 <code>Stream</code>，如下图：</p><p><img src="/assets/img/combining_streams.png" alt="Combining Streams"></p><p>从图中可以看出，组合流其实就是 <strong>写入第一个流，然后从最后一个流读</strong>。</p><p>一个组合流通常是一个 <code>Duplex Stream</code>，通过连接第一个流到写入端和连接最后一个流到读取端构建这个复用流。</p><p>我们知道错误在管道中是不能冒泡出去，这就意味着我们得为每一个流都添加一个错误监听，然而组合流实际上是个黑盒，作为一个流错误的聚合器。</p><p>总之，组合流有两个优点：</p><ul><li>管道内部是一个黑盒，对使用者不可见。</li><li>简化了错误管理，因为我们不必为管道中的每个单元附加一个错误侦听器，而只需要给组合流自身附加上就可以了。</li></ul><p>组合流是非常普遍的用法，所以已经有现成的库做了这些封装了，可以看看 <a href="https://www.npmjs.com/package/multipipe" target="_blank" rel="noopener">multipipe</a> 或 <a href="https://www.npmjs.org/package/combine-stream" target="_blank" rel="noopener">combine-stream</a>。</p><h4 id="Implementing-a-combined-stream-实现一个组合流"><a href="#Implementing-a-combined-stream-实现一个组合流" class="headerlink" title="Implementing a combined stream(实现一个组合流)"></a>Implementing a combined stream(实现一个组合流)</h4><p>看一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>)</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>)</span><br><span class="line"><span class="keyword">const</span> combine = <span class="built_in">require</span>(<span class="string">'multipipe'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports.compressAndEncrypt = <span class="function"><span class="params">password</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> combine(zlib.createGzip(), crypto.createCipher(<span class="string">'aes192'</span>, password))</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports.decryptAndDecompress = <span class="function"><span class="params">password</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> combine(crypto.createDecipher(<span class="string">'aes192'</span>, password), zlib.createGunzip())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个组合流是压缩并加密，一个组合流是解密并解压。</p><blockquote><p>注意：<code>compressAndEcrypt</code> 或 <code>decryptAndDecompress</code> 直接监听 <code>error</code> 事件是能监听整个流水线中的任何流错误的，这要得益于组合流的黑盒模式了。</p></blockquote><h3 id="Forking-streams-分流"><a href="#Forking-streams-分流" class="headerlink" title="Forking streams(分流)"></a>Forking streams(分流)</h3><p>我们可以通过将一个 <code>Readable Stream</code> 用管道传输给多个 <code>Writable Stream</code> 来达到分流的目的。</p><p><img src="/assets/img/forking_streams.png" alt="Forking Streams"></p><h4 id="Implementing-a-multiple-checksum-generator-实现一个多重检验生成器"><a href="#Implementing-a-multiple-checksum-generator-实现一个多重检验生成器" class="headerlink" title="Implementing a multiple checksum generator(实现一个多重检验生成器)"></a>Implementing a multiple checksum generator(实现一个多重检验生成器)</h4><p>创建一个工具类用来输出给定文件的 <code>md5</code> 和 <code>sha1</code> 的 <code>hash</code> 值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>)</span><br><span class="line"><span class="keyword">const</span> sha1Stream = crypto.createHash(<span class="string">'sha1'</span>)</span><br><span class="line">sha1Stream.setEncoding(<span class="string">'base64'</span>)</span><br><span class="line"><span class="keyword">const</span> md5Stream = crypto.createHash(<span class="string">'md5'</span>)</span><br><span class="line">md5Stream.setEncoding(<span class="string">'base64'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> inputFile = process.argv[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">const</span> inputStream = fs.createReadStream(inputFile)</span><br><span class="line">inputStream.pipe(sha1Stream).pipe(fs.createWriteStream(inputFile + <span class="string">'.sha1'</span>))</span><br><span class="line">inputStream.pipe(md5Stream).pipe(fs.createWriteStream(inputFile + <span class="string">'.md5'</span>))</span><br></pre></td></tr></table></figure><p>需要注意的是：</p><ul><li><p>当 <code>inputStream</code> 结束时，<code>md5Stream</code> 和 <code>sha1Stream</code> 会自动结束，除非当调用 <code>pipe()</code> 时指定了 <code>end</code> 选项为 <code>false</code>。</p></li><li><p><code>Stream</code> 的两个分支会接受相同的数据块，因此当对数据执行一些副作用的操作时我们必须非常谨慎，因为那样会影响分流的另一个分支。</p></li><li><p>黑盒外会产生回压，来自 <code>inputStream</code> 的数据流的流速会和接收最慢的分支的流速相同。</p></li></ul><h3 id="Merging-streams-合并流"><a href="#Merging-streams-合并流" class="headerlink" title="Merging streams(合并流)"></a>Merging streams(合并流)</h3><p>合并流和分流相对，是将多个 <code>Readable Stream</code> 通过管道输入到一个 <code>Writable Stream</code> 中。</p><p><img src="/assets/img/merging_streams.png" alt="Merging Streams"></p><p>这是一个比较简单的操作，唯一需要注意的是 <code>Writable Stream</code> 的关闭，选项 <code>end</code> 需要设置为 <code>false</code>，否则在一个输入流结束后，写入流也就跟着结束了，尽管另一个输入流还没处理完，需要在所有输入流都被读过之后才能调用 <code>end()</code> 方法。</p><h4 id="Creating-a-tarball-from-multiple-directories-从多个文件夹创建压缩包"><a href="#Creating-a-tarball-from-multiple-directories-从多个文件夹创建压缩包" class="headerlink" title="Creating a tarball from multiple directories(从多个文件夹创建压缩包)"></a>Creating a tarball from multiple directories(从多个文件夹创建压缩包)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tar = <span class="built_in">require</span>(<span class="string">'tar'</span>)</span><br><span class="line"><span class="keyword">var</span> fstream = <span class="built_in">require</span>(<span class="string">'fstream'</span>)</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">var</span> destination = path.resolve(process.argv[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">var</span> sourceA = path.resolve(process.argv[<span class="number">3</span>])</span><br><span class="line"><span class="keyword">var</span> sourceB = path.resolve(process.argv[<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pack = tar.Pack()</span><br><span class="line">pack.pipe(fstream.Writer(destination))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> endCount = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onEnd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (++endCount === <span class="number">2</span>) &#123;</span><br><span class="line">    pack.end()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sourceStreamA = fstream</span><br><span class="line">  .Reader(&#123;</span><br><span class="line">    type: <span class="string">'Directory'</span>,</span><br><span class="line">    path: sourceA</span><br><span class="line">  &#125;)</span><br><span class="line">  .on(<span class="string">'end'</span>, onEnd)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sourceStreamB = fstream</span><br><span class="line">  .Reader(&#123;</span><br><span class="line">    type: <span class="string">'Directory'</span>,</span><br><span class="line">    path: sourceB</span><br><span class="line">  &#125;)</span><br><span class="line">  .on(<span class="string">'end'</span>, onEnd)</span><br><span class="line"></span><br><span class="line">sourceStreamA.pipe(</span><br><span class="line">  pack,</span><br><span class="line">  &#123; <span class="attr">end</span>: <span class="literal">false</span> &#125;</span><br><span class="line">)</span><br><span class="line">sourceStreamB.pipe(</span><br><span class="line">  pack,</span><br><span class="line">  &#123; <span class="attr">end</span>: <span class="literal">false</span> &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>两个源文件通过 <code>pack</code> 压缩到一个流中: <code>node mergeTar dest.tar /path/to/sourceA /path/to/sourceB</code>。</p><p>这种合并是无顺序的，这在某些对象流中是可以接收的，但是二进制流通常就不行了。</p><p>合并流还有一种变种，是按顺序合并流的，一个接一个地合并源 <code>Stream</code>，当前一个结束时，开始发送第二段数据块（就像连接所有源 <code>Stream</code> 的输出一样）。有个 <code>npm</code> 的包 <a href="https://npmjs.org/package/multistream" target="_blank" rel="noopener">multistream</a> 可以处理这种场景。</p><h3 id="Multiplexing-and-demultiplexing-多路复用和多路分解"><a href="#Multiplexing-and-demultiplexing-多路复用和多路分解" class="headerlink" title="Multiplexing and demultiplexing(多路复用和多路分解)"></a>Multiplexing and demultiplexing(多路复用和多路分解)</h3><p>合并流的一种特殊情况是保持各个流在一个共享流中是逻辑分离的，等到到达共享流的出口时又重新分流，这就是多路复用和多路分解：</p><p><img src="/assets/img/multiplexingAndDemultiplexing.png" alt="Multiplexing and Demultiplexing"></p><h4 id="Building-a-remote-logger-创建一个远程日志记录器"><a href="#Building-a-remote-logger-创建一个远程日志记录器" class="headerlink" title="Building a remote logger(创建一个远程日志记录器)"></a>Building a remote logger(创建一个远程日志记录器)</h4><p>假设我们需要将一个程序的标准输出和标准错误都重定向到一个远程服务器，服务器接收后存为两个文件，共享通道是 <code>TCP</code> 连接，需要多路复用的两个渠道是 <code>stdout</code> 和 <code>stderr</code>，我们利用一个叫做 <strong>分组交换</strong> 的技术将数据打包进包中，协议大概是这样，数据被封装成具有以下结构的数据包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 byte Channel ID | 4 bytes Data length | Data</span><br></pre></td></tr></table></figure><h6 id="客户端——多路复用"><a href="#客户端——多路复用" class="headerlink" title="客户端——多路复用"></a>客户端——多路复用</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> child_process = <span class="built_in">require</span>(<span class="string">'child_process'</span>)</span><br><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiplexChannels</span>(<span class="params">sources, destination</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> totalChannels = sources.length</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sources.length; i++) &#123;</span><br><span class="line">    sources[i]</span><br><span class="line">      .on(<span class="string">'readable'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// [1]</span></span><br><span class="line">        <span class="keyword">let</span> chunk</span><br><span class="line">        <span class="keyword">while</span> ((chunk = <span class="keyword">this</span>.read()) !== <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> outBuff = <span class="keyword">new</span> Buffer(<span class="number">1</span> + <span class="number">4</span> + chunk.length) <span class="comment">// [2]</span></span><br><span class="line">          outBuff.writeUInt8(i, <span class="number">0</span>)</span><br><span class="line">          outBuff.writeUInt32BE(chunk.length, <span class="number">1</span>)</span><br><span class="line">          chunk.copy(outBuff, <span class="number">5</span>)</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'Sending packet to channel: '</span> + i)</span><br><span class="line">          destination.write(outBuff) <span class="comment">// [3]</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="comment">//[4]</span></span><br><span class="line">        <span class="keyword">if</span> (--totalChannels === <span class="number">0</span>) &#123;</span><br><span class="line">          destination.end()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现 <code>multiplexChannels()</code> 方法接收多个源，监听每个源，使用 <code>non-flowing</code>(<code>paused</code>) 模式读取流数据，写入包结构（<code>Channel ID</code> 为流在源数组中的下标），然后都往远程流中写数据，完成多路复用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">const</span> socket = net.connect(</span><br><span class="line">  <span class="number">3000</span>,</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    <span class="comment">// [1]</span></span><br><span class="line">    <span class="keyword">const</span> child = child_process.fork(</span><br><span class="line">      <span class="comment">// [2]</span></span><br><span class="line">      process.argv[<span class="number">2</span>],</span><br><span class="line">      process.argv.slice(<span class="number">3</span>),</span><br><span class="line">      &#123;</span><br><span class="line">        silent: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    multiplexChannels([child.stdout, child.stderr], socket) <span class="comment">// [3]</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="服务端——多路分解"><a href="#服务端——多路分解" class="headerlink" title="服务端——多路分解"></a>服务端——多路分解</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demultiplexChannel</span>(<span class="params">source, destinations</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> currentChannel = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> currentLength = <span class="literal">null</span></span><br><span class="line">  source</span><br><span class="line">    .on(<span class="string">'readable'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="comment">//[1]</span></span><br><span class="line">      <span class="keyword">let</span> chunk</span><br><span class="line">      <span class="keyword">if</span> (currentChannel === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//[2]</span></span><br><span class="line">        chunk = source.read(<span class="number">1</span>)</span><br><span class="line">        currentChannel = chunk &amp;&amp; chunk.readUInt8(<span class="number">0</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (currentLength === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//[3]</span></span><br><span class="line">        chunk = source.read(<span class="number">4</span>)</span><br><span class="line">        currentLength = chunk &amp;&amp; chunk.readUInt32BE(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> (currentLength === <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      chunk = source.read(currentLength) <span class="comment">//[4]</span></span><br><span class="line">      <span class="keyword">if</span> (chunk === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Received packet from: '</span> + currentChannel)</span><br><span class="line"></span><br><span class="line">      destinations[currentChannel].write(chunk) <span class="comment">//[5]</span></span><br><span class="line">      currentChannel = <span class="literal">null</span></span><br><span class="line">      currentLength = <span class="literal">null</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="comment">//[6]</span></span><br><span class="line">      destinations.forEach(<span class="function"><span class="params">destination</span> =&gt;</span> destination.end())</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Source channel closed'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>我们开始使用 <code>non-flowing</code>(<code>paused</code>) 模式从流中读取数据。</li><li>首先，如果我们还没有读取 <code>Channel ID</code>，我们尝试从流中读取 1 个字节，然后将其转换为 <code>Channel ID</code>。</li><li>下一步是读取数据块的长度。我们需要读取 4 个字节，所以有可能在内部 <code>Buffer</code> 还没有足够的数据，这将导致 <code>this.read()</code> 调用返回 <code>null</code>。在这种情况下，我们只是中断解析，然后重试下一个 <code>readable</code> 事件。</li><li>当知道了数据长度后，就知道要从内部 <code>Buffer</code> 中拉出多少数据了，所以我们尝试读取所有数据。</li><li>当我们读取所有的数据时，我们可以把它写到正确的目标通道，一定要记得重置 <code>currentChannel</code> 和 <code>currentLength</code> 变量（这些变量将被用来解析下一个数据包）。</li><li>最后，当所有的源流结束时，一定不要忘记调用所有目标流的 <code>end()</code> 方法来结束目标流。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务端代码</span></span><br><span class="line">net</span><br><span class="line">  .createServer(<span class="function"><span class="params">socket</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> stdoutStream = fs.createWriteStream(<span class="string">'stdout.log'</span>)</span><br><span class="line">    <span class="keyword">const</span> stderrStream = fs.createWriteStream(<span class="string">'stderr.log'</span>)</span><br><span class="line">    demultiplexChannel(socket, [stdoutStream, stderrStream])</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'Server started'</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Coding-with-Streams-使用流编程&quot;&gt;&lt;a href=&quot;#Coding-with-Streams-使用流编程&quot; class=&quot;headerlink&quot; title=&quot;Coding with Streams(使用流编程)&quot;&gt;&lt;/a&gt;Coding with Streams(使用流编程)&lt;/h1&gt;&lt;h2 id=&quot;Discovering-the-importance-of-streams-流的重要性&quot;&gt;&lt;a href=&quot;#Discovering-the-importance-of-streams-流的重要性&quot; class=&quot;headerlink&quot; title=&quot;Discovering the importance of streams(流的重要性)&quot;&gt;&lt;/a&gt;Discovering the importance of streams(流的重要性)&lt;/h2&gt;&lt;h3 id=&quot;Buffering-versus-streaming-缓存-vs-流&quot;&gt;&lt;a href=&quot;#Buffering-versus-streaming-缓存-vs-流&quot; class=&quot;headerlink&quot; title=&quot;Buffering versus streaming(缓存 vs 流)&quot;&gt;&lt;/a&gt;Buffering versus streaming(缓存 vs 流)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Buffering&lt;/code&gt;:等到所有数据都收集完了才发送给消费者。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Streaming&lt;/code&gt;:实时发送数据到消费者。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://1016990109.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《Node.js 设计模式》读书笔记 第四章</title>
    <link href="http://1016990109.github.io/2018/06/23/Node-js-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%9B%9B%E7%AB%A0/"/>
    <id>http://1016990109.github.io/2018/06/23/Node-js-设计模式读书笔记-第四章/</id>
    <published>2018-06-23T02:05:34.000Z</published>
    <updated>2018-07-05T03:06:42.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Asynchronous-Control-Flow-Patterns-with-ES2015-and-Beyond-使用-ES2015-以上异步控制流模式"><a href="#Asynchronous-Control-Flow-Patterns-with-ES2015-and-Beyond-使用-ES2015-以上异步控制流模式" class="headerlink" title="Asynchronous Control Flow Patterns with ES2015 and Beyond(使用 ES2015 以上异步控制流模式)"></a>Asynchronous Control Flow Patterns with ES2015 and Beyond(使用 ES2015 以上异步控制流模式)</h1><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p><code>Promise</code> 是一种抽象的对象，我们通常允许函数返回一个名为 <code>Promise</code> 的对象，它表示异步操作的最终结果。通常情况下，我们说当异步操作尚未完成时，我们说 <code>Promise</code> 对象处于 <code>pending</code> 状态，当操作成功完成时，我们说 <code>Promise</code> 对象处于 <code>fulfilled</code> 状态，当操作错误终止时，我们说 <code>Promise</code> 对象处于 <code>rejected</code> 状态。一旦 <code>Promise</code> 处于 <code>fulfilled</code> 或 <code>rejected</code>，我们认为当前异步操作结束。</p><a id="more"></a><p>接收异步操作的结果（<code>settled</code>）使用 <code>then</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">promise.then([onFulfilled], [onRejected])</span><br></pre></td></tr></table></figure><p>使用 <code>then</code> 后就不必像 <code>CPS</code> 风格代码那样多重嵌套了，而是像这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">asyncOperation(arg).then(</span><br><span class="line">  result =&gt; &#123;</span><br><span class="line">    <span class="comment">// 错误处理</span></span><br><span class="line">  &#125;,</span><br><span class="line">  err =&gt; &#123;</span><br><span class="line">    <span class="comment">// 正常结果处理</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>then</code> 方法同步返回另一个 <code>Promise</code>，<code>onFulfilled</code> 或 <code>onRejected</code> 返回的 <code>x</code> 不同时 <code>then</code> 方法返回的 <code>Promise</code> 也会不同：</p><ul><li>如果 <code>x</code> 是一个值，则这个 <code>Promise</code> 对象会正确处理 <code>resolve(x)</code></li><li>如果 <code>x</code> 是一个 <code>Promise</code> 对象或 <code>thenable</code>，则会正确处理 <code>x</code> 的处理后的结果 <code>resolve(x_fulfilled)</code></li><li>如果 x 是一个异常，则会捕获异常 <code>reject(x)</code></li></ul><p><code>Promise</code> 始终是异步的，就算直接同步地 <code>resolve</code> 也是一样，这能很好地避免 <a href="https://github.com/oren/oren.github.io/blob/master/posts/zalgo.md" target="_blank" rel="noopener"><code>Zalgo</code></a>。</p><p>处理过程中抛出异常那么 <code>then</code> 返回的 <code>Promise</code> 会自动 <code>reject</code>，这个异常被作为 <code>reject</code> 的原因。</p><p><a href="https://promisesaplus.com" target="_blank" rel="noopener"><code>Promises/A+</code></a> 规范描述了 <code>then</code> 方法的行为，使得不同库的 <code>Promise</code> 能够兼容。</p><h3 id="Promise-A-implementations-Promise-A-规范实现"><a href="#Promise-A-implementations-Promise-A-规范实现" class="headerlink" title="Promise/A+ implementations(Promise/A+ 规范实现)"></a>Promise/A+ implementations(Promise/A+ 规范实现)</h3><p>有很多实现了 <code>Promise/A+</code> 规范的库，但是目前基本上都用 <code>ES2015</code> 的 <code>Promise</code> 了，这个 <code>Promise</code> 是没有在标准上新加其他功能的。</p><p><code>API</code> 可查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">官方文档</a></p><h3 id="Promisifying-a-Node-js-style-function-使一个函数-Promise-化"><a href="#Promisifying-a-Node-js-style-function-使一个函数-Promise-化" class="headerlink" title="Promisifying a Node.js style function(使一个函数 Promise 化)"></a>Promisifying a Node.js style function(使一个函数 Promise 化)</h3><p>并不是所有的异步函数和库都支持 <code>promise</code>，有的时候得将一个基于回调的函数转换为返回 <code>Promise</code> 的函数，这个过程被称为 <code>Promise化</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.promisify = <span class="function"><span class="keyword">function</span>(<span class="params">callbackBasedApi</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">promisified</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> args = [].slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      args.push(<span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">          resolve(result)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve([].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      callbackBasedApi.apply(<span class="literal">null</span>, args)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个函数能把本来是基于 <code>callback</code> 的异步回调函数改为 <code>Promise</code> 风格的函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promisify = <span class="built_in">require</span>(<span class="string">'./promisify'</span>).promisify</span><br><span class="line"><span class="keyword">let</span> newCallbackBaseApi = promisify(<span class="function">(<span class="params">input, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> callback(<span class="literal">null</span>, input + <span class="number">1</span>), <span class="number">100</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">newCallbackBaseApi(<span class="number">999</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure><h3 id="Sequential-execution-顺序执行"><a href="#Sequential-execution-顺序执行" class="headerlink" title="Sequential execution(顺序执行)"></a>Sequential execution(顺序执行)</h3><h4 id="Sequential-iteration-顺序迭代"><a href="#Sequential-iteration-顺序迭代" class="headerlink" title="Sequential iteration(顺序迭代)"></a>Sequential iteration(顺序迭代)</h4><p>更改上一章爬虫程序：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spiderLinks</span>(<span class="params">currentUrl, body, nesting</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> promise = <span class="built_in">Promise</span>.resolve()</span><br><span class="line">  <span class="keyword">if</span> (nesting === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> promise</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> links = utilities.getPageLinks(currentUrl, body)</span><br><span class="line">  links.forEach(<span class="function"><span class="params">link</span> =&gt;</span> &#123;</span><br><span class="line">    promise = promise.then(<span class="function"><span class="params">()</span> =&gt;</span> spider(link, nesting - <span class="number">1</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> promise</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建一个 <code>resolve</code> 了 <code>undefined</code> 的 <code>Promise</code>，再将需要顺序执行的异步函数一个个按顺序填入 <code>then</code> 即完成了。等到最后一个 <code>then</code> 函数 <code>resolve</code> 了结果后整个顺序任务也就全部完成了。</p><h4 id="Sequential-iteration-the-pattern-顺序迭代模式"><a href="#Sequential-iteration-the-pattern-顺序迭代模式" class="headerlink" title="Sequential iteration - the pattern(顺序迭代模式)"></a>Sequential iteration - the pattern(顺序迭代模式)</h4><p>写一个通用的顺序处理任务模型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tasks = [</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">let</span> promise = tasks.reduce(<span class="function">(<span class="params">prev, task</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> prev.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> task()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="built_in">Promise</span>.resolve())</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//All tasks completed</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>通过这种模式，我们可以将所有任务的结果收集到一个数组中，我们可以实现一个 <code>mapping</code> 算法，或者构建一个 <code>filter</code> 等等。</p><h3 id="Parallel-execution-并行执行"><a href="#Parallel-execution-并行执行" class="headerlink" title="Parallel execution(并行执行)"></a>Parallel execution(并行执行)</h3><p><code>Promise.all()</code> 并行执行多个异步任务。</p><h3 id="Limited-parallel-execution-限制并行执行任务数"><a href="#Limited-parallel-execution-限制并行执行任务数" class="headerlink" title="Limited parallel execution(限制并行执行任务数)"></a>Limited parallel execution(限制并行执行任务数)</h3><p>限制并行任务数可以简单地实现一个 <code>TaskQueue</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskQueue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(concurrency) &#123;</span><br><span class="line">    <span class="keyword">this</span>.concurrency = concurrency</span><br><span class="line">    <span class="keyword">this</span>.running = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.queue = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pushTask(task) &#123;</span><br><span class="line">    <span class="keyword">this</span>.queue.push(task)</span><br><span class="line">    <span class="keyword">this</span>.next()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  next() &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">this</span>.running &lt; <span class="keyword">this</span>.concurrency &amp;&amp; <span class="keyword">this</span>.queue.length) &#123;</span><br><span class="line">      <span class="keyword">const</span> task = <span class="keyword">this</span>.queue.shift()</span><br><span class="line">      task().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.running--</span><br><span class="line">        <span class="keyword">this</span>.next()</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">this</span>.running++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要将任务放到队列里就行了，然后开始 <code>next()</code>。</p><h3 id="Exposing-callbacks-and-promises-in-public-APIs-在公共-API-中暴露回调函数和-Promise"><a href="#Exposing-callbacks-and-promises-in-public-APIs-在公共-API-中暴露回调函数和-Promise" class="headerlink" title="Exposing callbacks and promises in public APIs(在公共 API 中暴露回调函数和 Promise)"></a>Exposing callbacks and promises in public APIs(在公共 API 中暴露回调函数和 Promise)</h3><p><code>Promise</code> 固然有它的优点——易于理解和容易处理结果（<code>resolve</code>或<code>reject</code>），但是这要求开发者理解其中的原理，所以有些时候开发者更愿意使用回调函数模式。</p><p>像 <code>request</code> <code>redis</code> <code>mysql</code> 就使用回调函数的方式提供 <code>API</code>，<code>mongoose</code> <code>sequelize</code> 既支持回调函数的方式，又支持 <code>Promise</code> 的方式（不传回调函数时返回一个 <code>Promise</code>）。</p><p>最好是同时提供两种方式，这样方便开发者选择自己熟悉或者需要的方式，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">asyncDivision</span>(<span class="params">dividend, divisor, cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// [1]</span></span><br><span class="line">    process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = dividend / divisor</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">isNaN</span>(result) || !<span class="built_in">Number</span>.isFinite(result)) &#123;</span><br><span class="line">        <span class="keyword">const</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Invalid operands'</span>)</span><br><span class="line">        <span class="keyword">if</span> (cb) &#123;</span><br><span class="line">          cb(error) <span class="comment">// [2]</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reject(error)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (cb) &#123;</span><br><span class="line">        cb(<span class="literal">null</span>, result) <span class="comment">// [3]</span></span><br><span class="line">      &#125;</span><br><span class="line">      resolve(result)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 回调函数的方式</span></span><br><span class="line">asyncDivision(<span class="number">10</span>, <span class="number">2</span>, (error, result) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.error(error)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise化的调用方式</span></span><br><span class="line">asyncDivision(<span class="number">22</span>, <span class="number">11</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result))</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.error(error))</span><br></pre></td></tr></table></figure><p>可以发现这种异步函数是默认返回一个 <code>Promise</code> 的，但是在异步处理完操作会判断回调函数是否已经传入，传入时会调用 <code>cb(null, result)</code> 或 <code>cb(error)</code>，然后始终都执行 <code>Promise</code> 需要的 <code>resolve</code> 或 <code>reject</code>。</p><h2 id="Generator-生成器"><a href="#Generator-生成器" class="headerlink" title="Generator(生成器)"></a>Generator(生成器)</h2><h3 id="The-basics-of-generators-生成器基础"><a href="#The-basics-of-generators-生成器基础" class="headerlink" title="The basics of generators(生成器基础)"></a>The basics of generators(生成器基础)</h3><p>在 <code>function</code> 后面加上 <code>*</code> 就是声明生成器函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">makeGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>makeGenerator()</code> 函数内部，使用关键字 <code>yield</code> 暂停执行并返回给调用者值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">makeGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'Hello World'</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Re-entered'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>makeGenerator()</code> 函数本质上是一个工厂，它在被调用时返回一个新的 <code>Generator</code> 对象:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gen = makeGenerator()</span><br></pre></td></tr></table></figure><p><code>next()</code> 函数用于启动/恢复 <code>Generator</code> 函数，并返回如下格式对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  value: &lt;yielded value&gt;</span><br><span class="line">  done: &lt;true if the execution reached the end&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Generators-as-iterators-生成器函数作为迭代器"><a href="#Generators-as-iterators-生成器函数作为迭代器" class="headerlink" title="Generators as iterators(生成器函数作为迭代器)"></a>Generators as iterators(生成器函数作为迭代器)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">iteratorGenerator</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">yield</span> arr[i]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> iterator = iteratorGenerator([<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'watermelon'</span>])</span><br><span class="line"><span class="keyword">let</span> currentItem = iterator.next()</span><br><span class="line"><span class="keyword">while</span> (!currentItem.done) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(currentItem.value)</span><br><span class="line">  currentItem = iterator.next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码会输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apple</span><br><span class="line">orange</span><br><span class="line">watermelon</span><br></pre></td></tr></table></figure><p>每次 <code>yield</code> 会暂停生成器函数并返回一个值，<code>next</code> 会恢复生成器函数的执行，恢复的时候的状态与暂停时候的状态一致。</p><h4 id="Passing-values-back-to-a-generator-传值给生成器函数"><a href="#Passing-values-back-to-a-generator-传值给生成器函数" class="headerlink" title="Passing values back to a generator(传值给生成器函数)"></a>Passing values back to a generator(传值给生成器函数)</h4><p>想要传递值给 <code>Generator</code> 只需要添加 <code>next</code> 的参数就行了，传递的值会赋予给 <code>yield</code> 的返回值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">twoWayGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> what = <span class="keyword">yield</span> <span class="literal">null</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + what)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> twoWay = twoWayGenerator()</span><br><span class="line">twoWay.next()</span><br><span class="line">twoWay.next(<span class="string">'world'</span>)</span><br></pre></td></tr></table></figure><p>第一个 <code>next</code> 启动 <code>Generator</code>，接着 <code>yield</code> 暂定函数执行，再然后 <code>next(&#39;world&#39;)</code> 恢复函数执行并传递值 <code>world</code> 给 <code>Generator</code>，<code>yield</code> 收到该参数作为返回值返回（<code>what</code> 的值为 world）。</p><blockquote><p>注意也可以返回一个异常，<code>next(new Error())</code>，这个错误就像是在生成器中抛出的一样，可以使用 <code>try...catch</code> 捕获。</p></blockquote><h3 id="Asynchoronous-control-flow-with-generators-使用生成器做异步控制流"><a href="#Asynchoronous-control-flow-with-generators-使用生成器做异步控制流" class="headerlink" title="Asynchoronous control flow with generators(使用生成器做异步控制流)"></a>Asynchoronous control flow with generators(使用生成器做异步控制流)</h3><p>直接看代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncFlow</span>(<span class="params">generatorFunction</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> generator.throw(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> results = [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">    generator.next(results.length &gt; <span class="number">1</span> ? results : results[<span class="number">0</span>])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> generator = generatorFunction(callback)</span><br><span class="line">  generator.next()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line">asyncFlow(<span class="function"><span class="keyword">function</span>*(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> fileName = path.basename(__filename)</span><br><span class="line">  <span class="keyword">const</span> myself = <span class="keyword">yield</span> fs.readFile(fileName, <span class="string">'utf8'</span>, callback)</span><br><span class="line">  <span class="keyword">yield</span> fs.writeFile(<span class="string">`clone_of_<span class="subst">$&#123;filename&#125;</span>`</span>, myself, callback)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Clone created'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>asyncFlow</code> 接收一个 <code>Generator</code> 函数，这个生成器函数里可以做一些异步的操作，异步操作完成时会调用 <code>asyncFlow</code> 中的 <code>callback</code> 将结果返回或者将错误抛出，不管如何都会被 <code>Generator</code> 函数中获取到（<code>yield</code> 返回值或者 <code>try...catch</code> 捕获异常，上面例子是获取返回值），<code>myself</code> 能拿到 <code>readFile</code> 的结果。</p><p>可以发现使用异步控制流后，可以像同步代码方式那样书写异步代码了，它的原理就是每个异步函数操作完后会恢复 <code>Generator</code> 函数的运行并返回处理的结果值给暂停的地方。</p><blockquote><p>上述异步控制流还有两种变体，一种使用 <code>Promise</code>，另一种使用 <code>thunks</code>。<code>thunk</code> 指的是一个函数，接收原函数中除了回调函数以外的参数，返回一个只接收回调函数的函数，如 <code>fs.readFile()</code>:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFileThunk</span>(<span class="params">filename, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    fs.readFile(filename, options, callback)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两种变种允许我们创建没有回调函数作为参数的 <code>Generator</code>，就像下面(<code>thunk</code>)这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncFlowWithThunks</span>(<span class="params">generatorFunction</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> generator.throw(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> results = [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> thunk = generator.next(results.length &gt; <span class="number">1</span> ? results : results[<span class="number">0</span>])</span><br><span class="line">      .value</span><br><span class="line">    thunk &amp;&amp; thunk(callback)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> generator = generatorFunction()</span><br><span class="line">  <span class="keyword">const</span> thunk = generator.next().value</span><br><span class="line">  thunk &amp;&amp; thunk(callback)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncFlowWithThunks(<span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> fileName = path.basename(__filename)</span><br><span class="line">  <span class="keyword">const</span> myself = <span class="keyword">yield</span> readFileThunk(__filename, <span class="string">'utf8'</span>)</span><br><span class="line">  <span class="keyword">yield</span> writeFileThunk(<span class="string">`clone_of_<span class="subst">$&#123;fileName&#125;</span>`</span>, myself)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Clone created'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>从 <code>generator.next().value</code> 取到 <code>thunk</code> 的返回函数，再将回调函数传入，这样 <code>Generator</code> 函数就不用接收回调函数作为参数了。更详细有关 <code>thunk</code> 的介绍可以移步 <code>Github</code> 的 <a href="https://github.com/thunks/thunks" target="_blank" rel="noopener">thunks</a>。</p><p><code>Promise</code> 也是类似的，使用上面有提到的 <code>promisify</code> 将异步函数转为 <code>Promise</code> 形式，然后类似处理（这里是我自己实现的一个版本）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncFlowWithPromise</span>(<span class="params">generatorFunction</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">processPromise</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    promise</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res) &#123;</span><br><span class="line">          promise = generator.next(res.length &gt; <span class="number">1</span> ? res : res[<span class="number">0</span>]).value</span><br><span class="line">          promise &amp;&amp; processPromise()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">err</span> =&gt;</span> generator.throw(err))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> generator = generatorFunction()</span><br><span class="line">  <span class="keyword">let</span> promise = generator.next().value</span><br><span class="line">  promise &amp;&amp; processPromise()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncFlowWithPromise(<span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// readFilePromise() 生成一个Promise，使用promisify转换而来</span></span><br><span class="line">  <span class="keyword">const</span> fileName = path.basename(__filename)</span><br><span class="line">  <span class="keyword">const</span> myself = <span class="keyword">yield</span> readFilePromise(__filename, <span class="string">'utf8'</span>)</span><br><span class="line">  <span class="keyword">yield</span> writeFilePromise(<span class="string">`clone_of_<span class="subst">$&#123;fileName&#125;</span>`</span>, myself)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Clone created'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="Generator-based-control-flow-using-co-使用-co-的基于-Generator-的控制流"><a href="#Generator-based-control-flow-using-co-使用-co-的基于-Generator-的控制流" class="headerlink" title="Generator-based control flow using co(使用 co 的基于 Generator 的控制流)"></a>Generator-based control flow using co(使用 co 的基于 Generator 的控制流)</h4><p><code>co</code> 已经包含了以上两种形式的异步控制流了，可以支持 5 种 <code>yieldable</code> 的类型：</p><ul><li>Promises</li><li>Thunks (functions)</li><li>array (parallel execution)</li><li>objects (parallel execution)</li><li>Generators and GeneratorFunctions</li></ul><p><code>co</code> 源码的理解可以查看<a href="https://i5ting.github.io/wechat-dev-with-nodejs/async/co.html" target="_blank" rel="noopener">这里</a></p><h4 id="Sequential-execution-顺序执行-1"><a href="#Sequential-execution-顺序执行-1" class="headerlink" title="Sequential execution(顺序执行)"></a>Sequential execution(顺序执行)</h4><p>使用 <code>co</code> 库可以很简单地实现任务的顺序执行，我们更改爬虫程序为下面这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// thunkify 可以将接收回调函数的异步函数变为 thunk，使用 promisify 也是一样的，代码不需要变动</span></span><br><span class="line"><span class="keyword">const</span> thunkify = <span class="built_in">require</span>(<span class="string">'thunkify'</span>)</span><br><span class="line"><span class="keyword">const</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>)</span><br><span class="line"><span class="keyword">const</span> request = thunkify(<span class="built_in">require</span>(<span class="string">'request'</span>))</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> mkdirp = thunkify(<span class="built_in">require</span>(<span class="string">'mkdirp'</span>))</span><br><span class="line"><span class="keyword">const</span> readFile = thunkify(fs.readFile)</span><br><span class="line"><span class="keyword">const</span> writeFile = thunkify(fs.writeFile)</span><br><span class="line"><span class="keyword">const</span> nextTick = thunkify(process.nextTick)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">download</span>(<span class="params">url, filename</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Downloading <span class="subst">$&#123;url&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">yield</span> request(url);</span><br><span class="line">  <span class="keyword">const</span> body = response[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">yield</span> mkdirp(path.dirname(filename));</span><br><span class="line">  <span class="keyword">yield</span> writeFile(filename, body);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Downloaded and saved <span class="subst">$&#123;url&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> body;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">spider</span>(<span class="params">url, nesting</span>) </span>&#123;</span><br><span class="line">  cost filename = utilities.urlToFilename(url);</span><br><span class="line">  <span class="keyword">let</span> body;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    body = <span class="keyword">yield</span> readFile(filename, <span class="string">'utf8'</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err.code !== <span class="string">'ENOENT'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    body = <span class="keyword">yield</span> download(url, filename);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">yield</span> spiderLinks(url, body, nesting);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">spiderLinks</span>(<span class="params">currentUrl, body, nesting</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nesting === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> nextTick();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> links = utilities.getPageLinks(currentUrl, body);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">    <span class="keyword">yield</span> spider(links[i], nesting - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有开始的入口需要调用 co，因为 co 是可以递归处理 yieldable 的数据，Generators 也是 yieldable 的</span></span><br><span class="line">co(<span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> spider(process.argv[<span class="number">2</span>], <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Download complete`</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Parallel-execution-并行执行-1"><a href="#Parallel-execution-并行执行-1" class="headerlink" title="Parallel execution(并行执行)"></a>Parallel execution(并行执行)</h4><p>并行执行就很简单了，将需要并行的任务包装成一个数组就行了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">spiderLinks</span>(<span class="params">currentUrl, body, nesting</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nesting === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> nextTick()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> links = utilities.getPageLinks(currentUrl, body)</span><br><span class="line">  <span class="keyword">const</span> tasks = links.map(<span class="function"><span class="params">link</span> =&gt;</span> spider(link, nesting - <span class="number">1</span>))</span><br><span class="line">  <span class="keyword">yield</span> tasks</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以使用基于回调函数的方式实现并行执行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spiderLinks</span>(<span class="params">currentUrl, body, nesting</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nesting === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> nextTick()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回一个thunk</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">callback</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> completed = <span class="number">0</span>,</span><br><span class="line">      hasErrors = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">const</span> links = utilities.getPageLinks(currentUrl, body)</span><br><span class="line">    <span class="keyword">if</span> (links.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> process.nextTick(callback)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">done</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err &amp;&amp; !hasErrors) &#123;</span><br><span class="line">        hasErrors = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span> callback(err)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (++completed === links.length &amp;&amp; !hasErrors) &#123;</span><br><span class="line">        callback()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">      co(spider(links[i], nesting - <span class="number">1</span>)).then(done)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>spiderLinks</code> 改为上面这种代码后就不再是 <code>Generator</code> 函数了，它返回的是一个 <code>thunk</code>，这样有利于支持其他的基于回调函数或者 <code>Promise</code> 的控制流算法。</p><h4 id="Limited-parallel-execution-限制并行执行"><a href="#Limited-parallel-execution-限制并行执行" class="headerlink" title="Limited parallel execution(限制并行执行)"></a>Limited parallel execution(限制并行执行)</h4><p>这里有几种凡是可以限制并行的任务数：</p><ul><li><code>TaskQueue</code>(基于 <code>Promise</code> 或者 <code>callback</code>)</li><li>使用库，<code>async</code> 或者 <code>co-limiter</code></li><li>自己实现算法（生产者-消费者）</li></ul><p>这里主要看看第三种，直接看修改后的 <code>TaskQueue</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskQueue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(concurrency) &#123;</span><br><span class="line">    <span class="keyword">this</span>.concurrency = concurrency</span><br><span class="line">    <span class="keyword">this</span>.running = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.taskQueue = []</span><br><span class="line">    <span class="keyword">this</span>.consumerQueue = []</span><br><span class="line">    <span class="keyword">this</span>.spawnWorkers(concurrency)</span><br><span class="line">  &#125;</span><br><span class="line">  pushTask(task) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.consumerQueue.length !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.consumerQueue.shift()(<span class="literal">null</span>, task)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.taskQueue.push(task)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  spawnWorkers(concurrency) &#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; concurrency; i++) &#123;</span><br><span class="line">      co(<span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> task = <span class="keyword">yield</span> self.nextTask()</span><br><span class="line">          <span class="keyword">yield</span> task</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  nextTask() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">callback</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.taskQueue.length !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(<span class="literal">null</span>, <span class="keyword">this</span>.taskQueue.shift())</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.consumerQueue.push(callback)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>理解上述代码最好是自己手动去跑一边，一步步 <code>debug</code>，看到是如何进行的。</p><ol><li>第一步初始化 <code>TaskQueue</code>，传入最大并行任务数（假设为 <code>n</code>），这个时候会创建 <code>n</code> 个消费者，也就是通过 <code>nextTask</code> 创建的 <code>callback</code>(在 <code>co</code> 中的 <code>thunkToPromise</code> 中创建的) 函数，<code>nextTask</code> 返回一个 <code>thunk</code> 函数，在 <code>while</code> 循环中 <code>yield self.nextTask()</code> 来执行 <code>thunk</code> 的函数体，这个时候任务队列 <code>taskQueue</code> 还是空的，所以这个消费者会被暂时挂起（被 <code>push</code> 到消费者队列 <code>consumerQueue</code>中），之后该 <code>TaskQueue</code> 等待新任务的到来。</li><li>生产者生产任务，也就是通过 <code>pushTask</code> 生产任务，这个时候判断是否有空闲的消费者，从消费者队列中取出 <code>callback</code>(<code>yield self.nextTask()</code> 时 <code>push</code> 进去的)，执行这个 <code>callback</code> 传入异步任务作为参数。</li><li>收到异步任务后，立即 <code>resolve</code> 掉，接着恢复 <code>Generator</code> 函数的执行，继续执行时 <code>task</code> 能拿到 <code>next(ret)</code> 的参数也就是这个异步任务，接着继续执行这个 <code>task</code>，这个任务结束后又会回到 <code>while</code> 循环取下一个任务执行，以此类推。</li><li>没有多余的消费者时会暂时将任务存到任务队列，等待消费者被释放。</li></ol><h3 id="Async-await-using-Babel-利用-Babel-使用-async-和-await"><a href="#Async-await-using-Babel-利用-Babel-使用-async-和-await" class="headerlink" title="Async await using Babel(利用 Babel 使用 async 和 await)"></a>Async await using Babel(利用 Babel 使用 async 和 await)</h3><p>我们发现，要理解上面那种 <code>Generator</code> 式的代码实在太难了，还好 <code>ES7</code> 规范发布了新的关键字 <code>async</code> 和 <code>await</code>，先来看看这两个关键字是怎么提高代码可读性的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageHtml</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    request(url, <span class="function"><span class="keyword">function</span>(<span class="params">error, response, body</span>) </span>&#123;</span><br><span class="line">      resolve(body)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> html = <span class="keyword">await</span> getPageHtml(<span class="string">'http://google.com'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(html)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Loading...'</span>)</span><br></pre></td></tr></table></figure><p><code>getPageHtml</code> 返回一个 <code>Promise</code>，<code>async</code> 关键字修饰函数表明这个函数是处理异步操作的，并且可以使用 <code>await</code> 关键字了，<code>await</code> 关键字告诉 <code>JavaScript</code> 解释器在执行下面的语句之前要等待 <code>getPageHtml</code> 返回的 <code>Promise</code> 的结果。程序中只有 <code>main</code> 那段代码是异步，其他的还是同步的，所以是先看到 <code>Loading</code> 字样再看到网页的内容的。</p><h4 id="Installing-and-running-Babel-安装并运行-Babel"><a href="#Installing-and-running-Babel-安装并运行-Babel" class="headerlink" title="Installing and running Babel(安装并运行 Babel)"></a>Installing and running Babel(安装并运行 Babel)</h4><p><code>Babel</code> 是一个 <code>JavaScript</code> 编译器(或翻译器)，能够使用语法转换器将高版本的 <code>JavaScript</code> 代码转换成其他 <code>JavaScript</code> 代码。语法转换器允许例如我们书写并使用 <code>ES2015</code>，<code>ES2016</code>，<code>JSX</code> 和其它的新语法，来翻译成往后兼容的代码，在 <code>JavaScript</code> 运行环境如浏览器或 <code>Node.js</code> 中都可以使用 <code>Babel</code>。</p><p>详细的安装与运行参考<a href="https://babeljs.io/docs/en/index.html" target="_blank" rel="noopener">官方文档</a>。</p><p><code>ES7</code> 的语法可以使用 <a href="https://babeljs.io/docs/en/babel-plugin-transform-async-to-generator" target="_blank" rel="noopener">babel-plugin-transform-async-to-generator</a>。</p><h3 id="Comparison-比较"><a href="#Comparison-比较" class="headerlink" title="Comparison(比较)"></a>Comparison(比较)</h3><p>这里是几种处理 <code>JavaScript</code> 异步的方式的比较：</p><table><thead><tr><th>方案</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>原生 js</td><td>不需要额外的库 <br> 性能最高 <br> 兼容性好 <br> 允许简单或更复杂算法的创建</td><td>可能需要更多的代码和相对复杂的算法</td></tr><tr><td>Async 库</td><td>简化常见的控制流模式 <br> 基于 callback 的方式 <br> 较好的性能</td><td>需要额外的库 <br> 不适用于更高级的流控制</td></tr><tr><td>Promises</td><td>简化常见的控制流模式 <br> 鲁棒的 error 处理 <br> ES6 规范一部分 <br>确保 onFulfilled 和 onRejected 延迟调用</td><td>需要将基于 callback 的函数 promisify <br> 带来了较小的性能上的损失</td></tr><tr><td>Generators</td><td>使得非阻塞 API 用起来和阻塞 API 一样 <br> 简化错误处理 <br> ES6 的特征</td><td>需要辅助的流控制库 <br> 需要 callback 或 promise 来实现非顺序流 <br>需要 thunkify 或 promisify 不是基于 generator 的 API</td></tr><tr><td>Async await</td><td>使得非阻塞 API 用起来和阻塞 API 一样 <br> 简单直观的语法</td><td>需要 Babel （为了兼容浏览器，Promise 和 Generators 也要用 Babel）</td></tr></tbody></table><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实我个人建议是使用 <code>async await</code> 的方式的，这种方式使得代码看起来十分清爽，比原生 <code>js</code> 要好太多了，而其他的几种太过繁琐，这几种为了兼容浏览器也不得不使用 <code>Babel</code>、<code>polyfill</code>，所以 <code>asycn await</code> 的缺点也就不那么明显了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Asynchronous-Control-Flow-Patterns-with-ES2015-and-Beyond-使用-ES2015-以上异步控制流模式&quot;&gt;&lt;a href=&quot;#Asynchronous-Control-Flow-Patterns-with-ES2015-and-Beyond-使用-ES2015-以上异步控制流模式&quot; class=&quot;headerlink&quot; title=&quot;Asynchronous Control Flow Patterns with ES2015 and Beyond(使用 ES2015 以上异步控制流模式)&quot;&gt;&lt;/a&gt;Asynchronous Control Flow Patterns with ES2015 and Beyond(使用 ES2015 以上异步控制流模式)&lt;/h1&gt;&lt;h2 id=&quot;Promise&quot;&gt;&lt;a href=&quot;#Promise&quot; class=&quot;headerlink&quot; title=&quot;Promise&quot;&gt;&lt;/a&gt;Promise&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Promise&lt;/code&gt; 是一种抽象的对象，我们通常允许函数返回一个名为 &lt;code&gt;Promise&lt;/code&gt; 的对象，它表示异步操作的最终结果。通常情况下，我们说当异步操作尚未完成时，我们说 &lt;code&gt;Promise&lt;/code&gt; 对象处于 &lt;code&gt;pending&lt;/code&gt; 状态，当操作成功完成时，我们说 &lt;code&gt;Promise&lt;/code&gt; 对象处于 &lt;code&gt;fulfilled&lt;/code&gt; 状态，当操作错误终止时，我们说 &lt;code&gt;Promise&lt;/code&gt; 对象处于 &lt;code&gt;rejected&lt;/code&gt; 状态。一旦 &lt;code&gt;Promise&lt;/code&gt; 处于 &lt;code&gt;fulfilled&lt;/code&gt; 或 &lt;code&gt;rejected&lt;/code&gt;，我们认为当前异步操作结束。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://1016990109.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>kryo vs avro vs protobuf vs thrift vs jce</title>
    <link href="http://1016990109.github.io/2018/06/20/kryo-vs-avro-vs-protobuf-vs-thrift-vs-jce/"/>
    <id>http://1016990109.github.io/2018/06/20/kryo-vs-avro-vs-protobuf-vs-thrift-vs-jce/</id>
    <published>2018-06-20T08:16:03.000Z</published>
    <updated>2018-06-22T08:56:16.497Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道结构化数据存储方式多种多样，有 <code>json</code>、<code>xml</code>、<code>kryo</code>等等，而 <code>json</code> 与 <code>xml</code> 虽然可读性较强，但是需要的额外空间太多，当数据量过大的时候很浪费性能，所以就需要压缩率更高的编码方式，这里对比比较流行的几种存储（编码）方式：<code>kryo</code>、<code>avro</code>、<code>protobuf</code>、<code>thrift</code>、<code>jce</code>：</p><a id="more"></a><h2 id="protobuf"><a href="#protobuf" class="headerlink" title="protobuf"></a>protobuf</h2><h3 id="结构化数据："><a href="#结构化数据：" class="headerlink" title="结构化数据："></a>结构化数据：</h3><p>需要预定义结构体（<code>.proto</code> 文件），消息经过序列化后会成为一个二进制数据流，该流中的数据为一系列的 <code>Key-Value</code> 对，定义好结构体的优势就是不用多余的数据来分隔不同的键值对。<code>Key</code> 用来标识具体的 <code>field</code>，在解包的时候，<code>Protocol Buffer</code> 根据 <code>Key</code> 就可以知道相应的 <code>Value</code> 应该对应于消息中的哪一个 <code>field</code>。</p><p><code>Key</code> 定义：(field_number &lt;&lt; 3) | wire_type</p><p><code>field_number</code> 代表在 <code>.proto</code> 中定义的编号，1~15 用一个字节，16~2047 用两个字节，结合公式 （field_number &lt;&lt; 3）| wire_type ，如果 <code>filed_number</code> 大于等于 16，两个字节共 16 位，去掉移位的 3 位，去掉两个字节中第一个比特位(<code>msb</code>)，总共 16 个比特位只有 16-5=11 个比特位用来表示 <code>Key</code>，所以 <code>Key</code> 的 <code>filed_number</code> 要小于 2^11== 2048。</p><p>更大的以此类推，主要就是看一个字节的 <code>msb</code> 是否为 1，最大可以为 2^29 - 1。</p><p><code>wire_type</code> 表示该数据的类型，有 <code>Vaint</code>、<code>64-bit</code>、<code>Length-delimi</code>、<code>Start group</code>、<code>End group</code>、<code>32-bit</code>共 6 中类型，具体可查看<a href="https://developers.google.com/protocol-buffers/docs/encoding#order" target="_blank" rel="noopener">官方文档</a></p><h3 id="Varint"><a href="#Varint" class="headerlink" title="Varint"></a>Varint</h3><p>了解 <code>protobuf</code> 首先就要了解 <code>Varint</code>，是它的一大核心，变长整数存储。长整数存储多的位数，短整数存储少的位数，来减少空间的浪费。除了最后一字节外每字节第一位都是 <code>most significant big</code>(<strong>msb</strong>)，表示是否后面是否还有字节表示该整数。例如：</p><p><code>0000 0001</code> 就表示 1</p><p><code>1010 1100 0000 0010</code> 第一个字节第一位为 1 表示后面还有数据，直到字节第一位为 0（这里就是第二个字节 <code>0000 0010</code>），将字节顺序逆向，变为 <code>0000 0010 010 1100</code>：<code>100101100</code>(300)</p><h3 id="ZigZag"><a href="#ZigZag" class="headerlink" title="ZigZag"></a>ZigZag</h3><p>而有符号整数则使用 <code>ZigZag</code> 编码方式，用无符号的整数同时代表正负两种数：</p><table><thead><tr><th>Signed Original</th><th>Encoded As</th></tr></thead><tbody><tr><td>0</td><td>0</td></tr><tr><td>-1</td><td>1</td></tr><tr><td>1</td><td>2</td></tr><tr><td>-2</td><td>3</td></tr><tr><td>2147483647</td><td>4294967294</td></tr><tr><td>-2147483648</td><td>4294967295</td></tr></tbody></table><p>这样就大大减少了占用的位数，算法使用：</p><p><code>(n &lt;&lt; 1) ^ (n &gt;&gt; 31)</code> sint32<br><code>(n &lt;&lt; 1) ^ (n &gt;&gt; 63)</code> sint64</p><h2 id="float-double"><a href="#float-double" class="headerlink" title="float double"></a>float double</h2><p>不压缩，多少位就多少位存储。</p><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p><code>string</code> 则是在 <code>Value</code> 中多加了一个或多个字节表示长度（<code>msb</code>标识），剩下的内容才是真正的值。</p><h3 id="repeated"><a href="#repeated" class="headerlink" title="repeated"></a>repeated</h3><p>这里介绍压缩率更高的 <code>Packed Repeated Fields</code>。</p><p>在 <code>2.1.0</code> 版本以后，<code>protocol buffers</code> 引入了该种类型，其与 <code>repeated</code> 字段一样，只是在末尾声明了 <code>[packed=true]</code>。类似 <code>repeated</code> 字段却又不同。在 <code>proto3</code> 中 <code>Repeated</code> 字段默认就是以这种方式处理。</p><p>例如有如下 <code>message</code> 类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">message Test4 &#123;  </span><br><span class="line">  repeated int32 d = 4 [packed=true];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造一个 <code>Test4</code> 字段，并且设置 <code>repeated</code> 字段 d 3 个值：3，270 和 86942，编码后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">22 // tag 0010 0010(field number 010 0 = 4, wire type 010 = 2)</span><br><span class="line"></span><br><span class="line">06 // payload size (设置的length = 6 bytes)</span><br><span class="line"></span><br><span class="line">03 // first element (varint 3)</span><br><span class="line"></span><br><span class="line">8E 02 // second element (varint 270)</span><br><span class="line"></span><br><span class="line">9E A7 05 // third element (varint 86942)</span><br></pre></td></tr></table></figure><p>形成了 Tag - Length - Value - Value - Value …… 对，增加了压缩率。</p><h2 id="jce"><a href="#jce" class="headerlink" title="jce"></a>jce</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>也需要定义结构体，头部+内容，与 <code>protobuf</code> 类似，<code>tag + type</code>(4+4) 形式，<code>tag</code> 类似 <code>filed_number</code> 也是超过 15 后继续下一字节，但是由于不是通过第一位标识后面是否有数据，故而之后后面再多一个字节，最大为 255。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tag(4) type(4) [tag(8)]</span><br></pre></td></tr></table></figure><h3 id="int"><a href="#int" class="headerlink" title="int"></a>int</h3><p>直接定义 4 种，而不是变长，int8,int16,int32,int64</p><h3 id="string-1"><a href="#string-1" class="headerlink" title="string"></a>string</h3><p>两种，string1 和 string4，分别表示 8 位代表字符串长度，4*8=32 位表示字符串长度，所以字符串长度最大 2^32 - 1。</p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>存放时分开存放，先存 size（大小），再根据大小存对应个数的 <code>key-value</code>，<code>key</code> 的 <code>tag</code> 为 0，<code>value</code> 的 <code>tag</code> 为 1。</p><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>用不同的 <code>tag</code> 标识开头和结尾即可。<code>protobuf</code> 不需要，是根据定义的 <code>.proto</code> 来自动解析结构体的，类似于 <code>map</code>。</p><h2 id="avro"><a href="#avro" class="headerlink" title="avro"></a>avro</h2><p><code>avro</code> 支持两种编码，一种 <code>json</code> 一种 <code>binary</code>，<code>json</code> 一般用于 <code>Web</code> 应用等需要易读性高的场景，大多数情况下都是二进制编码的。</p><p>同其他高效序列化-反序列化库一样，也是需要定义一个数据结构，只不过是用 <code>json</code> 定义的，内容如下：</p><ul><li>type: 类型（基本的和复杂的）</li><li>name: 字段名称</li><li>其他的一些属性</li></ul><p>详情查看<a href="https://avro.apache.org/docs/1.8.2/spec.html" target="_blank" rel="noopener">官方文档</a></p><p>举个例子：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"record"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"MyStruct"</span>,</span><br><span class="line">  <span class="attr">"fields"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"int"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"id"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"description"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的 <code>json</code> 等价于定义了一个类似于 <code>protobuf</code> 这样的结构体：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Message MyStruct &#123;</span><br><span class="line">  uint32 id = 1,</span><br><span class="line">  string description =2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="int-long"><a href="#int-long" class="headerlink" title="int, long"></a>int, long</h3><p>使用 <code>varlength zigzag</code>，同时使用变长和 <code>zigzag</code>，类似于 <code>protobuf</code>。</p><h3 id="string-array-map"><a href="#string-array-map" class="headerlink" title="string, array, map"></a>string, array, map</h3><p>也是先声明长度，接着才是真正的内容。</p><h2 id="thrift"><a href="#thrift" class="headerlink" title="thrift"></a>thrift</h2><h3 id="int-long-1"><a href="#int-long-1" class="headerlink" title="int, long"></a>int, long</h3><p>先进行 <code>zigzag</code>，再 <code>var int</code>。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>与 <code>avro</code>、<code>protobuf</code>大同小异，具体可查看<a href="https://github.com/apache/thrift/blob/master/doc/specs/thrift-compact-protocol.md" target="_blank" rel="noopener">官方文档</a></p><p><code>map</code> 每个键值对都有 <code>key-type</code> 和 <code>value-type</code>。</p><h2 id="kryo"><a href="#kryo" class="headerlink" title="kryo"></a>kryo</h2><p><code>kryo</code> 是一种快速高效的 <code>Java</code> 对象图（<code>Object graph</code>）序列化框架，要实现跨语言是比较困难的。</p><h3 id="int-long-2"><a href="#int-long-2" class="headerlink" title="int, long"></a>int, long</h3><p>也使用 <code>varint</code> 变长存储，减少空间。</p><h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><p>不像 <code>Java</code> 自带的序列化工具携带了很多信息，<code>kryo</code> 只携带了 <strong>标识+类名+字段</strong> 三部分，更加简单，而且还不用自定义结构体，省去了 <code>.proto</code> 类似文件编写的麻烦。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可以发现高效的序列化库都对 <code>int</code> 和 <code>long</code> 这类整型做了变长的压缩（<code>jce</code> 定义不同长度整型也是变长的一种），而对结构体的存储基本上也是存储 <strong>键值对</strong> ，每一个键值对再标记值的类型，这样能大大压缩数据的空间，提高传输的效率。</p><p>需要预先定义数据格式的有：<code>protobuf</code>、<code>jce</code>、<code>avro</code>、<code>thrift</code>。</p><p>不需要预先定义数据格式的有：<code>kryo</code>。</p><p>跨语言：<code>protobuf</code>、<code>jce</code>、<code>avro</code>、<code>thrift</code>。</p><p>性能上<code>protobuf</code>、<code>jce</code>、<code>avro</code>、<code>thrift</code> 几者差别不大，<code>kryo</code> 序列化和反序列化较慢（但是不用预先定义数据格式，可省去麻烦），但是 <code>kryo</code> 的编码后的大小略微小一点。</p><h3 id="Google-protobuf"><a href="#Google-protobuf" class="headerlink" title="Google protobuf"></a>Google protobuf</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>二进制消息，性能好/效率高（空间和时间效率都很不错）</li><li><code>proto</code> 文件生成目标代码，简单易用</li><li>序列化反序列化直接对应程序中的数据类，不需要解析后在进行映射(<code>XML</code>,<code>JSON</code>都是这种方式)</li><li>支持向前兼容（新加字段采用默认值）和向后兼容（忽略新加字段），简化升级</li><li>支持多种语言（可以把 <code>proto</code> 文件看做 <code>IDL</code> 文件）</li><li><code>Netty</code> 等一些框架集成</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>官方只支持 <code>C++</code>,<code>JAVA</code> 和 <code>Python</code> 语言绑定</li><li>二进制可读性差（貌似提供了 <code>Text_Fromat</code> 功能）</li><li>二进制不具有自描述特性</li><li>默认不具备动态特性（可以通过动态定义生成消息类型或者动态编译支持）</li><li>只涉及序列化和反序列化技术，不涉及 <code>RPC</code> 功能（类似 <code>XML</code> 或者 <code>JSON</code> 的解析器）</li></ul><h3 id="Apache-Thrift"><a href="#Apache-Thrift" class="headerlink" title="Apache Thrift"></a>Apache Thrift</h3><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li>支持非常多的语言绑定</li><li>thrift` 文件生成目标代码，简单易用</li><li>消息定义文件支持注释</li><li>数据结构与传输表现的分离，支持多种消息格式</li><li>包含完整的客户端/服务端堆栈，可快速实现 <code>RPC</code></li><li>支持同步和异步通信</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li>和 <code>protobuf</code> 一样不支持动态特性</li></ul><h3 id="Apache-Avro"><a href="#Apache-Avro" class="headerlink" title="Apache Avro"></a>Apache Avro</h3><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ul><li>二进制消息，性能好/效率高</li><li>使用 <code>JSON</code> 描述模式</li><li>模式和数据统一存储，消息自描述，不需要生成 <code>stub</code> 代码（支持生成 <code>IDL</code>）</li><li><code>RPC</code> 调用在握手阶段交换模式定义</li><li>包含完整的客户端/服务端堆栈，可快速实现 <code>RPC</code></li><li>支持同步和异步通信</li><li>支持动态消息</li><li>模式定义允许定义数据的排序（序列化时会遵循这个顺序）</li><li>提供了基于 <code>Jetty</code> 内核的服务基于 <code>Netty</code> 的服务</li></ul><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><ul><li>只支持 <code>Avro</code> 自己的序列化格式</li><li>语言绑定不如 <code>Thrift</code> 丰富</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道结构化数据存储方式多种多样，有 &lt;code&gt;json&lt;/code&gt;、&lt;code&gt;xml&lt;/code&gt;、&lt;code&gt;kryo&lt;/code&gt;等等，而 &lt;code&gt;json&lt;/code&gt; 与 &lt;code&gt;xml&lt;/code&gt; 虽然可读性较强，但是需要的额外空间太多，当数据量过大的时候很浪费性能，所以就需要压缩率更高的编码方式，这里对比比较流行的几种存储（编码）方式：&lt;code&gt;kryo&lt;/code&gt;、&lt;code&gt;avro&lt;/code&gt;、&lt;code&gt;protobuf&lt;/code&gt;、&lt;code&gt;thrift&lt;/code&gt;、&lt;code&gt;jce&lt;/code&gt;：&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="http://1016990109.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="序列化" scheme="http://1016990109.github.io/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="反序列化" scheme="http://1016990109.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="kryo" scheme="http://1016990109.github.io/tags/kryo/"/>
    
      <category term="avro" scheme="http://1016990109.github.io/tags/avro/"/>
    
      <category term="protobuf" scheme="http://1016990109.github.io/tags/protobuf/"/>
    
      <category term="jce" scheme="http://1016990109.github.io/tags/jce/"/>
    
  </entry>
  
  <entry>
    <title>Node 应用性能优化</title>
    <link href="http://1016990109.github.io/2018/06/13/Node-%E5%BA%94%E7%94%A8%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://1016990109.github.io/2018/06/13/Node-应用性能优化/</id>
    <published>2018-06-13T07:22:18.000Z</published>
    <updated>2018-06-17T18:12:54.660Z</updated>
    
    <content type="html"><![CDATA[<p>在实际 <code>Node.js</code> 应用开发中可能会遇到性能上的瓶颈，在项目比较复杂的时候光阅读代码是很难发现问题所在的，这时候就需要有效的方法来发现瓶颈所在。</p><p>这里介绍一种简单的方法来帮助开发者洞察瓶颈所在，提升 <code>Node.js</code> 应用性能。</p><a id="more"></a><p>这个方法的主要目标就是度量在 <code>Node.js</code> 应用中执行每个函数所花费的 <code>CPU</code> 时间。当然也可以通过对内存的度量来检测内存泄漏，但在本篇文章只介绍对性能上面的优化。</p><h2 id="度量"><a href="#度量" class="headerlink" title="度量"></a>度量</h2><p>谷歌浏览器可以通过 <code>DevTools</code> 来记录每个函数信息和执行时间并将这些东西打进日志文件，来帮助开发者来发现瓶颈。而 <code>Node.js</code> 也有类似的内置工具，就是 <code>--prof</code> 配置，这个可以统计所有函数执行消耗的 <code>CPU</code> 时间片长度。</p><p>先来看个简单的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file test.js</span></span><br><span class="line"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">'cluster'</span>)</span><br><span class="line"><span class="keyword">const</span> cpuNums = <span class="built_in">require</span>(<span class="string">'os'</span>).cpus().length <span class="comment">//我的机器上是8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> clusters = []</span><br><span class="line"><span class="keyword">if</span> (cluster.isMaster) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cpuNums; i++) &#123;</span><br><span class="line">    clusters[i] = cluster.fork()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> n0 = <span class="built_in">parseInt</span>(n / cpuNums)</span><br><span class="line">  <span class="keyword">let</span> s = <span class="number">0</span>,</span><br><span class="line">    t = <span class="number">0</span>,</span><br><span class="line">    start = <span class="built_in">Date</span>.now()</span><br><span class="line">  <span class="keyword">if</span> (cluster.isMaster) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cpuNums; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> worker = clusters[i]</span><br><span class="line">      worker.process.send(<span class="string">`<span class="subst">$&#123;i * n0&#125;</span>|<span class="subst">$&#123;(i + <span class="number">1</span>) * n0&#125;</span>`</span>)</span><br><span class="line">      worker.on(<span class="string">'message'</span>, s0 =&gt; &#123;</span><br><span class="line">        s += <span class="built_in">Number</span>(s0)</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (t === cpuNums) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'time:'</span>, <span class="built_in">Date</span>.now() - start)</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'sum:'</span>, s)</span><br><span class="line">          process.exit(<span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    process.on(<span class="string">'message'</span>, n =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> [start, end] = n.split(<span class="string">'|'</span>),</span><br><span class="line">        s = <span class="number">0</span></span><br><span class="line">      <span class="built_in">console</span>.log(start, end)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="built_in">Number</span>(start); i &lt; <span class="built_in">Number</span>(end); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">4</span> === <span class="number">0</span>) s += i</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">4</span> === <span class="number">1</span>) s -= i</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">4</span> === <span class="number">2</span>) s *= i</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">4</span> === <span class="number">3</span>) s /= i</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'end'</span>)</span><br><span class="line">      process.send(s)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="number">100000000</span>)</span><br></pre></td></tr></table></figure><p>上面的代码的主要功能是将一区间的整数分成几个部分分别对每 4 个数做加减乘除运算，最后将每个部分的结果加合得到最后的结果。可以发现上面代码为了提高性能而使用多个 <code>CPU</code> 核去执行计算任务，想充分利用 <code>CPU</code> 的性能，然而事实并非如此，在我的机器上运行结果如下：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">time: 1369</span><br><span class="line">sum: -23641385.327095307</span><br></pre></td></tr></table></figure><p>再来看看只用一个 <code>CPU</code> 来执行的代码和结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file test2.js</span></span><br><span class="line"><span class="comment">// code</span></span><br><span class="line"><span class="comment">// CPU核共8个，所以这里也分成8分，保持一致性</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="number">0</span>, result = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> start = <span class="built_in">Date</span>.now()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'0 12500000'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; <span class="number">12500000</span>;i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">4</span> === <span class="number">0</span>) s += i</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">4</span> === <span class="number">1</span>) s -= i</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">4</span> === <span class="number">2</span>) s *= i</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">4</span> === <span class="number">3</span>) s /= i</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'end'</span>)</span><br><span class="line"></span><br><span class="line">result += s</span><br><span class="line">s = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'12500000 25000000'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">12500000</span>;i &lt; <span class="number">25000000</span>;i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">4</span> === <span class="number">0</span>) s += i</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">4</span> === <span class="number">1</span>) s -= i</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">4</span> === <span class="number">2</span>) s *= i</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">4</span> === <span class="number">3</span>) s /= i</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'end'</span>)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'87500000 1000000000'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">87500000</span>;i &lt; <span class="number">100000000</span>;i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">4</span> === <span class="number">0</span>) s += i</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">4</span> === <span class="number">1</span>) s -= i</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">4</span> === <span class="number">2</span>) s *= i</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">4</span> === <span class="number">3</span>) s /= i</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'end'</span>)</span><br><span class="line"></span><br><span class="line">result += s</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'time:'</span>, <span class="built_in">Date</span>.now() - start)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sum:'</span>, result)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">time: 541</span><br><span class="line">sum: -23641385.32709531</span><br></pre></td></tr></table></figure><p>可以发现使用了多个 <code>CPU</code> 来执行反而更慢了，这是为啥？我们用上面说的配置来看一下问题出在哪。运行：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node --prof test.js</span><br></pre></td></tr></table></figure><p>执行完后出现一堆类似于 <code>isolate-*-v8-*.log</code> 的子进程 log(共 8 个，子进程 <code>worker</code>) 和一个主进程 log <code>isolate-*-v8.log</code>(主进程 <code>master</code>)。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>使用 <code>--prof-process</code> 配置运行 <code>NodeJS</code>，并提供上面生成的文件的路径。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node --prof-process isolate-0x102802400-v8-81626.log</span><br></pre></td></tr></table></figure><p>从上到下主要分为几个耗时分类，<code>Shared libraries</code>, <code>JavaScript</code>, <code>C++</code>, <code>Summary</code>, <code>C++ entry points</code>, <code>Bottom up (heavy) profile</code>:</p><h3 id="Shared-libraries"><a href="#Shared-libraries" class="headerlink" title="Shared libraries"></a>Shared libraries</h3><p><code>Node</code> 进程使用到的系统级动态链接库部分的时间消耗，会显示在这个分类下。</p><p>该分类的几列：</p><p><code>ticks</code>：每个库所占用的 <code>ticks</code> 数量<br><code>total</code>：每个库占用的 <code>ticks</code> 总量百分比<br><code>nonlib</code>：这列在当前分类不适用，因为本来这里列的就都是类库时间消耗，<code>nonlib</code> 当然没有数据<br><code>name</code>：动态链接库的文件位置</p><h3 id="JavaScript、C-、Summary"><a href="#JavaScript、C-、Summary" class="headerlink" title="JavaScript、C++、Summary"></a>JavaScript、C++、Summary</h3><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><p><code>JavaScript</code> 代码部分的时间消耗，包括了当前项目源代码部分的时间消耗和第三方 <code>node_modules</code> 的时间消耗。</p><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><p><code>Node</code> 进程在 <code>C++</code> 代码里的时间消耗，<code>Node</code> 本身是构建在 <code>V8</code> 引擎之上的，所以一些 <code>Node</code> 标准库里的 <code>API</code>，基本上都是 <code>C++</code> 时间消耗。当然这个分类也包含了一些作为第三方 <code>addon</code> 加载的插件的时间消耗。</p><h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>将所有的分类的时间消耗总量都放在一起，形成一个直观的结果。</p><h4 id="列含义"><a href="#列含义" class="headerlink" title="列含义"></a>列含义</h4><ul><li><code>ticks</code>：占用的 <code>ticks</code> 数量</li><li><code>total</code>：占用的 <code>ticks</code> 总量百分比</li><li><code>nonlib</code>：<br>这列描述的是将 <code>Shared libraries</code> 所产生的时间消耗忽略之后，当前条目自身产生的时间消耗（<code>ticks</code>）所占的百分比</li><li><code>name</code>(每个 <code>name</code> 列实际函数名之前一般会有一个 <code>*</code> 或 <code>~</code>，星号表示该函数得到了优化，而波浪号则表示没有)：<br><code>JavaScript</code>：函数名，以及其在源代码中的位置<br><code>C++</code>：函数名，一般都是 <code>Node</code> 运行时和 <code>V8</code> 相关的函数<br><code>Summary</code>：分类名</li></ul><h3 id="C-entry-points"><a href="#C-entry-points" class="headerlink" title="C++ entry points"></a>C++ entry points</h3><p>这部分描述的是当逻辑从 <code>JS</code> 代码跨界到 <code>C++</code> 代码运行时，其中消耗的时间。</p><h3 id="Bottom-up-heavy-profile"><a href="#Bottom-up-heavy-profile" class="headerlink" title="Bottom up (heavy) profile"></a>Bottom up (heavy) profile</h3><p>这部分是性能问题的暴露部分，一般看完 <code>Summery</code> 不想了解其细节就直接来看这部分是解决问题的最快方案。</p><p>和之前其他分类耗时部分不同的是，在这部分里按空行分隔的不同段落都是一个个单独的性能瓶颈点，每个段落的多行表示的是一个调用栈。</p><p>此外，这个部分的列内容也和之前的略有不同（主要是<code>parent</code>字段），<code>parent</code> 列的百分比意味着：表示上一行中的函数由当前行中的函数调用的百分比。</p><h3 id="具体分析"><a href="#具体分析" class="headerlink" title="具体分析"></a>具体分析</h3><p>先看 <code>Summary</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[Summary]:</span><br><span class="line">  ticks  total  nonlib   name</span><br><span class="line">  262   23.7%   23.7%  JavaScript</span><br><span class="line">  778   70.3%   70.4%  C++</span><br><span class="line">    38    3.4%    3.4%  GC</span><br><span class="line">    1    0.1%          Shared libraries</span><br><span class="line">    65    5.9%          Unaccounted</span><br></pre></td></tr></table></figure><p>可以发现大部分性能浪费在执行 <code>C++</code> 代码上了，所以我们重点观察 <code>C++</code> 部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[C++]:</span><br><span class="line">  ticks  total  nonlib   name</span><br><span class="line">  376   34.0%   34.0%  t bool v8::internal::StringToArrayIndex&lt;v8::internal::StringCharacterStream&gt;(v8::internal::StringCharacterStream*, unsigned int*)</span><br><span class="line">    88    8.0%    8.0%  T v8::internal::String::ToNumber(v8::internal::Handle&lt;v8::internal::String&gt;)</span><br><span class="line">    81    7.3%    7.3%  T v8::internal::Runtime_StringToNumber(int, v8::internal::Object**, v8::internal::Isolate*)</span><br><span class="line">...</span><br><span class="line">[C++ entry points]:</span><br><span class="line">ticks    cpp   total   name</span><br><span class="line">687   93.3%   62.1%  T v8::internal::Runtime_StringToNumber(int, v8::internal::Object**, v8::internal::Isolate*)</span><br><span class="line">  28    3.8%    2.5%  T v8::internal::Builtin_HandleApiCall(int, v8::internal::Object**, v8::internal::Isolate*)</span><br><span class="line">...</span><br><span class="line">[Bottom up (heavy) profile]:</span><br><span class="line">  Note: percentage shows a share of a particular caller in the total</span><br><span class="line">  amount of its parent calls.</span><br><span class="line">  Callers occupying less than 1.0% are not shown.</span><br><span class="line"></span><br><span class="line">   ticks parent  name</span><br><span class="line">    376   34.0%  t bool v8::internal::StringToArrayIndex&lt;v8::internal::StringCharacterStream&gt;(v8::internal::StringCharacterStream*, unsigned int*)</span><br><span class="line">    376  100.0%    T v8::internal::Runtime_StringToNumber(int, v8::internal::Object**, v8::internal::Isolate*)</span><br><span class="line">    376  100.0%      LazyCompile: *process.on.n /Users/hongchuanwang/Desktop/test2.js:29:31</span><br><span class="line">    376  100.0%        LazyCompile: ~emitTwo events.js:124:17</span><br><span class="line">    376  100.0%          LazyCompile: ~emit events.js:156:44</span><br><span class="line">    376  100.0%            LazyCompile: ~emit internal/child_process.js:771:16</span><br><span class="line"></span><br><span class="line">    155   14.0%  LazyCompile: *process.on.n /Users/hongchuanwang/Desktop/test2.js:29:31</span><br><span class="line">    155  100.0%    LazyCompile: ~emitTwo events.js:124:17</span><br><span class="line">    155  100.0%      LazyCompile: ~emit events.js:156:44</span><br><span class="line">    155  100.0%        LazyCompile: ~emit internal/child_process.js:771:16</span><br><span class="line">    155  100.0%          LazyCompile: ~_combinedTickCallback internal/process/next_tick.js:129:33</span><br><span class="line">    155  100.0%            LazyCompile: ~_tickCallback internal/process/next_tick.js:151:25</span><br></pre></td></tr></table></figure><p>34%的耗时都在 <code>StringToArrayIndex</code>，而调用该函数的都是 <code>Runtime_StringToNumber</code>，根据调用栈我们就发现代码中有一段 <code>for (let i = Number(start); i &lt; Number(end); i++)</code> 发现问题所在，是循环的时候多次处理了 <code>end</code>，所以只需要将 <code>Number(end)</code> 放在循环外处理就行了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">start = <span class="built_in">Number</span>(start)</span><br><span class="line">end = <span class="built_in">Number</span>(end)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">4</span> === <span class="number">0</span>) s += i</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">4</span> === <span class="number">1</span>) s -= i</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">4</span> === <span class="number">2</span>) s *= i</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">4</span> === <span class="number">3</span>) s /= i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改完再分析结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[Summary]:</span><br><span class="line">  ticks  total  nonlib   name</span><br><span class="line">  123   53.0%   53.2%  JavaScript</span><br><span class="line">  103   44.4%   44.6%  C++</span><br><span class="line">    34   14.7%   14.7%  GC</span><br><span class="line">    1    0.4%          Shared libraries</span><br><span class="line">    5    2.2%          Unaccounted</span><br><span class="line">...</span><br><span class="line">[C++ entry points]:</span><br><span class="line">   ticks    cpp   total   name</span><br><span class="line">     40   65.6%   17.2%  T v8::internal::Builtin_HandleApiCall(int, v8::internal::Object**, v8::internal::Isolate*)</span><br><span class="line">     13   21.3%    5.6%  T v8::internal::Runtime_CompileLazy(int, v8::internal::Object**, v8::internal::Isolate*)</span><br><span class="line">...</span><br><span class="line">[Bottom up (heavy) profile]:</span><br><span class="line">  Note: percentage shows a share of a particular caller in the total</span><br><span class="line">  amount of its parent calls.</span><br><span class="line">  Callers occupying less than 1.0% are not shown.</span><br><span class="line"></span><br><span class="line">   ticks parent  name</span><br><span class="line">    119   51.3%  LazyCompile: *process.on.n /Users/hongchuanwang/Desktop/test2.js:29:31</span><br><span class="line">    119  100.0%    LazyCompile: ~emitTwo events.js:124:17</span><br><span class="line">    119  100.0%      LazyCompile: ~emit events.js:156:44</span><br><span class="line">    119  100.0%        LazyCompile: ~emit internal/child_process.js:771:16</span><br><span class="line">    119  100.0%          LazyCompile: ~_combinedTickCallback internal/process/next_tick.js:129:33</span><br><span class="line">    119  100.0%            LazyCompile: ~_tickCallback internal/process/next_tick.js:151:25</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以发现耗时的 <code>StringToNumber</code> 已经没有了，<code>CPU</code> 的 <code>tick</code> 也只有119了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在实际 &lt;code&gt;Node.js&lt;/code&gt; 应用开发中可能会遇到性能上的瓶颈，在项目比较复杂的时候光阅读代码是很难发现问题所在的，这时候就需要有效的方法来发现瓶颈所在。&lt;/p&gt;
&lt;p&gt;这里介绍一种简单的方法来帮助开发者洞察瓶颈所在，提升 &lt;code&gt;Node.js&lt;/code&gt; 应用性能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node" scheme="http://1016990109.github.io/tags/Node/"/>
    
      <category term="优化" scheme="http://1016990109.github.io/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Node 服务部署</title>
    <link href="http://1016990109.github.io/2018/06/09/Node-%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/"/>
    <id>http://1016990109.github.io/2018/06/09/Node-服务部署/</id>
    <published>2018-06-09T01:36:22.000Z</published>
    <updated>2018-06-12T09:21:58.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="forever-与-pm2"><a href="#forever-与-pm2" class="headerlink" title="forever 与 pm2"></a>forever 与 pm2</h2><p>在之前部署 <code>Node.js</code> 服务都是使用 <code>forever</code> 的，现在基本上都改为 <code>pm2</code> 了，<code>pm2</code> 比 <code>forever</code> 功能更加强大，可以配置集群、集成日志、控制台监视等等，下面是两者的比较：</p><table><thead><tr><th>Feature</th><th>Forever</th><th>PM2</th></tr></thead><tbody><tr><td>Keep Alive</td><td>✔</td><td>✔</td></tr><tr><td>Coffeescript</td><td>✔</td><td></td></tr><tr><td>Log aggregation</td><td></td><td>✔</td></tr><tr><td>API</td><td></td><td>✔</td></tr><tr><td>Terminal monitoring</td><td></td><td>✔</td></tr><tr><td>Clustering</td><td></td><td>✔</td></tr><tr><td>JSON configuration</td><td></td><td>✔</td></tr></tbody></table><a id="more"></a><p>所以如果还在使用 <code>forever</code> 的读者，快快加入到 <code>pm2</code> 的阵营来吧。</p><h2 id="pm2-使用"><a href="#pm2-使用" class="headerlink" title="pm2 使用"></a>pm2 使用</h2><p>详情请看<a href="https://pm2.io/doc/en/runtime/overview/" target="_blank" rel="noopener">官方文档</a></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><code>pm2</code> 可以直接在命令行中通过参数配置，也可以用过 <code>ecosystem.config.js</code> 文件来配置，<code>pm2 init</code> 初始化一个配置文件如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  apps : [&#123;</span><br><span class="line">    name: <span class="string">"app"</span>,</span><br><span class="line">    script: <span class="string">"./app.js"</span>,</span><br><span class="line">    env: &#123;</span><br><span class="line">      NODE_ENV: <span class="string">"development"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    env_production: &#123;</span><br><span class="line">      NODE_ENV: <span class="string">"production"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// deploy config(部署配置也在这里)</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="集成-log"><a href="#集成-log" class="headerlink" title="集成 log"></a>集成 log</h3><p>可以单独配置普通输出和错误输出到不同的文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  apps: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'app'</span>,</span><br><span class="line">      script: <span class="string">'app.js'</span>,</span><br><span class="line">      output: <span class="string">'./out.log'</span>,</span><br><span class="line">      error: <span class="string">'./error.log'</span>,</span><br><span class="line">      log: <span class="string">'./combined.outerr.log'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时也可以集成 <code>pm2-logrotate</code> 工具来管理日志，可以配置日志分片大小、时间、名字等等。</p><h3 id="自启动"><a href="#自启动" class="headerlink" title="自启动"></a>自启动</h3><p><code>pm2</code> 可以配置开机启动，通过 <code>pm2 startup</code> 命令会自动提示你该怎么配置自启动。</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p><code>pm2</code> 支持集群模式，可以在不更改代码的前提下自动帮你配置集群，有效利用系统的 <code>CPU</code> 资源，充分利用计算机能力，消除 <code>Node.js</code> 单线程的瓶颈，可以同时启动多个进程来监听同一个端口(这在文后会提到具体怎么实现多进程监听)，提高性能。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-i &lt;number-instances&gt;</span><br></pre></td></tr></table></figure><p>或者配置 <code>ecosystem.config.js</code> 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  apps: [</span><br><span class="line">    &#123;</span><br><span class="line">      script: <span class="string">'app.js'</span>,</span><br><span class="line">      instances: <span class="string">'max'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SSH-部署"><a href="#SSH-部署" class="headerlink" title="SSH 部署"></a>SSH 部署</h3><p><code>pm2</code> 还支持自动化将代码部署到远程服务器，只需要做一些简单的配置即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  apps: [&#123;</span><br><span class="line">    name: <span class="string">"app"</span>,</span><br><span class="line">    script: <span class="string">"app.js"</span></span><br><span class="line">  &#125;],</span><br><span class="line">  deploy: &#123;</span><br><span class="line">    <span class="comment">// "production" is the environment name</span></span><br><span class="line">    production: &#123;</span><br><span class="line">      <span class="comment">// SSH key path, default to $HOME/.ssh</span></span><br><span class="line">      key: <span class="string">"/path/to/some.pem"</span>,</span><br><span class="line">      <span class="comment">// SSH user</span></span><br><span class="line">      user: <span class="string">"ubuntu"</span>,</span><br><span class="line">      <span class="comment">// SSH host</span></span><br><span class="line">      host: [<span class="string">"192.168.0.13"</span>],</span><br><span class="line">      <span class="comment">// SSH options with no command-line flag, see 'man ssh'</span></span><br><span class="line">      <span class="comment">// can be either a single string or an array of strings</span></span><br><span class="line">      ssh_options: <span class="string">"StrictHostKeyChecking=no"</span>,</span><br><span class="line">      <span class="comment">// GIT remote/branch</span></span><br><span class="line">      ref: <span class="string">"origin/master"</span>,</span><br><span class="line">      <span class="comment">// GIT remote</span></span><br><span class="line">      repo: <span class="string">"git@github.com:Username/repository.git"</span>,</span><br><span class="line">      <span class="comment">// path in the server</span></span><br><span class="line">      path: <span class="string">"/var/www/my-repository"</span>,</span><br><span class="line">      <span class="comment">// Pre-setup command or path to a script on your local machine</span></span><br><span class="line">      pre-setup: <span class="string">"apt-get install git ; ls -la"</span>,</span><br><span class="line">      <span class="comment">// Post-setup commands or path to a script on the host machine</span></span><br><span class="line">      <span class="comment">// eg: placing configurations in the shared dir etc</span></span><br><span class="line">      post-setup: <span class="string">"ls -la"</span>,</span><br><span class="line">      <span class="comment">// pre-deploy action</span></span><br><span class="line">      pre-deploy-local: <span class="string">"echo 'This is a local executed command'"</span></span><br><span class="line">      <span class="comment">// post-deploy action</span></span><br><span class="line">      post-deploy: <span class="string">"npm install"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>如果使用集群模式需要主要应用得是个无状态应用，所以诸如 <code>sessions</code>、<code>websocket connection</code> 等不要使用，可以使用 <code>Redis</code> 等来共享应用的状态。</li><li>关闭应用之前最好确认所有的请求已经被处理，数据库连接已经释放，释放其他资源。</li></ol><h2 id="cluster-原理"><a href="#cluster-原理" class="headerlink" title="cluster 原理"></a>cluster 原理</h2><p><code>pm2</code> 集群其实是封装了 <code>cluster</code> 模块的一系列操作，自动包装代码启动集群，重加载的时候也是先启动新的 <code>worker</code> 再把之前的 <code>worker</code> 停掉等等。</p><p>这里是一个简单的 <code>cluster</code> 的示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">'cluster'</span>)</span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cluster.isMaster) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, n = os.cpus().length; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">    cluster.fork()</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  http</span><br><span class="line">    .createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">      res.writeHead(<span class="number">200</span>)</span><br><span class="line">      res.end(<span class="string">'hello world\n'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .listen(<span class="number">8000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>fork</code> 的本质还是使用了 <code>child_process.fork</code> 生成的子进程，但是注意不能直接使用 <code>child_process.fork()</code> 来生成，因为这样会缺少 <code>process.env.NODE_UNIQUE_ID</code>，会导致 <code>cluster.isMaster</code> 判断总是为 <code>true</code>。</p><p>运行时，所有新建立的连接都由主进程完成，然后主进程再把 <code>TCP</code> 连接分配给指定的 <code>worker</code> 进程。分配根据 <code>Round-robin</code> 算法分发，子进程 <code>worker</code> 具体处理请求。</p><p>更加详细的 <code>cluser</code> 用法与讲解可查看<a href="http://javascript.ruanyifeng.com/nodejs/cluster.html" target="_blank" rel="noopener">阮一峰的博客</a> 和 <a href="https://nodejs.org/dist/latest-v10.x/docs/api/cluster.html" target="_blank" rel="noopener">官方文档</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;forever-与-pm2&quot;&gt;&lt;a href=&quot;#forever-与-pm2&quot; class=&quot;headerlink&quot; title=&quot;forever 与 pm2&quot;&gt;&lt;/a&gt;forever 与 pm2&lt;/h2&gt;&lt;p&gt;在之前部署 &lt;code&gt;Node.js&lt;/code&gt; 服务都是使用 &lt;code&gt;forever&lt;/code&gt; 的，现在基本上都改为 &lt;code&gt;pm2&lt;/code&gt; 了，&lt;code&gt;pm2&lt;/code&gt; 比 &lt;code&gt;forever&lt;/code&gt; 功能更加强大，可以配置集群、集成日志、控制台监视等等，下面是两者的比较：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Forever&lt;/th&gt;
&lt;th&gt;PM2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Keep Alive&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Coffeescript&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Log aggregation&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;API&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Terminal monitoring&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Clustering&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JSON configuration&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="Node" scheme="http://1016990109.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>《Node.js 设计模式》读书笔记 第三章</title>
    <link href="http://1016990109.github.io/2018/06/07/Node-js-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%89%E7%AB%A0/"/>
    <id>http://1016990109.github.io/2018/06/07/Node-js-设计模式读书笔记-第三章/</id>
    <published>2018-06-07T02:39:52.000Z</published>
    <updated>2018-06-11T12:04:13.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Asynchorous-Control-Flow-Patterns-with-Callbacks-使用回调的异步控制流模式"><a href="#Asynchorous-Control-Flow-Patterns-with-Callbacks-使用回调的异步控制流模式" class="headerlink" title="Asynchorous Control Flow Patterns with Callbacks(使用回调的异步控制流模式)"></a>Asynchorous Control Flow Patterns with Callbacks(使用回调的异步控制流模式)</h1><p>异步的代码使得难以预测语句的执行顺序，所以在一些场景(比如遍历一些文件，执行一系列任务等等)下，这就要求开发者去使用一些方法或技术来防止编写出低效和难以阅读的代码。</p><h2 id="The-difficulties-of-asynchonous-programming-异步编程的困难"><a href="#The-difficulties-of-asynchonous-programming-异步编程的困难" class="headerlink" title="The difficulties of asynchonous programming(异步编程的困难)"></a>The difficulties of asynchonous programming(异步编程的困难)</h2><blockquote><p><code>KISS</code> 原则：Keep It Simple, Stupid，注重简约。</p></blockquote><a id="more"></a><p>匿名函数的闭包和原地定义使得开发者不用跳去另外一个地方写代码，这样编程就变得非常顺利。(比先去定义一个函数再回来引入要简单多了)这很好地体现了 <code>KISS</code> 原则，因为它是简单的，保持了代码编写的流(或理解为顺序吧)，开发时间少。但是当嵌套的层次变得多了起来之后，可维护性、复用性、模块性就被破坏了</p><h3 id="Creating-a-simple-web-spider-创建一个简单的-web-爬虫"><a href="#Creating-a-simple-web-spider-创建一个简单的-web-爬虫" class="headerlink" title="Creating a simple web spider(创建一个简单的 web 爬虫)"></a>Creating a simple web spider(创建一个简单的 web 爬虫)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file spider.js</span></span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> mkdirp = <span class="built_in">require</span>(<span class="string">'mkdirp'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> utilities = <span class="built_in">require</span>(<span class="string">'./utilities'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spider</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> filename = utilities.urlToFilename(url)</span><br><span class="line">  fs.exists(filename, exists =&gt; &#123;</span><br><span class="line">    <span class="comment">//[1]</span></span><br><span class="line">    <span class="keyword">if</span> (!exists) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`Downloading <span class="subst">$&#123;url&#125;</span>`</span>)</span><br><span class="line">      request(url, (err, response, body) =&gt; &#123;</span><br><span class="line">        <span class="comment">//[2]</span></span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          callback(err)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          mkdirp(path.dirname(filename), err =&gt; &#123;</span><br><span class="line">            <span class="comment">//[3]</span></span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">              callback(err)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              fs.writeFile(filename, body, err =&gt; &#123;</span><br><span class="line">                <span class="comment">//[4]</span></span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                  callback(err)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  callback(<span class="literal">null</span>, filename, <span class="literal">true</span>)</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      callback(<span class="literal">null</span>, filename, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述函数执行下面的任务：</p><ol><li>通过查看相关的文件已经是否被创建来检查 <code>URL</code> 是不是已经被下载过了:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.exists(filename, exists =&gt; ...</span><br></pre></td></tr></table></figure><ol start="2"><li>文件没有找到，则下载 <code>URL</code>:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request(url, (err, response, body) =&gt; ...</span><br></pre></td></tr></table></figure><ol start="3"><li>保证包含该文件的文件夹存在:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdirp(path.dirname(filename), err =&gt; ...</span><br></pre></td></tr></table></figure><ol start="4"><li>最后将 <code>HTTP</code> 响应内容写入文件系统的文件中:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.writeFile(filename, body, err =&gt; ...</span><br></pre></td></tr></table></figure><p>使用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spider(process.argv[<span class="number">2</span>], (err, filename, downloaded) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (downloaded) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Completed the download of "<span class="subst">$&#123;filename&#125;</span>"`</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`"<span class="subst">$&#123;filename&#125;</span>" was already downloaded`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="The-callback-hell-回调地狱"><a href="#The-callback-hell-回调地狱" class="headerlink" title="The callback hell(回调地狱)"></a>The callback hell(回调地狱)</h3><p>从上面的 <code>spider()</code> 函数中可以看到，尽管我们非常直接清晰地实现这个算法，但是代码还是有很多层的缩进导致难以阅读。</p><p>当然将上面的逻辑使用同步代码的方式实现会更加直接，而且出错的概率也会变得更小，但是阻塞就会使得效率更低，而且使用异步 <code>CPS</code> 风格也是另外一种尝试了。</p><p>这种大量的闭包和内联回调函数定义导致代码变得不可读和不可控的场景称为回调地狱:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">asyncFoo(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  asyncBar(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    asyncFooBar(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面这种代码一个显而易见的问题就是降低了可读性，当层次变得很多的时候会看不清一个函数是什么时候结束的或者另一个函数是什么时候开始的。</p><p>另一个问题就是变量名的重叠，有时候我们不得不使用相似的甚至相同的名字来描述一个内容，例如错误处理中使用 <code>err1</code> 、<code>err2</code>、<code>err3</code> 表示错误，甚至是直接使用相同的名字如 <code>err</code>，这些都不是好的实现，并且会导致混淆，提高缺陷发生的概率。</p><p>还有一点需要注意，虽然闭包在性能和内存上代价较小，但是这可能导致不易识别的内存泄漏，因为被一个活动的闭包持有的上下文引用是不会被垃圾回收的。</p><blockquote><p>想知道闭包怎么在 <code>V8</code> 中工作的可以看<a href="https://mrale.ph/blog/2012/09/23/grokking-v8-closures-for-fun.html" target="_blank" rel="noopener">这里</a></p></blockquote><h2 id="Using-plain-JavaScript-使用纯-JavaScript"><a href="#Using-plain-JavaScript-使用纯-JavaScript" class="headerlink" title="Using plain JavaScript(使用纯 JavaScript)"></a>Using plain JavaScript(使用纯 JavaScript)</h2><h3 id="Callback-decipline-回调准则"><a href="#Callback-decipline-回调准则" class="headerlink" title="Callback decipline(回调准则)"></a>Callback decipline(回调准则)</h3><p>写异步函数的第一准则就是不要滥用闭包。</p><p>下面是一些减少嵌套层次的原则：</p><ul><li>尽快返回。根据上下文，使用 <code>return</code>、<code>continue</code> 或 <code>break</code>，以便立即退出当前代码块，而不是写完整的 <code>if...else</code> 的语句。</li><li>给函数命名，将中间结果作为参数传递。</li><li>模块化代码。尽可能地将代码分成更小、更可复用的函数。</li></ul><h3 id="Applying-the-callback-decipline-应用回调准则"><a href="#Applying-the-callback-decipline-应用回调准则" class="headerlink" title="Applying the callback decipline(应用回调准则)"></a>Applying the callback decipline(应用回调准则)</h3><p>我们来应用这些准则来修复上面的 <code>spider</code> 应用。</p><p>第一步：移除 <code>else</code> 语句，发现错误后立即返回，可以发现很容易就较少了嵌套的层级了(少了 <code>else</code> 那一层级)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line">  <span class="keyword">return</span> callback(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//code to execute when there are no errors</span></span><br></pre></td></tr></table></figure><p>第二步：识别可复用的代码，独立出来为一个函数，这里为写入字符串到一个文件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveFile</span>(<span class="params">filename, contents, callback</span>) </span>&#123;</span><br><span class="line">  mkdirp(path.dirname(filename), err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fs.writeFile(filename, contents, callback)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的也可以独立出一个 <code>download(url, filename, callback)</code> 函数来下载 <code>URL</code> 内容。</p><p>最后一步：整合上面的两步，修改 <code>spider()</code> 函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spider</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> filename = utilities.urlToFilename(url)</span><br><span class="line">  fs.exists(filename, exists =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (exists) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(<span class="literal">null</span>, filename, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    download(url, filename, err =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(err)</span><br><span class="line">      &#125;</span><br><span class="line">      callback(<span class="literal">null</span>, filename, <span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现只是简单地重新组织了代码，嵌套的层级就降低了很多，代码也变得更易读了。</p><blockquote><p>其中的 <code>saveFile()</code> 和 <code>download</code> 还可以考虑导出给其他模块使用，增加了复用性。</p></blockquote><h3 id="Sequential-execution-顺序执行"><a href="#Sequential-execution-顺序执行" class="headerlink" title="Sequential execution(顺序执行)"></a>Sequential execution(顺序执行)</h3><p>当需要顺序执行一组任务时(比如先对数据预处理，接着在按照步骤一步步处理数据等等)，尽管使用同步代码容易实现，但是在使用异步 <code>CPS</code> 风格来做时就可能导致回调地狱了。</p><h4 id="Executing-a-known-set-of-tasks-in-sequence-顺序执行一个已知的任务集合"><a href="#Executing-a-known-set-of-tasks-in-sequence-顺序执行一个已知的任务集合" class="headerlink" title="Executing a known set of tasks in sequence(顺序执行一个已知的任务集合)"></a>Executing a known set of tasks in sequence(顺序执行一个已知的任务集合)</h4><p>直接上代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">task1</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  asyncOperation(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    task2(callback);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">task2</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  asyncOperation(result() =&gt; &#123;</span><br><span class="line">    task3(callback);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">task3</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  asyncOperation(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    callback(); <span class="comment">//finally executes the callback</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task1(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//executed when task1, task2 and task3 are completed</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'tasks 1, 2 and 3 executed'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面演示了在一个任务中，当异步操作完成时如何调用下一个任务，这告诉我们处理异步代码不一定需要闭包。</p><h4 id="Sequential-iteration-顺序迭代"><a href="#Sequential-iteration-顺序迭代" class="headerlink" title="Sequential iteration(顺序迭代)"></a>Sequential iteration(顺序迭代)</h4><p>上面示例中，我们是知道有多少任务要执行的，那么当任务数量和具体任务不清楚的时候该怎么办呢，我们就不能硬编码任务执行顺序了，得动态地生成。</p><h5 id="Web-spider-version-2-Web-爬虫第-2-版"><a href="#Web-spider-version-2-Web-爬虫第-2-版" class="headerlink" title="Web spider version 2(Web 爬虫第 2 版)"></a>Web spider version 2(Web 爬虫第 2 版)</h5><p>为了显示顺序迭代的例子，让我们为 <code>Web</code> 爬虫应用程序引入一个新功能：我们现在想要递归地下载网页中的所有链接。</p><p>第一步是修改我们的 <code>spider()</code> 函数，以便通过调用一个名为 <code>spiderLinks()</code> 的函数触发页面所有链接的递归下载。</p><p>此外，我们现在尝试读取文件，而不是检查文件是否已经存在，并开始爬取其链接。这样，我们就可以在中断爬虫后恢复爬虫而不需要继续下载。最后还有一个变化是传递一个新的参数 <code>nesting</code>，用来限制递归深度。结果代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spider</span>(<span class="params">url, nesting, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> filename = utilities.urlToFilename(url);</span><br><span class="line">  fs.readFile(filename, <span class="string">'utf8'</span>, (err, body) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err.code! == <span class="string">'ENOENT'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(err);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> download(url, filename, (err, body) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> callback(err);</span><br><span class="line">        &#125;</span><br><span class="line">        spiderLinks(url, body, nesting, callback);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    spiderLinks(url, body, nesting, callback);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Sequential-crawling-of-links-顺序爬取连接"><a href="#Sequential-crawling-of-links-顺序爬取连接" class="headerlink" title="Sequential crawling of links(顺序爬取连接)"></a>Sequential crawling of links(顺序爬取连接)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spiderLinks</span>(<span class="params">currentUrl, body, nesting, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nesting === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> process.nextTick(callback)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> links = utilities.getPageLinks(currentUrl, body) <span class="comment">//[1]</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">iterate</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//[2]</span></span><br><span class="line">    <span class="keyword">if</span> (index === links.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    spider(links[index], nesting - <span class="number">1</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//[3]</span></span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(err)</span><br><span class="line">      &#125;</span><br><span class="line">      iterate(index + <span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  iterate(<span class="number">0</span>) <span class="comment">//[4]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>我们使用 <code>utilities.getPageLinks()</code> 函数获取页面中包含的所有链接的列表。此函数仅返回指向相同主机名的链接。</li><li>我们使用 <code>iterate()</code> 本地函数来遍历链接，该函数需要下一个链接的索引进行分析。在这个函数中，我们首先要检查索引是否等于链接数组的长度，如果等于则是迭代完成，在这种情况下我们立即调用 <code>callback()</code> 函数，因为这意味着我们处理了所有的项目。</li><li>这时，已准备好处理链接。我们减少嵌套层级(<code>nesting - 1</code>)后调用 <code>spider()</code>，然后当操作完成后继续下一个迭代(<code>index + 1</code>)。</li><li>调用 <code>iterate(0)</code> 来开始迭代。</li></ol><p>现在这个 <code>spider</code> 已经可以递归的爬取网页的链接了。中断(<code>ctrl + c</code>)后再次启动也可以继续上次的任务。</p><h5 id="The-pattern-迭代模式"><a href="#The-pattern-迭代模式" class="headerlink" title="The pattern(迭代模式)"></a>The pattern(迭代模式)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iterate</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (index === tasks.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> finish()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> task = tasks[index]</span><br><span class="line">  task(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    iterate(index + <span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">finish</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 迭代完成的操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">iterate(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>上面表示了异步任务需要按顺序执行时的一个通用模式，可以在集合的元素或通常的任务列表上按顺序异步迭代。</p><blockquote><p>注意，当 <code>task</code> 是同步任务的时候，那就是一个同步递归操作了，这可能会造成栈溢出。</p></blockquote><h3 id="Parallel-execution-并行执行"><a href="#Parallel-execution-并行执行" class="headerlink" title="Parallel execution(并行执行)"></a>Parallel execution(并行执行)</h3><p>在 <code>Node.js</code> 中，我们只能并行执行异步操作，因为它们的并发性由非阻塞 <code>API</code> 在内部处理。在 <code>Node.js</code> 中，同步阻塞操作不能并行运行，除非它们被插入异步操作中或使用 <code>setTimeout</code> 之类的做延迟。</p><h4 id="Web-spider-version-3-Web-爬虫第-3-版"><a href="#Web-spider-version-3-Web-爬虫第-3-版" class="headerlink" title="Web spider version 3(Web 爬虫第 3 版)"></a>Web spider version 3(Web 爬虫第 3 版)</h4><p>现在需要并行地下载网页的内容，只需要略做修改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spiderLinks</span>(<span class="params">currentUrl, body, nesting, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nesting === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> process.nextTick(callback)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> links = utilities.getPageLinks(currentUrl, body)</span><br><span class="line">  <span class="keyword">if</span> (links.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> process.nextTick(callback)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> completed = <span class="number">0</span>,</span><br><span class="line">    hasErrors = <span class="literal">false</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">done</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      hasErrors = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">return</span> callback(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (++completed === links.length &amp;&amp; !hasErrors) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  links.forEach(<span class="function"><span class="params">link</span> =&gt;</span> &#123;</span><br><span class="line">    spider(link, nesting - <span class="number">1</span>, done)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>forEach</code> 同时爬取链接列表中的链接，而不用等待前一个爬取完了才开始爬取下一个，增加一个 <code>completed</code> 变量记录已经爬取完的链接数，当 <code>completed</code> 等于链接个数时就说明所有的链接都已爬取完了，就可以调用最后的回调函数了。或者说当中间出错了也会立即执行回调函数返回。</p><h4 id="The-pattern-并行模式"><a href="#The-pattern-并行模式" class="headerlink" title="The pattern(并行模式)"></a>The pattern(并行模式)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tasks = [</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">let</span> completed = <span class="number">0</span></span><br><span class="line">tasks.forEach(<span class="function"><span class="params">task</span> =&gt;</span> &#123;</span><br><span class="line">  task(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (++completed === tasks.length) &#123;</span><br><span class="line">      finish()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">finish</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 所有任务执行完成后调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时启动一系列任务，通过记录任务回调函数完成的个数来判断所有任务是否都完成了。</p><h4 id="Fixing-race-conditions-with-concurrent-tasks-修复并发任务中竞争条件"><a href="#Fixing-race-conditions-with-concurrent-tasks-修复并发任务中竞争条件" class="headerlink" title="Fixing race conditions with concurrent tasks(修复并发任务中竞争条件)"></a>Fixing race conditions with concurrent tasks(修复并发任务中竞争条件)</h4><p>在传统的多线程中处理竞争条件通常是锁、互斥条件、信号量和监视器，这些是多线程语言并行化的最复杂的方面之一，对性能也有很大的影响。但是 <code>Node.js</code> 就不同了，它本身就是运行在一个单线程上，这就变得简单多了。但是这不意味着就没有竞争条件了，相反还很普遍。就拿上面的爬虫例子来说，如果有两个爬虫同时运行，都在操作同一个 <code>URL</code> 时，<code>fs.readFile</code> 都读取不到文件，那么两个爬虫就同时去下载这个链接，这就导致了会同时写入内容到同一个文件中。修复办法很简单，在两个 <code>spider</code> 外面定义一个共享的变量记录爬取的链接，如果爬取过则另外一个 <code>spider</code> 就不再爬取：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> spidering = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">spider</span>(<span class="params">url, nesting, callback</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(spidering.has(url)) &#123;</span><br><span class="line">       <span class="keyword">return</span> process.nextTick(callback);</span><br><span class="line">     &#125;</span><br><span class="line">     spidering.set(url, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><h3 id="Limited-parallel-execution-有限制的并行执行"><a href="#Limited-parallel-execution-有限制的并行执行" class="headerlink" title="Limited parallel execution(有限制的并行执行)"></a>Limited parallel execution(有限制的并行执行)</h3><p>不对并行任务做控制的话很容易导致昂贵的开销，例如同时读取很多文件会导致系统资源不足，在 web 应用中还可能导致 <code>DoS</code> 攻击，所以限制同一时间任务的执行数是非常重要的。</p><h4 id="Limiting-the-concurrency-限制并行数"><a href="#Limiting-the-concurrency-限制并行数" class="headerlink" title="Limiting the concurrency(限制并行数)"></a>Limiting the concurrency(限制并行数)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tasks = ...</span><br><span class="line"><span class="keyword">let</span> concurrency = <span class="number">2</span>, running = <span class="number">0</span>, completed = <span class="number">0</span>, index = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(running &lt; concurrency &amp;&amp; index &lt; tasks.length) &#123;</span><br><span class="line">    task = tasks[index++];</span><br><span class="line">    task(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(completed === tasks.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> finish();</span><br><span class="line">      &#125;</span><br><span class="line">      completed++, running--;</span><br><span class="line">      next();</span><br><span class="line">&#125;);</span><br><span class="line">running++; &#125;</span><br><span class="line">&#125; next();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">finish</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//all tasks finished</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面所展示的模式就可以限制同时最大任务数为 2，启动时同时开始最大任务数的任务，之后每当有一个任务结束时，就会从剩下的任务中挑出一个任务开始执行，保持在限制范围内的最多任务同时进行。</p><h4 id="Globally-limiting-the-concurrency-全局地限制并发数"><a href="#Globally-limiting-the-concurrency-全局地限制并发数" class="headerlink" title="Globally limiting the concurrency(全局地限制并发数)"></a>Globally limiting the concurrency(全局地限制并发数)</h4><blockquote><p><code>Node.js</code> 0.11 版本以前是默认限制同一个主机名下最大 <code>HTTP</code> 连接数为 5 的，这个可以满足我们的需要。但是在之后的版本就取消了这个默认限制了。</p></blockquote><h5 id="Queues-to-rescue-队列来拯救"><a href="#Queues-to-rescue-队列来拯救" class="headerlink" title="Queues to rescue(队列来拯救)"></a>Queues to rescue(队列来拯救)</h5><p>我们需要的是限制同时下载的任务数，可以使用队列来解决：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskQueue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(concurrency) &#123;</span><br><span class="line">    <span class="keyword">this</span>.concurrency = concurrency</span><br><span class="line">    <span class="keyword">this</span>.running = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.queue = []</span><br><span class="line">  &#125;</span><br><span class="line">  pushTask(task) &#123;</span><br><span class="line">    <span class="keyword">this</span>.queue.push(task)</span><br><span class="line">    <span class="keyword">this</span>.next()</span><br><span class="line">  &#125;</span><br><span class="line">  next() &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">this</span>.running &lt; <span class="keyword">this</span>.concurrency &amp;&amp; <span class="keyword">this</span>.queue.length) &#123;</span><br><span class="line">      <span class="keyword">const</span> task = <span class="keyword">this</span>.queue.shift()</span><br><span class="line">      task(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.running--</span><br><span class="line">        <span class="keyword">this</span>.next()</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">this</span>.running++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 <code>pushTask</code> 添加任务，然后启动 <code>next</code> 来开始执行任务，<code>next</code> 会自动识别是否任务数达到上限。</p><h5 id="Web-spider-version-Web-爬虫第-4-版"><a href="#Web-spider-version-Web-爬虫第-4-版" class="headerlink" title="Web spider version(Web 爬虫第 4 版)"></a>Web spider version(Web 爬虫第 4 版)</h5><p>使用上面的队列来更改我们的爬虫程序：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> TaskQueue = <span class="built_in">require</span>(<span class="string">'./taskQueue'</span>)</span><br><span class="line"><span class="keyword">const</span> downloadQueue = <span class="keyword">new</span> TaskQueue(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spiderLinks</span>(<span class="params">currentUrl, body, nesting, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nesting === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> process.nextTick(callback)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> links = utilities.getPageLinks(currentUrl, body)</span><br><span class="line">  <span class="keyword">if</span> (links.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> process.nextTick(callback)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> completed = <span class="number">0</span>,</span><br><span class="line">    hasErrors = <span class="literal">false</span></span><br><span class="line">  links.forEach(<span class="function"><span class="params">link</span> =&gt;</span> &#123;</span><br><span class="line">    downloadQueue.pushTask(<span class="function"><span class="params">done</span> =&gt;</span> &#123;</span><br><span class="line">      spider(link, nesting - <span class="number">1</span>, err =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          hasErrors = <span class="literal">true</span></span><br><span class="line">          <span class="keyword">return</span> callback(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (++completed === links.length &amp;&amp; !hasErrors) &#123;</span><br><span class="line">          callback()</span><br><span class="line">        &#125;</span><br><span class="line">        done()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="The-async-library-async-库"><a href="#The-async-library-async-库" class="headerlink" title="The async library(async 库)"></a>The async library(async 库)</h2><h3 id="Sequential-execution-顺序执行-1"><a href="#Sequential-execution-顺序执行-1" class="headerlink" title="Sequential execution(顺序执行)"></a>Sequential execution(顺序执行)</h3><p><code>async</code> 库可以在实现复杂的异步控制流程时很大程度上帮助我们，但是选择正确的方法来处理具体问题是一个问题。顺序执行就有大约有 20 种方法，<code>eachSeries()</code>, <code>mapSeries()</code>, <code>filterSeries()</code>等等。</p><h4 id="Sequential-execution-of-a-known-set-of-tasks-已知任务的顺序执行"><a href="#Sequential-execution-of-a-known-set-of-tasks-已知任务的顺序执行" class="headerlink" title="Sequential execution of a known set of tasks(已知任务的顺序执行)"></a>Sequential execution of a known set of tasks(已知任务的顺序执行)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span>.series(tasks, [callback])</span><br></pre></td></tr></table></figure><p><code>series</code> 顺序执行一组任务，在所有任务调用回调函数 <code>callback</code>。而每一个 <code>task</code> 只是个接受回调函数的函数 <code>function task(callback) {}</code>，当某一个任务回调时发送了错误，那么 <code>async</code> 会停止后面的任务，直接到最后的回调函数。</p><h4 id="Sequential-iteration-顺序迭代-1"><a href="#Sequential-iteration-顺序迭代-1" class="headerlink" title="Sequential iteration(顺序迭代)"></a>Sequential iteration(顺序迭代)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span>.eachSeries(iterable, fn(item, callback), [callback])</span><br></pre></td></tr></table></figure><p>遍历一个可遍历的对象，顺序执行每一个元素对应的函数，所有元素对应的函数执行完后调用最后的回调函数。</p><h3 id="Parallel-execution-并行执行-1"><a href="#Parallel-execution-并行执行-1" class="headerlink" title="Parallel execution(并行执行)"></a>Parallel execution(并行执行)</h3><p><code>each()</code>，<code>map()</code>，<code>filter()</code>，<code>reject()</code>，<code>detect()</code>，<code>some()</code>，<code>every()</code>，<code>concat()</code>，<code>parallel()</code>，<code>applyEach()</code> 和 <code>times()</code> 都是并行执行的 <code>async</code> 的方法。</p><h3 id="Limited-parallel-execution-限制并行执行"><a href="#Limited-parallel-execution-限制并行执行" class="headerlink" title="Limited parallel execution(限制并行执行)"></a>Limited parallel execution(限制并行执行)</h3><p>类似于 <code>async.queue(worker, concurrency)</code> 来限制同时执行的任务数。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Asynchorous-Control-Flow-Patterns-with-Callbacks-使用回调的异步控制流模式&quot;&gt;&lt;a href=&quot;#Asynchorous-Control-Flow-Patterns-with-Callbacks-使用回调的异步控制流模式&quot; class=&quot;headerlink&quot; title=&quot;Asynchorous Control Flow Patterns with Callbacks(使用回调的异步控制流模式)&quot;&gt;&lt;/a&gt;Asynchorous Control Flow Patterns with Callbacks(使用回调的异步控制流模式)&lt;/h1&gt;&lt;p&gt;异步的代码使得难以预测语句的执行顺序，所以在一些场景(比如遍历一些文件，执行一系列任务等等)下，这就要求开发者去使用一些方法或技术来防止编写出低效和难以阅读的代码。&lt;/p&gt;
&lt;h2 id=&quot;The-difficulties-of-asynchonous-programming-异步编程的困难&quot;&gt;&lt;a href=&quot;#The-difficulties-of-asynchonous-programming-异步编程的困难&quot; class=&quot;headerlink&quot; title=&quot;The difficulties of asynchonous programming(异步编程的困难)&quot;&gt;&lt;/a&gt;The difficulties of asynchonous programming(异步编程的困难)&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;KISS&lt;/code&gt; 原则：Keep It Simple, Stupid，注重简约。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="学习" scheme="http://1016990109.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="读书笔记" scheme="http://1016990109.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>关系型数据库存储树形结构</title>
    <link href="http://1016990109.github.io/2018/06/05/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%98%E5%82%A8%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    <id>http://1016990109.github.io/2018/06/05/关系型数据库存储树形结构/</id>
    <published>2018-06-05T08:05:34.000Z</published>
    <updated>2018-06-06T11:40:05.005Z</updated>
    
    <content type="html"><![CDATA[<p>在日常开发中不免遇到需要在关系型数据库中存储树形结构数据的情况，这里介绍 3 种存储方法。</p><p>三种方法都以下面这个嵌套评论场景为背景。</p><a id="more"></a><p><img src="/assets/img/comment-hierarchy.png" alt="comment-hierarchy"></p><h2 id="Adjacency-model-邻接模型"><a href="#Adjacency-model-邻接模型" class="headerlink" title="Adjacency model(邻接模型)"></a>Adjacency model(邻接模型)</h2><p>这是最常见最简单的存储树形结构的方法了。每个元素都持有对父节点的引用作为外键(图中<code>PK</code>为主键，<code>FK</code>为外键)，是一个一对多的关系:</p><p><img src="/assets/img/adjacency-model.jpg" alt="Adjacency model"></p><h3 id="添加-修改"><a href="#添加-修改" class="headerlink" title="添加/修改"></a>添加/修改</h3><p>添加和删除只要操作 <code>parent_id</code> 就可以了，添加到某节点就把 <code>parent_id</code> 设为该节点 <code>id</code>，从某节点下移动到另一个节点只要把 <code>parent_id</code> 更换为其他节点的 <code>id</code> 就可以了。</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>使用 <code>parent-child</code> 方法需要删除节点就是比较复杂的了，因为不能简单地删除一个节点，这样属于该节点的子节点会找不到父节点，故而会出现一些问题，所以为了保持正确性得同时删除该节点的子节点。一种常见的做法是不直接删除该节点，而是标记该节点为删除状态，然后递归向下直到所有的后代都已经标记为删除了。</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>查询直接的父节点或者子节点是非常容易的:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- query a node's children</span></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> comments c1</span><br><span class="line">  <span class="keyword">left</span> <span class="keyword">join</span> comments c2</span><br><span class="line">    <span class="keyword">on</span> (c2.parent_id = c1.id)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- query a node's parent</span></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> comments c1</span><br><span class="line">  <span class="keyword">join</span> comments c2</span><br><span class="line">    <span class="keyword">on</span> (c1.parent_id = c2.id)</span><br></pre></td></tr></table></figure><p>但是查询一颗子树的时候就比较麻烦了，这就需要递归查询，在性能上是很大的挑战。实现的方式有两种：</p><ul><li>自顶向下查询，<code>connect by</code> 语法，这种方式较为简洁</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- query a node's subtree</span></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> comments</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">with</span> <span class="keyword">id</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">connect</span> <span class="keyword">by</span> parent_id = <span class="keyword">prior</span> <span class="keyword">id</span></span><br><span class="line"><span class="comment">-- query a node's parent is the same</span></span><br></pre></td></tr></table></figure><ul><li><p>递归实现</p><p>1.第一步定义起始的点</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  <span class="number">0</span> <span class="keyword">as</span> <span class="keyword">depth</span>,</span><br><span class="line">  <span class="keyword">id</span>,</span><br><span class="line">  <span class="keyword">comment</span>,</span><br><span class="line">  parent_id</span><br><span class="line"><span class="keyword">from</span> comments</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>2.第二步定义每个子行与父节点之间关系</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  parent.depth + <span class="number">1</span>,</span><br><span class="line">  child.id,</span><br><span class="line">  child.comment,</span><br><span class="line">  child.parent_id</span><br><span class="line"><span class="keyword">from</span> recursive_query <span class="keyword">parent</span>, comments <span class="keyword">child</span></span><br><span class="line"><span class="keyword">where</span> parent.id = child.parent_id</span><br></pre></td></tr></table></figure><p>3.结合 1 2 步</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">with recursive_query(depth, id, <span class="keyword">comment</span>, parent_id)</span><br><span class="line"><span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  <span class="number">0</span> <span class="keyword">as</span> <span class="keyword">depth</span>,</span><br><span class="line">  <span class="keyword">id</span>,</span><br><span class="line">  <span class="keyword">comment</span>,</span><br><span class="line">  parent_id</span><br><span class="line"><span class="keyword">from</span> comments</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">union</span> all</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  parent.depth + <span class="number">1</span>,</span><br><span class="line">  child.id,</span><br><span class="line">  child.comment,</span><br><span class="line">  child.parent_id</span><br><span class="line"><span class="keyword">from</span> recursive_query <span class="keyword">parent</span>, comments <span class="keyword">child</span></span><br><span class="line"><span class="keyword">where</span> parent.id = child.parent_id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> recursive_query</span><br></pre></td></tr></table></figure></li></ul><h3 id="元素数量和嵌套的层级"><a href="#元素数量和嵌套的层级" class="headerlink" title="元素数量和嵌套的层级"></a>元素数量和嵌套的层级</h3><p>理论上元素数量和层级没有限制，可以有无数层。</p><h2 id="Materialized-Path-物化路径"><a href="#Materialized-Path-物化路径" class="headerlink" title="Materialized Path(物化路径)"></a>Materialized Path(物化路径)</h2><p>使用每个节点都存储祖先链的方式实现树的存储，这种方式很容易实现面包屑导航。</p><p><img src="/assets/img/materialized-path.png" alt="materialized path"></p><h3 id="添加-修改-1"><a href="#添加-修改-1" class="headerlink" title="添加/修改"></a>添加/修改</h3><p>添加一个节点，需要先获得父节点的 <code>path</code>，再在此基础上加上新节点的 <code>id</code> 组成新的 <code>path</code>来完成添加操作。</p><p>修改的话会更麻烦一点，需要更新该节点的 <code>path</code> 以及它的所有后代的 <code>path</code>。</p><h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><p>简单删除一个节点并不破坏整棵树的完整性，该节点的子节点虽然没有父级节点，但是有爷爷辈节点。</p><h3 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h3><p>查询一个节点下面的子树是非常容易的，直接 <code>path like &#39;{node&#39;s path}%&#39;</code> 就能选出来了，而不需要递归。</p><h3 id="元素数量和嵌套的层级-1"><a href="#元素数量和嵌套的层级-1" class="headerlink" title="元素数量和嵌套的层级"></a>元素数量和嵌套的层级</h3><p>元素的数量和嵌套的层级大小是取决于开发者的，事实上很少是需要无限的层级的：如果网站嵌套层级超过 20 层，那需要考虑重新设计了而不是盲目地增加层级了。</p><p>该模式的实现方式可以有很多种，比如点分割(<code>1.1.2.5</code>)或者斜杠分割(<code>boss/chapter1/section2</code>)，有时候规定一层的字符数量，空出来的空间用特殊字符填充(比如说<code>0</code>)，就像 <code>000100020005</code> 就表示 <code>1/2/5</code> 中间用 <code>0</code> 填充，这样每一层元素数量最多就 <code>10^4</code> 个了(规定只能是数字)，而如果整个 <code>path</code> 的长度再有限制(比如说 20)，那么自然嵌套的层级也有限制了(这里是 5 层)。</p><p>所以说这些都是取决于是如何设计的。</p><h2 id="Nested-Sets-嵌套集合"><a href="#Nested-Sets-嵌套集合" class="headerlink" title="Nested Sets(嵌套集合)"></a>Nested Sets(嵌套集合)</h2><p>先上一张图来理解这个模型：</p><p><img src="/assets/img/nested-sets.png" alt="Nested Sets"></p><p>可以看到每个节点都有一个 <code>left</code> 和一个 <code>right</code>，这是代表这个节点所能容纳的范围的，一个节点的 <code>left</code> 比它所有后代的 <code>left</code> 要小，一个节点的 <code>right</code> 比它所有后代的 <code>right</code> 要大。</p><h3 id="添加-修改-2"><a href="#添加-修改-2" class="headerlink" title="添加/修改"></a>添加/修改</h3><p>添加和修改是十分复杂的，都需要重新计算节点的 <code>left</code> 与 <code>right</code>。</p><p>拿添加来说，比如给上图中第 5 个节点(它的<code>left</code>为<code>left-5</code>，<code>right</code>为<code>right-5</code>)添加子节点，那么需要做的就是把 <code>right</code> 大或等于 <code>right-5</code> 的节点都取出来，如果 <code>left</code> 大于或等于 <code>right-5</code> 那么就加 2，否则不变；<code>right</code> 全部都加 2；然后把新的节点 <code>left</code> 设为 <code>right-5</code>，<code>right</code> 设为 <code>right-5 + 1</code>，如下图：</p><p><img src="/assets/img/nested-sets-add.png" alt="Nested Sets add new node"></p><h3 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h3><p>同样的删除也是非常复杂的，这也需要重新计算 <code>left</code> 和 <code>right</code>。</p><h3 id="查询-2"><a href="#查询-2" class="headerlink" title="查询"></a>查询</h3><p>查询一颗子树是非常方便的，只需要找出所有的 <code>left</code> 比该节点大，<code>right</code> 比该节点小的所有节点就可以了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> comments</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">left</span> &gt; <span class="number">1</span> <span class="keyword">and</span> <span class="keyword">right</span> &lt; <span class="number">14</span></span><br></pre></td></tr></table></figure><h3 id="元素数量和嵌套的层级-2"><a href="#元素数量和嵌套的层级-2" class="headerlink" title="元素数量和嵌套的层级"></a>元素数量和嵌套的层级</h3><p>和邻接链表一样的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>模型</th><th>查询子节点</th><th>查询子树</th><th>删除节点</th><th>插入节点</th><th>移动子树</th></tr></thead><tbody><tr><td>Adjacency List</td><td>易</td><td>难(递归还好，相对耗时)</td><td>易</td><td>易</td><td>易</td></tr><tr><td>Materialized Path</td><td>难</td><td>易</td><td>易</td><td>易</td><td>易(但耗时)</td></tr><tr><td>Nested Sets</td><td>难</td><td>易</td><td>难</td><td>难</td><td>难</td></tr></tbody></table><p>邻接链表是较为简单的一种实现，但是想要查询一颗树的时候会有很多阻力，如 <code>Mysql 8.0</code> 以下原生是不支持递归查询的(可以自定义函数来完成这个递归操作，详情看<a href="https://explainextended.com/2009/03/17/hierarchical-queries-in-mysql" target="_blank" rel="noopener">这里</a>)，但是 <code>Oracle</code>、<code>PostgreSQL</code>、<code>SQL Server</code> 是支持的，除此之外，查询子树时存在查询效率问题(因为需要递归)。所以当你使用的场景插入或更新或删除较多的话是最好选择邻接链表模型的。如果查询树特别多，则可以使用嵌套集合模型或者物化路径模型(物化路径模型当层次较深的时候额外存储空间较大需谨慎)较为合适，当然如果使用的数据库原生支持递归语法，那么使用邻接链表模型也未尝不可，只是性能上会差一点。</p><p>总之还是根据具体情况具体分析，选择合适的才是最好的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在日常开发中不免遇到需要在关系型数据库中存储树形结构数据的情况，这里介绍 3 种存储方法。&lt;/p&gt;
&lt;p&gt;三种方法都以下面这个嵌套评论场景为背景。&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="http://1016990109.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="数据库" scheme="http://1016990109.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>git-flow 学习</title>
    <link href="http://1016990109.github.io/2018/06/05/Git-Flow-%E5%AD%A6%E4%B9%A0/"/>
    <id>http://1016990109.github.io/2018/06/05/Git-Flow-学习/</id>
    <published>2018-06-05T01:35:26.000Z</published>
    <updated>2018-06-05T07:26:25.776Z</updated>
    
    <content type="html"><![CDATA[<p>这里只是针对 <code>Git</code> 中的 <code>git-flow</code> 做一次学习记录，更加详细系统地学习 <code>Git</code> 请移步<a href="https://www.git-tower.com/learn/git/ebook" target="_blank" rel="noopener">这里</a>。</p><p>首先，<code>git-flow</code> 并不会为 <code>Git</code> 扩展任何新的功能，它仅仅使用了脚本来捆绑了一系列 <code>Git</code> 命令来完成一些特定的工作流程。</p><p>其次，定义一个固定的工作流程会使得团队协作更加简单容易。无论是一个 “版本控制的新手” 还是 “Git 专家”，每一个人都知道如何来正确地完成某个任务。</p><a id="more"></a><p>本文使用的工具是比较常用的 <a href="https://github.com/petervanderdoes/gitflow/" target="_blank" rel="noopener">gitflow-avh</a>。</p><h2 id="分支的模式"><a href="#分支的模式" class="headerlink" title="分支的模式"></a>分支的模式</h2><p><code>git-flow</code> 模式会预设两个主分支在仓库中：</p><ul><li><code>master</code>:正式发布的产品代码</li><li><code>develop</code>:开发用分支</li></ul><h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><p>看下图：</p><p><img src="/assets/img/git-flow.png" alt="git-flow"></p><ol><li>先开发功能，可能是一个也可能是多个，功能分支为 <code>feature</code>，功能开发完并合并后会删除。</li><li>功能开发完后都合并到 <code>develop</code> 分支进行汇总。</li><li>所有功能开发完后，需要发布一个版本。开出一个 <code>release</code> 分支，进行分支的最后修改，如代码中某些版本号等等。然后将 <code>release</code> 分支同时合并到 <code>master</code> 和 <code>develop</code> 分支，并打上相应的 <code>tag</code>，删除该 <code>release</code> 分支，完成一次迭代。</li><li>代码运行在 <code>master</code> 上一段时间后可能会有 <code>bug</code>，这时候开出 <code>hotfix</code> 分支对 <code>bug</code> 进行修复，修复完成后将代码合并到 <code>master</code> 和 <code>develop</code> 分支，打上修复的 <code>tag</code>，删除 <code>hotfix</code> 分支，一次在已发布版本上的修复就完成了。</li></ol><blockquote><p>注意：操作完后记得 <code>push</code> 哦！(<code>tag</code> 通过 <code>push</code> 是不会推送到远端仓库的，需要 <code>git push orign --tags</code> 推送所有 <code>tag</code>。)</p></blockquote><h2 id="功能开发"><a href="#功能开发" class="headerlink" title="功能开发"></a>功能开发</h2><p>让我们开始开发一个新功能 “rss-feed”：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git flow feature start rss-feed</span><br><span class="line">Switched to a new branch <span class="string">'feature/rss-feed'</span></span><br><span class="line"></span><br><span class="line">Summary of actions:</span><br><span class="line">- A new branch <span class="string">'feature/rss-feed'</span> was created, based on <span class="string">'develop'</span></span><br><span class="line">- You are now on branch <span class="string">'feature/rss-feed'</span></span><br></pre></td></tr></table></figure><p>经过一段时间艰苦地工作和一系列的聪明提交，我们的新功能终于完成了：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git flow feature finish rss-feed</span><br><span class="line">Switched to branch <span class="string">'develop'</span></span><br><span class="line">Updating 6bcf266..41748ad</span><br><span class="line">Fast-forward</span><br><span class="line">    feed.xml | 0</span><br><span class="line">    1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line">    create mode 100644 feed.xml</span><br><span class="line">Deleted branch feature/rss-feed (was 41748ad).</span><br></pre></td></tr></table></figure><h2 id="管理-Releases"><a href="#管理-Releases" class="headerlink" title="管理 Releases"></a>管理 Releases</h2><p>当你认为现在在 “develop” 分支的代码已经是一个成熟的 <code>release</code> 版本时，这意味着：第一，它包括所有新的功能和必要的修复；第二，它已经被彻底的测试过了。如果上述两点都满足，那就是时候开始生成一个新的 <code>release</code> 了：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git flow release start 1.1.5</span><br><span class="line">Switched to a new branch <span class="string">'release/1.1.5'</span></span><br></pre></td></tr></table></figure><p>进行最后的编辑，然后完成：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow release finish 1.1.5</span><br></pre></td></tr></table></figure><h2 id="hotfix"><a href="#hotfix" class="headerlink" title="hotfix"></a>hotfix</h2><p>很多时候，仅仅在几个小时或几天之后，当对 <code>release</code> 版本作做全面测试时，可能就会发现一些小错误。<br>在这种情况下，<code>git-flow</code> 提供一个特定的 “hotfix” 工作流程（因为在这里不管使用 “功能” 分支流程，还是 “release” 分支流程都是不恰当的）。</p><p>创建 <code>hotfix</code>：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git flow hotfix start missing-link</span><br></pre></td></tr></table></figure><p>修复完 <code>bug</code> 后就该完成了：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git flow hotfix finish missing-link</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>git-flow</code> 只是捆绑了一些命令来帮助用户来走这么一套通用的流程，当你能正确地理解工作流程的基本组成部分和目标的之后也可以不再使用这些工具了，可以根据自己的需要自定义流程。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里只是针对 &lt;code&gt;Git&lt;/code&gt; 中的 &lt;code&gt;git-flow&lt;/code&gt; 做一次学习记录，更加详细系统地学习 &lt;code&gt;Git&lt;/code&gt; 请移步&lt;a href=&quot;https://www.git-tower.com/learn/git/ebook&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;首先，&lt;code&gt;git-flow&lt;/code&gt; 并不会为 &lt;code&gt;Git&lt;/code&gt; 扩展任何新的功能，它仅仅使用了脚本来捆绑了一系列 &lt;code&gt;Git&lt;/code&gt; 命令来完成一些特定的工作流程。&lt;/p&gt;
&lt;p&gt;其次，定义一个固定的工作流程会使得团队协作更加简单容易。无论是一个 “版本控制的新手” 还是 “Git 专家”，每一个人都知道如何来正确地完成某个任务。&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="http://1016990109.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="git" scheme="http://1016990109.github.io/tags/git/"/>
    
  </entry>
  
</feed>
