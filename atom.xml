<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>七秒悲伤的博客</title>
  
  <subtitle>一个深藏功与名的软件开发爱好者</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://1016990109.github.io/"/>
  <updated>2018-06-12T09:21:58.526Z</updated>
  <id>http://1016990109.github.io/</id>
  
  <author>
    <name>七秒悲伤</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node 服务部署</title>
    <link href="http://1016990109.github.io/2018/06/09/Node-%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/"/>
    <id>http://1016990109.github.io/2018/06/09/Node-服务部署/</id>
    <published>2018-06-09T01:36:22.000Z</published>
    <updated>2018-06-12T09:21:58.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="forever-与-pm2"><a href="#forever-与-pm2" class="headerlink" title="forever 与 pm2"></a>forever 与 pm2</h2><p>在之前部署 <code>Node.js</code> 服务都是使用 <code>forever</code> 的，现在基本上都改为 <code>pm2</code> 了，<code>pm2</code> 比 <code>forever</code> 功能更加强大，可以配置集群、集成日志、控制台监视等等，下面是两者的比较：</p><table><thead><tr><th>Feature</th><th>Forever</th><th>PM2</th></tr></thead><tbody><tr><td>Keep Alive</td><td>✔</td><td>✔</td></tr><tr><td>Coffeescript</td><td>✔</td><td></td></tr><tr><td>Log aggregation</td><td></td><td>✔</td></tr><tr><td>API</td><td></td><td>✔</td></tr><tr><td>Terminal monitoring</td><td></td><td>✔</td></tr><tr><td>Clustering</td><td></td><td>✔</td></tr><tr><td>JSON configuration</td><td></td><td>✔</td></tr></tbody></table><a id="more"></a><p>所以如果还在使用 <code>forever</code> 的读者，快快加入到 <code>pm2</code> 的阵营来吧。</p><h2 id="pm2-使用"><a href="#pm2-使用" class="headerlink" title="pm2 使用"></a>pm2 使用</h2><p>详情请看<a href="https://pm2.io/doc/en/runtime/overview/" target="_blank" rel="noopener">官方文档</a></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><code>pm2</code> 可以直接在命令行中通过参数配置，也可以用过 <code>ecosystem.config.js</code> 文件来配置，<code>pm2 init</code> 初始化一个配置文件如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  apps : [&#123;</span><br><span class="line">    name: <span class="string">"app"</span>,</span><br><span class="line">    script: <span class="string">"./app.js"</span>,</span><br><span class="line">    env: &#123;</span><br><span class="line">      NODE_ENV: <span class="string">"development"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    env_production: &#123;</span><br><span class="line">      NODE_ENV: <span class="string">"production"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// deploy config(部署配置也在这里)</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="集成-log"><a href="#集成-log" class="headerlink" title="集成 log"></a>集成 log</h3><p>可以单独配置普通输出和错误输出到不同的文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  apps: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'app'</span>,</span><br><span class="line">      script: <span class="string">'app.js'</span>,</span><br><span class="line">      output: <span class="string">'./out.log'</span>,</span><br><span class="line">      error: <span class="string">'./error.log'</span>,</span><br><span class="line">      log: <span class="string">'./combined.outerr.log'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时也可以集成 <code>pm2-logrotate</code> 工具来管理日志，可以配置日志分片大小、时间、名字等等。</p><h3 id="自启动"><a href="#自启动" class="headerlink" title="自启动"></a>自启动</h3><p><code>pm2</code> 可以配置开机启动，通过 <code>pm2 startup</code> 命令会自动提示你该怎么配置自启动。</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p><code>pm2</code> 支持集群模式，可以在不更改代码的前提下自动帮你配置集群，有效利用系统的 <code>CPU</code> 资源，充分利用计算机能力，消除 <code>Node.js</code> 单线程的瓶颈，可以同时启动多个进程来监听同一个端口(这在文后会提到具体怎么实现多进程监听)，提高性能。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-i &lt;number-instances&gt;</span><br></pre></td></tr></table></figure><p>或者配置 <code>ecosystem.config.js</code> 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  apps: [</span><br><span class="line">    &#123;</span><br><span class="line">      script: <span class="string">'app.js'</span>,</span><br><span class="line">      instances: <span class="string">'max'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SSH-部署"><a href="#SSH-部署" class="headerlink" title="SSH 部署"></a>SSH 部署</h3><p><code>pm2</code> 还支持自动化将代码部署到远程服务器，只需要做一些简单的配置即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  apps: [&#123;</span><br><span class="line">    name: <span class="string">"app"</span>,</span><br><span class="line">    script: <span class="string">"app.js"</span></span><br><span class="line">  &#125;],</span><br><span class="line">  deploy: &#123;</span><br><span class="line">    <span class="comment">// "production" is the environment name</span></span><br><span class="line">    production: &#123;</span><br><span class="line">      <span class="comment">// SSH key path, default to $HOME/.ssh</span></span><br><span class="line">      key: <span class="string">"/path/to/some.pem"</span>,</span><br><span class="line">      <span class="comment">// SSH user</span></span><br><span class="line">      user: <span class="string">"ubuntu"</span>,</span><br><span class="line">      <span class="comment">// SSH host</span></span><br><span class="line">      host: [<span class="string">"192.168.0.13"</span>],</span><br><span class="line">      <span class="comment">// SSH options with no command-line flag, see 'man ssh'</span></span><br><span class="line">      <span class="comment">// can be either a single string or an array of strings</span></span><br><span class="line">      ssh_options: <span class="string">"StrictHostKeyChecking=no"</span>,</span><br><span class="line">      <span class="comment">// GIT remote/branch</span></span><br><span class="line">      ref: <span class="string">"origin/master"</span>,</span><br><span class="line">      <span class="comment">// GIT remote</span></span><br><span class="line">      repo: <span class="string">"git@github.com:Username/repository.git"</span>,</span><br><span class="line">      <span class="comment">// path in the server</span></span><br><span class="line">      path: <span class="string">"/var/www/my-repository"</span>,</span><br><span class="line">      <span class="comment">// Pre-setup command or path to a script on your local machine</span></span><br><span class="line">      pre-setup: <span class="string">"apt-get install git ; ls -la"</span>,</span><br><span class="line">      <span class="comment">// Post-setup commands or path to a script on the host machine</span></span><br><span class="line">      <span class="comment">// eg: placing configurations in the shared dir etc</span></span><br><span class="line">      post-setup: <span class="string">"ls -la"</span>,</span><br><span class="line">      <span class="comment">// pre-deploy action</span></span><br><span class="line">      pre-deploy-local: <span class="string">"echo 'This is a local executed command'"</span></span><br><span class="line">      <span class="comment">// post-deploy action</span></span><br><span class="line">      post-deploy: <span class="string">"npm install"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>如果使用集群模式需要主要应用得是个无状态应用，所以诸如 <code>sessions</code>、<code>websocket connection</code> 等不要使用，可以使用 <code>Redis</code> 等来共享应用的状态。</li><li>关闭应用之前最好确认所有的请求已经被处理，数据库连接已经释放，释放其他资源。</li></ol><h2 id="cluster-原理"><a href="#cluster-原理" class="headerlink" title="cluster 原理"></a>cluster 原理</h2><p><code>pm2</code> 集群其实是封装了 <code>cluster</code> 模块的一系列操作，自动包装代码启动集群，重加载的时候也是先启动新的 <code>worker</code> 再把之前的 <code>worker</code> 停掉等等。</p><p>这里是一个简单的 <code>cluster</code> 的示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">'cluster'</span>)</span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cluster.isMaster) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, n = os.cpus().length; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">    cluster.fork()</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  http</span><br><span class="line">    .createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">      res.writeHead(<span class="number">200</span>)</span><br><span class="line">      res.end(<span class="string">'hello world\n'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .listen(<span class="number">8000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>fork</code> 的本质还是使用了 <code>child_process.fork</code> 生成的子进程，但是注意不能直接使用 <code>child_process.fork()</code> 来生成，因为这样会缺少 <code>process.env.NODE_UNIQUE_ID</code>，会导致 <code>cluster.isMaster</code> 判断总是为 <code>true</code>。</p><p>运行时，所有新建立的连接都由主进程完成，然后主进程再把 <code>TCP</code> 连接分配给指定的 <code>worker</code> 进程。分配根据 <code>Round-robin</code> 算法分发，子进程 <code>worker</code> 具体处理请求。</p><p>更加详细的 <code>cluser</code> 用法与讲解可查看<a href="http://javascript.ruanyifeng.com/nodejs/cluster.html" target="_blank" rel="noopener">阮一峰的博客</a> 和 <a href="https://nodejs.org/dist/latest-v10.x/docs/api/cluster.html" target="_blank" rel="noopener">官方文档</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;forever-与-pm2&quot;&gt;&lt;a href=&quot;#forever-与-pm2&quot; class=&quot;headerlink&quot; title=&quot;forever 与 pm2&quot;&gt;&lt;/a&gt;forever 与 pm2&lt;/h2&gt;&lt;p&gt;在之前部署 &lt;code&gt;Node.js&lt;/code&gt; 服务都是使用 &lt;code&gt;forever&lt;/code&gt; 的，现在基本上都改为 &lt;code&gt;pm2&lt;/code&gt; 了，&lt;code&gt;pm2&lt;/code&gt; 比 &lt;code&gt;forever&lt;/code&gt; 功能更加强大，可以配置集群、集成日志、控制台监视等等，下面是两者的比较：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Forever&lt;/th&gt;
&lt;th&gt;PM2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Keep Alive&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Coffeescript&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Log aggregation&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;API&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Terminal monitoring&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Clustering&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JSON configuration&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="Node" scheme="http://1016990109.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>《Node.js 设计模式》读书笔记 第三章</title>
    <link href="http://1016990109.github.io/2018/06/07/Node-js-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%89%E7%AB%A0/"/>
    <id>http://1016990109.github.io/2018/06/07/Node-js-设计模式读书笔记-第三章/</id>
    <published>2018-06-07T02:39:52.000Z</published>
    <updated>2018-06-11T12:04:13.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Asynchorous-Control-Flow-Patterns-with-Callbacks-使用回调的异步控制流模式"><a href="#Asynchorous-Control-Flow-Patterns-with-Callbacks-使用回调的异步控制流模式" class="headerlink" title="Asynchorous Control Flow Patterns with Callbacks(使用回调的异步控制流模式)"></a>Asynchorous Control Flow Patterns with Callbacks(使用回调的异步控制流模式)</h1><p>异步的代码使得难以预测语句的执行顺序，所以在一些场景(比如遍历一些文件，执行一系列任务等等)下，这就要求开发者去使用一些方法或技术来防止编写出低效和难以阅读的代码。</p><h2 id="The-difficulties-of-asynchonous-programming-异步编程的困难"><a href="#The-difficulties-of-asynchonous-programming-异步编程的困难" class="headerlink" title="The difficulties of asynchonous programming(异步编程的困难)"></a>The difficulties of asynchonous programming(异步编程的困难)</h2><blockquote><p><code>KISS</code> 原则：Keep It Simple, Stupid，注重简约。</p></blockquote><a id="more"></a><p>匿名函数的闭包和原地定义使得开发者不用跳去另外一个地方写代码，这样编程就变得非常顺利。(比先去定义一个函数再回来引入要简单多了)这很好地体现了 <code>KISS</code> 原则，因为它是简单的，保持了代码编写的流(或理解为顺序吧)，开发时间少。但是当嵌套的层次变得多了起来之后，可维护性、复用性、模块性就被破坏了</p><h3 id="Creating-a-simple-web-spider-创建一个简单的-web-爬虫"><a href="#Creating-a-simple-web-spider-创建一个简单的-web-爬虫" class="headerlink" title="Creating a simple web spider(创建一个简单的 web 爬虫)"></a>Creating a simple web spider(创建一个简单的 web 爬虫)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file spider.js</span></span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> mkdirp = <span class="built_in">require</span>(<span class="string">'mkdirp'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> utilities = <span class="built_in">require</span>(<span class="string">'./utilities'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spider</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> filename = utilities.urlToFilename(url)</span><br><span class="line">  fs.exists(filename, exists =&gt; &#123;</span><br><span class="line">    <span class="comment">//[1]</span></span><br><span class="line">    <span class="keyword">if</span> (!exists) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`Downloading <span class="subst">$&#123;url&#125;</span>`</span>)</span><br><span class="line">      request(url, (err, response, body) =&gt; &#123;</span><br><span class="line">        <span class="comment">//[2]</span></span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          callback(err)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          mkdirp(path.dirname(filename), err =&gt; &#123;</span><br><span class="line">            <span class="comment">//[3]</span></span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">              callback(err)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              fs.writeFile(filename, body, err =&gt; &#123;</span><br><span class="line">                <span class="comment">//[4]</span></span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                  callback(err)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  callback(<span class="literal">null</span>, filename, <span class="literal">true</span>)</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      callback(<span class="literal">null</span>, filename, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述函数执行下面的任务：</p><ol><li>通过查看相关的文件已经是否被创建来检查 <code>URL</code> 是不是已经被下载过了:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.exists(filename, exists =&gt; ...</span><br></pre></td></tr></table></figure><ol start="2"><li>文件没有找到，则下载 <code>URL</code>:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request(url, (err, response, body) =&gt; ...</span><br></pre></td></tr></table></figure><ol start="3"><li>保证包含该文件的文件夹存在:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdirp(path.dirname(filename), err =&gt; ...</span><br></pre></td></tr></table></figure><ol start="4"><li>最后将 <code>HTTP</code> 响应内容写入文件系统的文件中:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.writeFile(filename, body, err =&gt; ...</span><br></pre></td></tr></table></figure><p>使用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spider(process.argv[<span class="number">2</span>], (err, filename, downloaded) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (downloaded) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Completed the download of "<span class="subst">$&#123;filename&#125;</span>"`</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`"<span class="subst">$&#123;filename&#125;</span>" was already downloaded`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="The-callback-hell-回调地狱"><a href="#The-callback-hell-回调地狱" class="headerlink" title="The callback hell(回调地狱)"></a>The callback hell(回调地狱)</h3><p>从上面的 <code>spider()</code> 函数中可以看到，尽管我们非常直接清晰地实现这个算法，但是代码还是有很多层的缩进导致难以阅读。</p><p>当然将上面的逻辑使用同步代码的方式实现会更加直接，而且出错的概率也会变得更小，但是阻塞就会使得效率更低，而且使用异步 <code>CPS</code> 风格也是另外一种尝试了。</p><p>这种大量的闭包和内联回调函数定义导致代码变得不可读和不可控的场景称为回调地狱:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">asyncFoo(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  asyncBar(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    asyncFooBar(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面这种代码一个显而易见的问题就是降低了可读性，当层次变得很多的时候会看不清一个函数是什么时候结束的或者另一个函数是什么时候开始的。</p><p>另一个问题就是变量名的重叠，有时候我们不得不使用相似的甚至相同的名字来描述一个内容，例如错误处理中使用 <code>err1</code> 、<code>err2</code>、<code>err3</code> 表示错误，甚至是直接使用相同的名字如 <code>err</code>，这些都不是好的实现，并且会导致混淆，提高缺陷发生的概率。</p><p>还有一点需要注意，虽然闭包在性能和内存上代价较小，但是这可能导致不易识别的内存泄漏，因为被一个活动的闭包持有的上下文引用是不会被垃圾回收的。</p><blockquote><p>想知道闭包怎么在 <code>V8</code> 中工作的可以看<a href="https://mrale.ph/blog/2012/09/23/grokking-v8-closures-for-fun.html" target="_blank" rel="noopener">这里</a></p></blockquote><h2 id="Using-plain-JavaScript-使用纯-JavaScript"><a href="#Using-plain-JavaScript-使用纯-JavaScript" class="headerlink" title="Using plain JavaScript(使用纯 JavaScript)"></a>Using plain JavaScript(使用纯 JavaScript)</h2><h3 id="Callback-decipline-回调准则"><a href="#Callback-decipline-回调准则" class="headerlink" title="Callback decipline(回调准则)"></a>Callback decipline(回调准则)</h3><p>写异步函数的第一准则就是不要滥用闭包。</p><p>下面是一些减少嵌套层次的原则：</p><ul><li>尽快返回。根据上下文，使用 <code>return</code>、<code>continue</code> 或 <code>break</code>，以便立即退出当前代码块，而不是写完整的 <code>if...else</code> 的语句。</li><li>给函数命名，将中间结果作为参数传递。</li><li>模块化代码。尽可能地将代码分成更小、更可复用的函数。</li></ul><h3 id="Applying-the-callback-decipline-应用回调准则"><a href="#Applying-the-callback-decipline-应用回调准则" class="headerlink" title="Applying the callback decipline(应用回调准则)"></a>Applying the callback decipline(应用回调准则)</h3><p>我们来应用这些准则来修复上面的 <code>spider</code> 应用。</p><p>第一步：移除 <code>else</code> 语句，发现错误后立即返回，可以发现很容易就较少了嵌套的层级了(少了 <code>else</code> 那一层级)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line">  <span class="keyword">return</span> callback(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//code to execute when there are no errors</span></span><br></pre></td></tr></table></figure><p>第二步：识别可复用的代码，独立出来为一个函数，这里为写入字符串到一个文件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveFile</span>(<span class="params">filename, contents, callback</span>) </span>&#123;</span><br><span class="line">  mkdirp(path.dirname(filename), err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fs.writeFile(filename, contents, callback)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的也可以独立出一个 <code>download(url, filename, callback)</code> 函数来下载 <code>URL</code> 内容。</p><p>最后一步：整合上面的两步，修改 <code>spider()</code> 函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spider</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> filename = utilities.urlToFilename(url)</span><br><span class="line">  fs.exists(filename, exists =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (exists) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(<span class="literal">null</span>, filename, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    download(url, filename, err =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(err)</span><br><span class="line">      &#125;</span><br><span class="line">      callback(<span class="literal">null</span>, filename, <span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现只是简单地重新组织了代码，嵌套的层级就降低了很多，代码也变得更易读了。</p><blockquote><p>其中的 <code>saveFile()</code> 和 <code>download</code> 还可以考虑导出给其他模块使用，增加了复用性。</p></blockquote><h3 id="Sequential-execution-顺序执行"><a href="#Sequential-execution-顺序执行" class="headerlink" title="Sequential execution(顺序执行)"></a>Sequential execution(顺序执行)</h3><p>当需要顺序执行一组任务时(比如先对数据预处理，接着在按照步骤一步步处理数据等等)，尽管使用同步代码容易实现，但是在使用异步 <code>CPS</code> 风格来做时就可能导致回调地狱了。</p><h4 id="Executing-a-known-set-of-tasks-in-sequence-顺序执行一个已知的任务集合"><a href="#Executing-a-known-set-of-tasks-in-sequence-顺序执行一个已知的任务集合" class="headerlink" title="Executing a known set of tasks in sequence(顺序执行一个已知的任务集合)"></a>Executing a known set of tasks in sequence(顺序执行一个已知的任务集合)</h4><p>直接上代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">task1</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  asyncOperation(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    task2(callback);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">task2</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  asyncOperation(result() =&gt; &#123;</span><br><span class="line">    task3(callback);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">task3</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  asyncOperation(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    callback(); <span class="comment">//finally executes the callback</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task1(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//executed when task1, task2 and task3 are completed</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'tasks 1, 2 and 3 executed'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面演示了在一个任务中，当异步操作完成时如何调用下一个任务，这告诉我们处理异步代码不一定需要闭包。</p><h4 id="Sequential-iteration-顺序迭代"><a href="#Sequential-iteration-顺序迭代" class="headerlink" title="Sequential iteration(顺序迭代)"></a>Sequential iteration(顺序迭代)</h4><p>上面示例中，我们是知道有多少任务要执行的，那么当任务数量和具体任务不清楚的时候该怎么办呢，我们就不能硬编码任务执行顺序了，得动态地生成。</p><h5 id="Web-spider-version-2-Web-爬虫第-2-版"><a href="#Web-spider-version-2-Web-爬虫第-2-版" class="headerlink" title="Web spider version 2(Web 爬虫第 2 版)"></a>Web spider version 2(Web 爬虫第 2 版)</h5><p>为了显示顺序迭代的例子，让我们为 <code>Web</code> 爬虫应用程序引入一个新功能：我们现在想要递归地下载网页中的所有链接。</p><p>第一步是修改我们的 <code>spider()</code> 函数，以便通过调用一个名为 <code>spiderLinks()</code> 的函数触发页面所有链接的递归下载。</p><p>此外，我们现在尝试读取文件，而不是检查文件是否已经存在，并开始爬取其链接。这样，我们就可以在中断爬虫后恢复爬虫而不需要继续下载。最后还有一个变化是传递一个新的参数 <code>nesting</code>，用来限制递归深度。结果代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spider</span>(<span class="params">url, nesting, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> filename = utilities.urlToFilename(url);</span><br><span class="line">  fs.readFile(filename, <span class="string">'utf8'</span>, (err, body) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err.code! == <span class="string">'ENOENT'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(err);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> download(url, filename, (err, body) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> callback(err);</span><br><span class="line">        &#125;</span><br><span class="line">        spiderLinks(url, body, nesting, callback);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    spiderLinks(url, body, nesting, callback);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Sequential-crawling-of-links-顺序爬取连接"><a href="#Sequential-crawling-of-links-顺序爬取连接" class="headerlink" title="Sequential crawling of links(顺序爬取连接)"></a>Sequential crawling of links(顺序爬取连接)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spiderLinks</span>(<span class="params">currentUrl, body, nesting, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nesting === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> process.nextTick(callback)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> links = utilities.getPageLinks(currentUrl, body) <span class="comment">//[1]</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">iterate</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//[2]</span></span><br><span class="line">    <span class="keyword">if</span> (index === links.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    spider(links[index], nesting - <span class="number">1</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//[3]</span></span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(err)</span><br><span class="line">      &#125;</span><br><span class="line">      iterate(index + <span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  iterate(<span class="number">0</span>) <span class="comment">//[4]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>我们使用 <code>utilities.getPageLinks()</code> 函数获取页面中包含的所有链接的列表。此函数仅返回指向相同主机名的链接。</li><li>我们使用 <code>iterate()</code> 本地函数来遍历链接，该函数需要下一个链接的索引进行分析。在这个函数中，我们首先要检查索引是否等于链接数组的长度，如果等于则是迭代完成，在这种情况下我们立即调用 <code>callback()</code> 函数，因为这意味着我们处理了所有的项目。</li><li>这时，已准备好处理链接。我们减少嵌套层级(<code>nesting - 1</code>)后调用 <code>spider()</code>，然后当操作完成后继续下一个迭代(<code>index + 1</code>)。</li><li>调用 <code>iterate(0)</code> 来开始迭代。</li></ol><p>现在这个 <code>spider</code> 已经可以递归的爬取网页的链接了。中断(<code>ctrl + c</code>)后再次启动也可以继续上次的任务。</p><h5 id="The-pattern-迭代模式"><a href="#The-pattern-迭代模式" class="headerlink" title="The pattern(迭代模式)"></a>The pattern(迭代模式)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iterate</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (index === tasks.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> finish()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> task = tasks[index]</span><br><span class="line">  task(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    iterate(index + <span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">finish</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 迭代完成的操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">iterate(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>上面表示了异步任务需要按顺序执行时的一个通用模式，可以在集合的元素或通常的任务列表上按顺序异步迭代。</p><blockquote><p>注意，当 <code>task</code> 是同步任务的时候，那就是一个同步递归操作了，这可能会造成栈溢出。</p></blockquote><h3 id="Parallel-execution-并行执行"><a href="#Parallel-execution-并行执行" class="headerlink" title="Parallel execution(并行执行)"></a>Parallel execution(并行执行)</h3><p>在 <code>Node.js</code> 中，我们只能并行执行异步操作，因为它们的并发性由非阻塞 <code>API</code> 在内部处理。在 <code>Node.js</code> 中，同步阻塞操作不能并行运行，除非它们被插入异步操作中或使用 <code>setTimeout</code> 之类的做延迟。</p><h4 id="Web-spider-version-3-Web-爬虫第-3-版"><a href="#Web-spider-version-3-Web-爬虫第-3-版" class="headerlink" title="Web spider version 3(Web 爬虫第 3 版)"></a>Web spider version 3(Web 爬虫第 3 版)</h4><p>现在需要并行地下载网页的内容，只需要略做修改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spiderLinks</span>(<span class="params">currentUrl, body, nesting, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nesting === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> process.nextTick(callback)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> links = utilities.getPageLinks(currentUrl, body)</span><br><span class="line">  <span class="keyword">if</span> (links.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> process.nextTick(callback)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> completed = <span class="number">0</span>,</span><br><span class="line">    hasErrors = <span class="literal">false</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">done</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      hasErrors = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">return</span> callback(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (++completed === links.length &amp;&amp; !hasErrors) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  links.forEach(<span class="function"><span class="params">link</span> =&gt;</span> &#123;</span><br><span class="line">    spider(link, nesting - <span class="number">1</span>, done)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>forEach</code> 同时爬取链接列表中的链接，而不用等待前一个爬取完了才开始爬取下一个，增加一个 <code>completed</code> 变量记录已经爬取完的链接数，当 <code>completed</code> 等于链接个数时就说明所有的链接都已爬取完了，就可以调用最后的回调函数了。或者说当中间出错了也会立即执行回调函数返回。</p><h4 id="The-pattern-并行模式"><a href="#The-pattern-并行模式" class="headerlink" title="The pattern(并行模式)"></a>The pattern(并行模式)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tasks = [</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">let</span> completed = <span class="number">0</span></span><br><span class="line">tasks.forEach(<span class="function"><span class="params">task</span> =&gt;</span> &#123;</span><br><span class="line">  task(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (++completed === tasks.length) &#123;</span><br><span class="line">      finish()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">finish</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 所有任务执行完成后调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时启动一系列任务，通过记录任务回调函数完成的个数来判断所有任务是否都完成了。</p><h4 id="Fixing-race-conditions-with-concurrent-tasks-修复并发任务中竞争条件"><a href="#Fixing-race-conditions-with-concurrent-tasks-修复并发任务中竞争条件" class="headerlink" title="Fixing race conditions with concurrent tasks(修复并发任务中竞争条件)"></a>Fixing race conditions with concurrent tasks(修复并发任务中竞争条件)</h4><p>在传统的多线程中处理竞争条件通常是锁、互斥条件、信号量和监视器，这些是多线程语言并行化的最复杂的方面之一，对性能也有很大的影响。但是 <code>Node.js</code> 就不同了，它本身就是运行在一个单线程上，这就变得简单多了。但是这不意味着就没有竞争条件了，相反还很普遍。就拿上面的爬虫例子来说，如果有两个爬虫同时运行，都在操作同一个 <code>URL</code> 时，<code>fs.readFile</code> 都读取不到文件，那么两个爬虫就同时去下载这个链接，这就导致了会同时写入内容到同一个文件中。修复办法很简单，在两个 <code>spider</code> 外面定义一个共享的变量记录爬取的链接，如果爬取过则另外一个 <code>spider</code> 就不再爬取：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> spidering = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">spider</span>(<span class="params">url, nesting, callback</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(spidering.has(url)) &#123;</span><br><span class="line">       <span class="keyword">return</span> process.nextTick(callback);</span><br><span class="line">     &#125;</span><br><span class="line">     spidering.set(url, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><h3 id="Limited-parallel-execution-有限制的并行执行"><a href="#Limited-parallel-execution-有限制的并行执行" class="headerlink" title="Limited parallel execution(有限制的并行执行)"></a>Limited parallel execution(有限制的并行执行)</h3><p>不对并行任务做控制的话很容易导致昂贵的开销，例如同时读取很多文件会导致系统资源不足，在 web 应用中还可能导致 <code>DoS</code> 攻击，所以限制同一时间任务的执行数是非常重要的。</p><h4 id="Limiting-the-concurrency-限制并行数"><a href="#Limiting-the-concurrency-限制并行数" class="headerlink" title="Limiting the concurrency(限制并行数)"></a>Limiting the concurrency(限制并行数)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tasks = ...</span><br><span class="line"><span class="keyword">let</span> concurrency = <span class="number">2</span>, running = <span class="number">0</span>, completed = <span class="number">0</span>, index = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(running &lt; concurrency &amp;&amp; index &lt; tasks.length) &#123;</span><br><span class="line">    task = tasks[index++];</span><br><span class="line">    task(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(completed === tasks.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> finish();</span><br><span class="line">      &#125;</span><br><span class="line">      completed++, running--;</span><br><span class="line">      next();</span><br><span class="line">&#125;);</span><br><span class="line">running++; &#125;</span><br><span class="line">&#125; next();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">finish</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//all tasks finished</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面所展示的模式就可以限制同时最大任务数为 2，启动时同时开始最大任务数的任务，之后每当有一个任务结束时，就会从剩下的任务中挑出一个任务开始执行，保持在限制范围内的最多任务同时进行。</p><h4 id="Globally-limiting-the-concurrency-全局地限制并发数"><a href="#Globally-limiting-the-concurrency-全局地限制并发数" class="headerlink" title="Globally limiting the concurrency(全局地限制并发数)"></a>Globally limiting the concurrency(全局地限制并发数)</h4><blockquote><p><code>Node.js</code> 0.11 版本以前是默认限制同一个主机名下最大 <code>HTTP</code> 连接数为 5 的，这个可以满足我们的需要。但是在之后的版本就取消了这个默认限制了。</p></blockquote><h5 id="Queues-to-rescue-队列来拯救"><a href="#Queues-to-rescue-队列来拯救" class="headerlink" title="Queues to rescue(队列来拯救)"></a>Queues to rescue(队列来拯救)</h5><p>我们需要的是限制同时下载的任务数，可以使用队列来解决：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskQueue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(concurrency) &#123;</span><br><span class="line">    <span class="keyword">this</span>.concurrency = concurrency</span><br><span class="line">    <span class="keyword">this</span>.running = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.queue = []</span><br><span class="line">  &#125;</span><br><span class="line">  pushTask(task) &#123;</span><br><span class="line">    <span class="keyword">this</span>.queue.push(task)</span><br><span class="line">    <span class="keyword">this</span>.next()</span><br><span class="line">  &#125;</span><br><span class="line">  next() &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">this</span>.running &lt; <span class="keyword">this</span>.concurrency &amp;&amp; <span class="keyword">this</span>.queue.length) &#123;</span><br><span class="line">      <span class="keyword">const</span> task = <span class="keyword">this</span>.queue.shift()</span><br><span class="line">      task(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.running--</span><br><span class="line">        <span class="keyword">this</span>.next()</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">this</span>.running++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 <code>pushTask</code> 添加任务，然后启动 <code>next</code> 来开始执行任务，<code>next</code> 会自动识别是否任务数达到上限。</p><h5 id="Web-spider-version-Web-爬虫第-4-版"><a href="#Web-spider-version-Web-爬虫第-4-版" class="headerlink" title="Web spider version(Web 爬虫第 4 版)"></a>Web spider version(Web 爬虫第 4 版)</h5><p>使用上面的队列来更改我们的爬虫程序：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> TaskQueue = <span class="built_in">require</span>(<span class="string">'./taskQueue'</span>)</span><br><span class="line"><span class="keyword">const</span> downloadQueue = <span class="keyword">new</span> TaskQueue(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spiderLinks</span>(<span class="params">currentUrl, body, nesting, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nesting === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> process.nextTick(callback)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> links = utilities.getPageLinks(currentUrl, body)</span><br><span class="line">  <span class="keyword">if</span> (links.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> process.nextTick(callback)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> completed = <span class="number">0</span>,</span><br><span class="line">    hasErrors = <span class="literal">false</span></span><br><span class="line">  links.forEach(<span class="function"><span class="params">link</span> =&gt;</span> &#123;</span><br><span class="line">    downloadQueue.pushTask(<span class="function"><span class="params">done</span> =&gt;</span> &#123;</span><br><span class="line">      spider(link, nesting - <span class="number">1</span>, err =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          hasErrors = <span class="literal">true</span></span><br><span class="line">          <span class="keyword">return</span> callback(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (++completed === links.length &amp;&amp; !hasErrors) &#123;</span><br><span class="line">          callback()</span><br><span class="line">        &#125;</span><br><span class="line">        done()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="The-async-library-async-库"><a href="#The-async-library-async-库" class="headerlink" title="The async library(async 库)"></a>The async library(async 库)</h2><h3 id="Sequential-execution-顺序执行-1"><a href="#Sequential-execution-顺序执行-1" class="headerlink" title="Sequential execution(顺序执行)"></a>Sequential execution(顺序执行)</h3><p><code>async</code> 库可以在实现复杂的异步控制流程时很大程度上帮助我们，但是选择正确的方法来处理具体问题是一个问题。顺序执行就有大约有 20 种方法，<code>eachSeries()</code>, <code>mapSeries()</code>, <code>filterSeries()</code>等等。</p><h4 id="Sequential-execution-of-a-known-set-of-tasks-已知任务的顺序执行"><a href="#Sequential-execution-of-a-known-set-of-tasks-已知任务的顺序执行" class="headerlink" title="Sequential execution of a known set of tasks(已知任务的顺序执行)"></a>Sequential execution of a known set of tasks(已知任务的顺序执行)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span>.series(tasks, [callback])</span><br></pre></td></tr></table></figure><p><code>series</code> 顺序执行一组任务，在所有任务调用回调函数 <code>callback</code>。而每一个 <code>task</code> 只是个接受回调函数的函数 <code>function task(callback) {}</code>，当某一个任务回调时发送了错误，那么 <code>async</code> 会停止后面的任务，直接到最后的回调函数。</p><h4 id="Sequential-iteration-顺序迭代-1"><a href="#Sequential-iteration-顺序迭代-1" class="headerlink" title="Sequential iteration(顺序迭代)"></a>Sequential iteration(顺序迭代)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span>.eachSeries(iterable, fn(item, callback), [callback])</span><br></pre></td></tr></table></figure><p>遍历一个可遍历的对象，顺序执行每一个元素对应的函数，所有元素对应的函数执行完后调用最后的回调函数。</p><h3 id="Parallel-execution-并行执行-1"><a href="#Parallel-execution-并行执行-1" class="headerlink" title="Parallel execution(并行执行)"></a>Parallel execution(并行执行)</h3><p><code>each()</code>，<code>map()</code>，<code>filter()</code>，<code>reject()</code>，<code>detect()</code>，<code>some()</code>，<code>every()</code>，<code>concat()</code>，<code>parallel()</code>，<code>applyEach()</code> 和 <code>times()</code> 都是并行执行的 <code>async</code> 的方法。</p><h3 id="Limited-parallel-execution-限制并行执行"><a href="#Limited-parallel-execution-限制并行执行" class="headerlink" title="Limited parallel execution(限制并行执行)"></a>Limited parallel execution(限制并行执行)</h3><p>类似于 <code>async.queue(worker, concurrency)</code> 来限制同时执行的任务数。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Asynchorous-Control-Flow-Patterns-with-Callbacks-使用回调的异步控制流模式&quot;&gt;&lt;a href=&quot;#Asynchorous-Control-Flow-Patterns-with-Callbacks-使用回调的异步控制流模式&quot; class=&quot;headerlink&quot; title=&quot;Asynchorous Control Flow Patterns with Callbacks(使用回调的异步控制流模式)&quot;&gt;&lt;/a&gt;Asynchorous Control Flow Patterns with Callbacks(使用回调的异步控制流模式)&lt;/h1&gt;&lt;p&gt;异步的代码使得难以预测语句的执行顺序，所以在一些场景(比如遍历一些文件，执行一系列任务等等)下，这就要求开发者去使用一些方法或技术来防止编写出低效和难以阅读的代码。&lt;/p&gt;
&lt;h2 id=&quot;The-difficulties-of-asynchonous-programming-异步编程的困难&quot;&gt;&lt;a href=&quot;#The-difficulties-of-asynchonous-programming-异步编程的困难&quot; class=&quot;headerlink&quot; title=&quot;The difficulties of asynchonous programming(异步编程的困难)&quot;&gt;&lt;/a&gt;The difficulties of asynchonous programming(异步编程的困难)&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;KISS&lt;/code&gt; 原则：Keep It Simple, Stupid，注重简约。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="学习" scheme="http://1016990109.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="读书笔记" scheme="http://1016990109.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>关系型数据库存储树形结构</title>
    <link href="http://1016990109.github.io/2018/06/05/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%98%E5%82%A8%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    <id>http://1016990109.github.io/2018/06/05/关系型数据库存储树形结构/</id>
    <published>2018-06-05T08:05:34.000Z</published>
    <updated>2018-06-06T11:40:05.005Z</updated>
    
    <content type="html"><![CDATA[<p>在日常开发中不免遇到需要在关系型数据库中存储树形结构数据的情况，这里介绍 3 种存储方法。</p><p>三种方法都以下面这个嵌套评论场景为背景。</p><a id="more"></a><p><img src="/assets/img/comment-hierarchy.png" alt="comment-hierarchy"></p><h2 id="Adjacency-model-邻接模型"><a href="#Adjacency-model-邻接模型" class="headerlink" title="Adjacency model(邻接模型)"></a>Adjacency model(邻接模型)</h2><p>这是最常见最简单的存储树形结构的方法了。每个元素都持有对父节点的引用作为外键(图中<code>PK</code>为主键，<code>FK</code>为外键)，是一个一对多的关系:</p><p><img src="/assets/img/adjacency-model.jpg" alt="Adjacency model"></p><h3 id="添加-修改"><a href="#添加-修改" class="headerlink" title="添加/修改"></a>添加/修改</h3><p>添加和删除只要操作 <code>parent_id</code> 就可以了，添加到某节点就把 <code>parent_id</code> 设为该节点 <code>id</code>，从某节点下移动到另一个节点只要把 <code>parent_id</code> 更换为其他节点的 <code>id</code> 就可以了。</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>使用 <code>parent-child</code> 方法需要删除节点就是比较复杂的了，因为不能简单地删除一个节点，这样属于该节点的子节点会找不到父节点，故而会出现一些问题，所以为了保持正确性得同时删除该节点的子节点。一种常见的做法是不直接删除该节点，而是标记该节点为删除状态，然后递归向下直到所有的后代都已经标记为删除了。</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>查询直接的父节点或者子节点是非常容易的:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- query a node's children</span></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> comments c1</span><br><span class="line">  <span class="keyword">left</span> <span class="keyword">join</span> comments c2</span><br><span class="line">    <span class="keyword">on</span> (c2.parent_id = c1.id)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- query a node's parent</span></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> comments c1</span><br><span class="line">  <span class="keyword">join</span> comments c2</span><br><span class="line">    <span class="keyword">on</span> (c1.parent_id = c2.id)</span><br></pre></td></tr></table></figure><p>但是查询一颗子树的时候就比较麻烦了，这就需要递归查询，在性能上是很大的挑战。实现的方式有两种：</p><ul><li>自顶向下查询，<code>connect by</code> 语法，这种方式较为简洁</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- query a node's subtree</span></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> comments</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">with</span> <span class="keyword">id</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">connect</span> <span class="keyword">by</span> parent_id = <span class="keyword">prior</span> <span class="keyword">id</span></span><br><span class="line"><span class="comment">-- query a node's parent is the same</span></span><br></pre></td></tr></table></figure><ul><li><p>递归实现</p><p>1.第一步定义起始的点</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  <span class="number">0</span> <span class="keyword">as</span> <span class="keyword">depth</span>,</span><br><span class="line">  <span class="keyword">id</span>,</span><br><span class="line">  <span class="keyword">comment</span>,</span><br><span class="line">  parent_id</span><br><span class="line"><span class="keyword">from</span> comments</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>2.第二步定义每个子行与父节点之间关系</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  parent.depth + <span class="number">1</span>,</span><br><span class="line">  child.id,</span><br><span class="line">  child.comment,</span><br><span class="line">  child.parent_id</span><br><span class="line"><span class="keyword">from</span> recursive_query <span class="keyword">parent</span>, comments <span class="keyword">child</span></span><br><span class="line"><span class="keyword">where</span> parent.id = child.parent_id</span><br></pre></td></tr></table></figure><p>3.结合 1 2 步</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">with recursive_query(depth, id, <span class="keyword">comment</span>, parent_id)</span><br><span class="line"><span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  <span class="number">0</span> <span class="keyword">as</span> <span class="keyword">depth</span>,</span><br><span class="line">  <span class="keyword">id</span>,</span><br><span class="line">  <span class="keyword">comment</span>,</span><br><span class="line">  parent_id</span><br><span class="line"><span class="keyword">from</span> comments</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">union</span> all</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  parent.depth + <span class="number">1</span>,</span><br><span class="line">  child.id,</span><br><span class="line">  child.comment,</span><br><span class="line">  child.parent_id</span><br><span class="line"><span class="keyword">from</span> recursive_query <span class="keyword">parent</span>, comments <span class="keyword">child</span></span><br><span class="line"><span class="keyword">where</span> parent.id = child.parent_id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> recursive_query</span><br></pre></td></tr></table></figure></li></ul><h3 id="元素数量和嵌套的层级"><a href="#元素数量和嵌套的层级" class="headerlink" title="元素数量和嵌套的层级"></a>元素数量和嵌套的层级</h3><p>理论上元素数量和层级没有限制，可以有无数层。</p><h2 id="Materialized-Path-物化路径"><a href="#Materialized-Path-物化路径" class="headerlink" title="Materialized Path(物化路径)"></a>Materialized Path(物化路径)</h2><p>使用每个节点都存储祖先链的方式实现树的存储，这种方式很容易实现面包屑导航。</p><p><img src="/assets/img/materialized-path.png" alt="materialized path"></p><h3 id="添加-修改-1"><a href="#添加-修改-1" class="headerlink" title="添加/修改"></a>添加/修改</h3><p>添加一个节点，需要先获得父节点的 <code>path</code>，再在此基础上加上新节点的 <code>id</code> 组成新的 <code>path</code>来完成添加操作。</p><p>修改的话会更麻烦一点，需要更新该节点的 <code>path</code> 以及它的所有后代的 <code>path</code>。</p><h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><p>简单删除一个节点并不破坏整棵树的完整性，该节点的子节点虽然没有父级节点，但是有爷爷辈节点。</p><h3 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h3><p>查询一个节点下面的子树是非常容易的，直接 <code>path like &#39;{node&#39;s path}%&#39;</code> 就能选出来了，而不需要递归。</p><h3 id="元素数量和嵌套的层级-1"><a href="#元素数量和嵌套的层级-1" class="headerlink" title="元素数量和嵌套的层级"></a>元素数量和嵌套的层级</h3><p>元素的数量和嵌套的层级大小是取决于开发者的，事实上很少是需要无限的层级的：如果网站嵌套层级超过 20 层，那需要考虑重新设计了而不是盲目地增加层级了。</p><p>该模式的实现方式可以有很多种，比如点分割(<code>1.1.2.5</code>)或者斜杠分割(<code>boss/chapter1/section2</code>)，有时候规定一层的字符数量，空出来的空间用特殊字符填充(比如说<code>0</code>)，就像 <code>000100020005</code> 就表示 <code>1/2/5</code> 中间用 <code>0</code> 填充，这样每一层元素数量最多就 <code>10^4</code> 个了(规定只能是数字)，而如果整个 <code>path</code> 的长度再有限制(比如说 20)，那么自然嵌套的层级也有限制了(这里是 5 层)。</p><p>所以说这些都是取决于是如何设计的。</p><h2 id="Nested-Sets-嵌套集合"><a href="#Nested-Sets-嵌套集合" class="headerlink" title="Nested Sets(嵌套集合)"></a>Nested Sets(嵌套集合)</h2><p>先上一张图来理解这个模型：</p><p><img src="/assets/img/nested-sets.png" alt="Nested Sets"></p><p>可以看到每个节点都有一个 <code>left</code> 和一个 <code>right</code>，这是代表这个节点所能容纳的范围的，一个节点的 <code>left</code> 比它所有后代的 <code>left</code> 要小，一个节点的 <code>right</code> 比它所有后代的 <code>right</code> 要大。</p><h3 id="添加-修改-2"><a href="#添加-修改-2" class="headerlink" title="添加/修改"></a>添加/修改</h3><p>添加和修改是十分复杂的，都需要重新计算节点的 <code>left</code> 与 <code>right</code>。</p><p>拿添加来说，比如给上图中第 5 个节点(它的<code>left</code>为<code>left-5</code>，<code>right</code>为<code>right-5</code>)添加子节点，那么需要做的就是把 <code>right</code> 大或等于 <code>right-5</code> 的节点都取出来，如果 <code>left</code> 大于或等于 <code>right-5</code> 那么就加 2，否则不变；<code>right</code> 全部都加 2；然后把新的节点 <code>left</code> 设为 <code>right-5</code>，<code>right</code> 设为 <code>right-5 + 1</code>，如下图：</p><p><img src="/assets/img/nested-sets-add.png" alt="Nested Sets add new node"></p><h3 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h3><p>同样的删除也是非常复杂的，这也需要重新计算 <code>left</code> 和 <code>right</code>。</p><h3 id="查询-2"><a href="#查询-2" class="headerlink" title="查询"></a>查询</h3><p>查询一颗子树是非常方便的，只需要找出所有的 <code>left</code> 比该节点大，<code>right</code> 比该节点小的所有节点就可以了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> comments</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">left</span> &gt; <span class="number">1</span> <span class="keyword">and</span> <span class="keyword">right</span> &lt; <span class="number">14</span></span><br></pre></td></tr></table></figure><h3 id="元素数量和嵌套的层级-2"><a href="#元素数量和嵌套的层级-2" class="headerlink" title="元素数量和嵌套的层级"></a>元素数量和嵌套的层级</h3><p>和邻接链表一样的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>模型</th><th>查询子节点</th><th>查询子树</th><th>删除节点</th><th>插入节点</th><th>移动子树</th></tr></thead><tbody><tr><td>Adjacency List</td><td>易</td><td>难(递归还好，相对耗时)</td><td>易</td><td>易</td><td>易</td></tr><tr><td>Materialized Path</td><td>难</td><td>易</td><td>易</td><td>易</td><td>易(但耗时)</td></tr><tr><td>Nested Sets</td><td>难</td><td>易</td><td>难</td><td>难</td><td>难</td></tr></tbody></table><p>邻接链表是较为简单的一种实现，但是想要查询一颗树的时候会有很多阻力，如 <code>Mysql 8.0</code> 以下原生是不支持递归查询的(可以自定义函数来完成这个递归操作，详情看<a href="https://explainextended.com/2009/03/17/hierarchical-queries-in-mysql" target="_blank" rel="noopener">这里</a>)，但是 <code>Oracle</code>、<code>PostgreSQL</code>、<code>SQL Server</code> 是支持的，除此之外，查询子树时存在查询效率问题(因为需要递归)。所以当你使用的场景插入或更新或删除较多的话是最好选择邻接链表模型的。如果查询树特别多，则可以使用嵌套集合模型或者物化路径模型(物化路径模型当层次较深的时候额外存储空间较大需谨慎)较为合适，当然如果使用的数据库原生支持递归语法，那么使用邻接链表模型也未尝不可，只是性能上会差一点。</p><p>总之还是根据具体情况具体分析，选择合适的才是最好的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在日常开发中不免遇到需要在关系型数据库中存储树形结构数据的情况，这里介绍 3 种存储方法。&lt;/p&gt;
&lt;p&gt;三种方法都以下面这个嵌套评论场景为背景。&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="http://1016990109.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="数据库" scheme="http://1016990109.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>git-flow 学习</title>
    <link href="http://1016990109.github.io/2018/06/05/Git-Flow-%E5%AD%A6%E4%B9%A0/"/>
    <id>http://1016990109.github.io/2018/06/05/Git-Flow-学习/</id>
    <published>2018-06-05T01:35:26.000Z</published>
    <updated>2018-06-05T07:26:25.776Z</updated>
    
    <content type="html"><![CDATA[<p>这里只是针对 <code>Git</code> 中的 <code>git-flow</code> 做一次学习记录，更加详细系统地学习 <code>Git</code> 请移步<a href="https://www.git-tower.com/learn/git/ebook" target="_blank" rel="noopener">这里</a>。</p><p>首先，<code>git-flow</code> 并不会为 <code>Git</code> 扩展任何新的功能，它仅仅使用了脚本来捆绑了一系列 <code>Git</code> 命令来完成一些特定的工作流程。</p><p>其次，定义一个固定的工作流程会使得团队协作更加简单容易。无论是一个 “版本控制的新手” 还是 “Git 专家”，每一个人都知道如何来正确地完成某个任务。</p><a id="more"></a><p>本文使用的工具是比较常用的 <a href="https://github.com/petervanderdoes/gitflow/" target="_blank" rel="noopener">gitflow-avh</a>。</p><h2 id="分支的模式"><a href="#分支的模式" class="headerlink" title="分支的模式"></a>分支的模式</h2><p><code>git-flow</code> 模式会预设两个主分支在仓库中：</p><ul><li><code>master</code>:正式发布的产品代码</li><li><code>develop</code>:开发用分支</li></ul><h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><p>看下图：</p><p><img src="/assets/img/git-flow.png" alt="git-flow"></p><ol><li>先开发功能，可能是一个也可能是多个，功能分支为 <code>feature</code>，功能开发完并合并后会删除。</li><li>功能开发完后都合并到 <code>develop</code> 分支进行汇总。</li><li>所有功能开发完后，需要发布一个版本。开出一个 <code>release</code> 分支，进行分支的最后修改，如代码中某些版本号等等。然后将 <code>release</code> 分支同时合并到 <code>master</code> 和 <code>develop</code> 分支，并打上相应的 <code>tag</code>，删除该 <code>release</code> 分支，完成一次迭代。</li><li>代码运行在 <code>master</code> 上一段时间后可能会有 <code>bug</code>，这时候开出 <code>hotfix</code> 分支对 <code>bug</code> 进行修复，修复完成后将代码合并到 <code>master</code> 和 <code>develop</code> 分支，打上修复的 <code>tag</code>，删除 <code>hotfix</code> 分支，一次在已发布版本上的修复就完成了。</li></ol><blockquote><p>注意：操作完后记得 <code>push</code> 哦！(<code>tag</code> 通过 <code>push</code> 是不会推送到远端仓库的，需要 <code>git push orign --tags</code> 推送所有 <code>tag</code>。)</p></blockquote><h2 id="功能开发"><a href="#功能开发" class="headerlink" title="功能开发"></a>功能开发</h2><p>让我们开始开发一个新功能 “rss-feed”：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git flow feature start rss-feed</span><br><span class="line">Switched to a new branch <span class="string">'feature/rss-feed'</span></span><br><span class="line"></span><br><span class="line">Summary of actions:</span><br><span class="line">- A new branch <span class="string">'feature/rss-feed'</span> was created, based on <span class="string">'develop'</span></span><br><span class="line">- You are now on branch <span class="string">'feature/rss-feed'</span></span><br></pre></td></tr></table></figure><p>经过一段时间艰苦地工作和一系列的聪明提交，我们的新功能终于完成了：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git flow feature finish rss-feed</span><br><span class="line">Switched to branch <span class="string">'develop'</span></span><br><span class="line">Updating 6bcf266..41748ad</span><br><span class="line">Fast-forward</span><br><span class="line">    feed.xml | 0</span><br><span class="line">    1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line">    create mode 100644 feed.xml</span><br><span class="line">Deleted branch feature/rss-feed (was 41748ad).</span><br></pre></td></tr></table></figure><h2 id="管理-Releases"><a href="#管理-Releases" class="headerlink" title="管理 Releases"></a>管理 Releases</h2><p>当你认为现在在 “develop” 分支的代码已经是一个成熟的 <code>release</code> 版本时，这意味着：第一，它包括所有新的功能和必要的修复；第二，它已经被彻底的测试过了。如果上述两点都满足，那就是时候开始生成一个新的 <code>release</code> 了：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git flow release start 1.1.5</span><br><span class="line">Switched to a new branch <span class="string">'release/1.1.5'</span></span><br></pre></td></tr></table></figure><p>进行最后的编辑，然后完成：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow release finish 1.1.5</span><br></pre></td></tr></table></figure><h2 id="hotfix"><a href="#hotfix" class="headerlink" title="hotfix"></a>hotfix</h2><p>很多时候，仅仅在几个小时或几天之后，当对 <code>release</code> 版本作做全面测试时，可能就会发现一些小错误。<br>在这种情况下，<code>git-flow</code> 提供一个特定的 “hotfix” 工作流程（因为在这里不管使用 “功能” 分支流程，还是 “release” 分支流程都是不恰当的）。</p><p>创建 <code>hotfix</code>：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git flow hotfix start missing-link</span><br></pre></td></tr></table></figure><p>修复完 <code>bug</code> 后就该完成了：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git flow hotfix finish missing-link</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>git-flow</code> 只是捆绑了一些命令来帮助用户来走这么一套通用的流程，当你能正确地理解工作流程的基本组成部分和目标的之后也可以不再使用这些工具了，可以根据自己的需要自定义流程。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里只是针对 &lt;code&gt;Git&lt;/code&gt; 中的 &lt;code&gt;git-flow&lt;/code&gt; 做一次学习记录，更加详细系统地学习 &lt;code&gt;Git&lt;/code&gt; 请移步&lt;a href=&quot;https://www.git-tower.com/learn/git/ebook&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;首先，&lt;code&gt;git-flow&lt;/code&gt; 并不会为 &lt;code&gt;Git&lt;/code&gt; 扩展任何新的功能，它仅仅使用了脚本来捆绑了一系列 &lt;code&gt;Git&lt;/code&gt; 命令来完成一些特定的工作流程。&lt;/p&gt;
&lt;p&gt;其次，定义一个固定的工作流程会使得团队协作更加简单容易。无论是一个 “版本控制的新手” 还是 “Git 专家”，每一个人都知道如何来正确地完成某个任务。&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="http://1016990109.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="git" scheme="http://1016990109.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>5月28日学习笔记</title>
    <link href="http://1016990109.github.io/2018/05/28/5%E6%9C%8828%E6%97%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://1016990109.github.io/2018/05/28/5月28日学习笔记/</id>
    <published>2018-05-28T14:17:10.000Z</published>
    <updated>2018-05-28T14:51:41.419Z</updated>
    
    <content type="html"><![CDATA[<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h3 id="该记录何种日志？"><a href="#该记录何种日志？" class="headerlink" title="该记录何种日志？"></a>该记录何种日志？</h3><ol><li>操作时间日志可能有些操作耗时会比较长，可以对方法的处理时间做个记录，例如数据库连接可能耗时很长（但是具体的数据库操作时间记录一般交由数据库本身来做，调用者也不可能知道一条语句耗费了多少时间）则需要记录，某些 <code>api</code> 也可能出现耗时长的问题，记录操作时长可有效发现问题。</li><li>异常日志程序在运行中抛出的异常，可以记录，方便定位错误。</li><li>调试日志有时候本地不方便调试可输出调试信息到日志，方便调试。</li></ol><a id="more"></a><h3 id="日志类型："><a href="#日志类型：" class="headerlink" title="日志类型："></a>日志类型：</h3><ol><li>时间日志这种日志一般按照时间成文件，记录每段时间的日志（错误日志只记录索引，错误信息等，不记录错误栈，是为了日志分析以及格式化）。</li><li>滚动日志滚动日志一般比较随意了，有调试的信息、错误栈、其他一些日志。</li></ol><h3 id="日志工具："><a href="#日志工具：" class="headerlink" title="日志工具："></a>日志工具：</h3><p><code>awk</code> 了解一下</p><h3 id="日志作用"><a href="#日志作用" class="headerlink" title="日志作用"></a>日志作用</h3><ul><li>记录重要信息，如错误、异常、警告等等</li><li>用户行为分析<br>例如将对某一数据连贯的一系列操作共同组成一组事务，一组事务中有多个行为，如用户id、数据id、session_id共同组成对一个数据的一组有关联的操作，可以用来分析用户操作数据的行为，有时候也可以通过行为记录来查找 <code>bug</code> 的原因。</li><li>统计<br>例如某某接口调用次数特别多，某某接口调用非常少等等统计工作。</li><li>调试<br>学会使用日志调试</li></ul><h2 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h2><p>何时使用参数校验？</p><ul><li>接口需要<br>如某个接口一定需要id字段才可以查询，则对id做一个校验。</li><li>性能需要<br>例如分页的时候，每页数据量过大的时候可能会影响接口的性能，这时候需要对参数做限制。<br>参数不合法就可以不进行处理，避免不必要的操作，提升性能。</li><li>数据库需要<br>数据最多支持32位长度的字符串，这时候提前做校验可以避免错误产生，也可以避免不必要操作提升性能。</li><li>业务需要<br>例如邮箱有固定的格式，可以对参数做验证。</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>简洁不一定是对的，有时候更需要易懂。</p><p>一切的 <code>I/O</code> 操作都需要处理异常。</p><p>封装需要权衡易读性与一致性。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;日志&quot;&gt;&lt;a href=&quot;#日志&quot; class=&quot;headerlink&quot; title=&quot;日志&quot;&gt;&lt;/a&gt;日志&lt;/h2&gt;&lt;h3 id=&quot;该记录何种日志？&quot;&gt;&lt;a href=&quot;#该记录何种日志？&quot; class=&quot;headerlink&quot; title=&quot;该记录何种日志？&quot;&gt;&lt;/a&gt;该记录何种日志？&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;操作时间日志可能有些操作耗时会比较长，可以对方法的处理时间做个记录，例如数据库连接可能耗时很长（但是具体的数据库操作时间记录一般交由数据库本身来做，调用者也不可能知道一条语句耗费了多少时间）则需要记录，某些 &lt;code&gt;api&lt;/code&gt; 也可能出现耗时长的问题，记录操作时长可有效发现问题。&lt;/li&gt;
&lt;li&gt;异常日志程序在运行中抛出的异常，可以记录，方便定位错误。&lt;/li&gt;
&lt;li&gt;调试日志有时候本地不方便调试可输出调试信息到日志，方便调试。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="学习" scheme="http://1016990109.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="随笔" scheme="http://1016990109.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo 探索</title>
    <link href="http://1016990109.github.io/2018/05/22/dubbo%E6%8E%A2%E7%B4%A2/"/>
    <id>http://1016990109.github.io/2018/05/22/dubbo探索/</id>
    <published>2018-05-22T03:09:44.000Z</published>
    <updated>2018-06-06T14:18:50.583Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dubbo-框架的介绍以及源码阅读"><a href="#Dubbo-框架的介绍以及源码阅读" class="headerlink" title="Dubbo 框架的介绍以及源码阅读"></a>Dubbo 框架的介绍以及源码阅读</h1><h2 id="Dubbo-简介"><a href="#Dubbo-简介" class="headerlink" title="Dubbo 简介"></a>Dubbo 简介</h2><p><code>Apache Dubbo|ˈdʌbəʊ|</code> 是阿里开源的一个 RPC 框架。</p><p>和大多数 <code>RPC</code> 系统一样， <code>dubbo</code> 基于一个理念：定义一个服务，确定远程调用的方法，并且包含他们的参数和返回类型。在服务端，服务器实现接口并且运行一个 <code>dubbo</code> 的服务来处理来自客户端的请求；在客户端，客户端持有提供与服务端方法一模一样的桩。</p><a id="more"></a><p><img src="/assets/img/dubbo_architecture.png" alt="dubbo 架构"></p><p><code>Apache Dubbo(incubating)</code>提供三个关键的功能:</p><ul><li>基于接口的远程调用</li><li>错误容忍和负载均衡</li><li>自动化服务注册和发现</li></ul><p>详细的架构描述请查看<a href="http://dubbo.apache.org/books/dubbo-user-book/preface/architecture.html" target="_blank" rel="noopener">官方文档</a>。</p><h2 id="Dubbo-实现"><a href="#Dubbo-实现" class="headerlink" title="Dubbo 实现"></a>Dubbo 实现</h2><h3 id="Dubbo-接入-spring"><a href="#Dubbo-接入-spring" class="headerlink" title="Dubbo 接入 spring"></a>Dubbo 接入 spring</h3><p><code>spring</code> 可以在 <code>xml</code> 中做一些配置:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.demo.dubbo.server.serviceimpl"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>对于上述的 xml 配置，分成三个部分:</p><ul><li>命名空间 <code>namespace</code>，如 <code>context</code></li><li>元素 <code>element</code>，如 <code>component-scan</code></li><li>属性 <code>attribute</code>，如 <code>base-package</code></li></ul><p><code>spring</code> 定义了两个接口，来分别解析上述内容：</p><ul><li><code>NamespaceHandler</code>：注册了一堆 <code>BeanDefinitionParser</code>，利用他们来进行解析</li><li><code>BeanDefinitionParser</code>: 用于解析每个 <code>element</code> 的内容</li></ul><p><code>spring</code> 会从 <code>jar</code> 包下的 <code>META-INF/spring.handlers</code> 文件下寻找 <code>NamespaceHandler</code>，所以如果需要自定义配置，只需要在 <code>jar</code> 包下加入 <code>META-INF/spring.handlers</code> 文件，其中记录 <code>NamespaceHandler</code> 的实现类，<code>dubbo</code> 的 <code>spring.handlers</code> 文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http\://dubbo.apache.org/schema/dubbo=com.alibaba.dubbo.config.spring.schema.DubboNamespaceHandler</span><br><span class="line">http\://code.alibabatech.com/schema/dubbo=com.alibaba.dubbo.config.spring.schema.DubboNamespaceHandler</span><br></pre></td></tr></table></figure><p>然后不同的配置分别转换成 <code>spring</code> 容器中的一个 <code>bean</code> 对象：</p><ul><li><code>application</code> 对应 <code>ApplicationConfig</code></li><li><code>registry</code> 对应 <code>RegistryConfig</code></li><li><code>monitor</code> 对应 <code>MonitorConfig</code></li><li><code>provider</code> 对应 <code>ProviderConfig</code></li><li><code>consumer</code> 对应 <code>ConsumerConfig</code></li><li><code>protocol</code> 对应 <code>ProtocolConfig</code></li><li><code>service</code> 对应 <code>ServiceBean</code>(继承 <code>ServiceConfig</code>)</li><li><code>reference</code> 对应 <code>ReferenceBean</code>(继承 <code>ReferenceConfig</code>)</li></ul><h3 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h3><p><code>Invoker</code> 是实体域，它是 <code>Dubbo</code> 的核心模型，其它模型都向它靠扰，或转换成它，它代表一个可执行体，可向它发起 <code>invoke</code> 调用，它有可能是一个本地的实现，也可能是一个远程的实现，也可能一个集群实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Invoker</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Class&lt;T&gt; <span class="title">getInterface</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">URL <span class="title">getUrl</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Result <span class="title">invoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 <code>Invocation</code> 则包含了需要执行的方法、参数等信息，接口定义简略如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Invocation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">URL <span class="title">getUrl</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">getMethodName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt;[] getParameterTypes();</span><br><span class="line"></span><br><span class="line">Object[] getArguments();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发布服务"><a href="#发布服务" class="headerlink" title="发布服务"></a>发布服务</h3><p><img src="/assets/img/dubbo_rpc_export.jpg" alt="dubbo rpc export"></p><p><code>ServiceConfig</code> 通过配置文件拿到对外提供服务的实现类 <code>ref</code>(如：<code>DemoServiceImpl</code>),然后通过 <code>ProxyFactory</code> 的 <code>getInvoker</code> 方法根据 <code>ref</code> 生成一个 <code>AbstractProxyInvoker</code> 实例，然后在通过 <code>Protocol</code> 的 <code>export</code> 方法将 <code>Invoker</code>  转换为 <code>Exporter</code>。</p><p>这里举一个将 <code>Invoker</code> 转为 <code>Exporter</code> 的例子，<code>DubboProtocol</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboProtocol</span> <span class="keyword">extends</span> <span class="title">AbstractProxyProtocol</span> </span>&#123;</span><br><span class="line">    <span class="comment">//other code</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Exporter&lt;T&gt; <span class="title">export</span><span class="params">(Invoker&lt;T&gt; invoker)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// export service.</span></span><br><span class="line">        String key = serviceKey(url);</span><br><span class="line">        DubboExporter&lt;T&gt; exporter = <span class="keyword">new</span> DubboExporter&lt;T&gt;(invoker, key, exporterMap);</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> exporter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费服务"><a href="#消费服务" class="headerlink" title="消费服务"></a>消费服务</h3><p><img src="/assets/img/dubbo_rpc_refer.jpg" alt="dubbo rpc refer"></p><p><code>ReferenceConfig</code> 类的 <code>init</code> 方法调用 <code>Protocol</code> 的 <code>refer</code> 方法生成 <code>Invoker</code> 实例(如上图中的红色部分)，这是服务消费的关键。接下来把 <code>Invoker</code> 转换为客户端需要的接口(如<code>DemoService</code>)。而客户端需要调用的时候只需要调用这个接口(如<code>DemoService</code>)，就能够间接使用 <code>Invoker</code> 来调用远程的方法。</p><h3 id="Invoke-的过程"><a href="#Invoke-的过程" class="headerlink" title="Invoke 的过程"></a>Invoke 的过程</h3><p><img src="/assets/img/dubbo_rpc_invoke.jpg" alt="dubbo rpc invoke"></p><!-- #### 远程过程调用总结总的来看，可以将 `dubbo` 中的远程过程调用总结为：服务端根据读取的配置将接口一个个封装起来并暴露(`Exporter`)，启动服务并遵守定义的协议；客户端通过配置文件的配置，接着根据定义的协议生成对应的调用者(`Invoker`)，调用者中隐藏了真正的远程调用细节，之后便可以通过调用者调用远程的方法了。例如，通过 `dubbo://11.240.240.118:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&application=demo-provider&bind.ip=11.240.240.118&bind.port=20880&dubbo=2.0.0&generic=false&interface=com.alibaba.dubbo.demo.DemoService&methods=sayHello&pid=34270&qos.port=22222&side=provider&timestamp=1527037622366` 可以发现，服务器提供一个 `DemoService` 的接口，和一个 `sayHello` 的方法；通过 `dubbo://11.240.240.118:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&application=demo-consumer&check=false&dubbo=2.0.0&generic=false&interface=com.alibaba.dubbo.demo.DemoService&methods=sayHello&pid=34452&qos.port=33333&register.ip=11.240.240.118&remote.timestamp=1527037622366&side=consumer&timestamp=1527038134040` 客户端拿到对应的可调用的接口 `DemoService`，然后调用 `DemoService` 中的方法(`sayHello`)，接着调用到客户端的 `Invoker`(这里为`DubboInvoker`)，`Invoker` 再根据协议将包装的信息传递到服务器，服务器解析信息找到对应的 `Exporter`，再找到 `AbstractProxyInvoker` 的实例，然后成功调用接口的实现类 `DemoServiceImpl`，完成调用，这就是整个过程。 --><h3 id="扩展点加载"><a href="#扩展点加载" class="headerlink" title=" 扩展点加载"></a> 扩展点加载</h3><p><code>Dubbo</code> 的扩展点加载从 <code>JDK</code> 标准的 <code>SPI</code> (Service Provider Interface) 扩展点发现机制加强而来。</p><p>传统的 <code>SPI</code> 发现机制是根据在 <code>jar</code> 包中的 <code>META-INF/services/</code> 配置文件找到具体的实现类名，并装载实例化，完成模块的注入。 基于这样一个约定就能很好的找到服务接口的实现类，而不需要再代码里制定。jdk 提供服务实现查找的一个工具类： <code>java.util.ServiceLoader</code>。</p><h4 id="Dubbo-的-ExtensionLoader-解析扩展过程"><a href="#Dubbo-的-ExtensionLoader-解析扩展过程" class="headerlink" title="Dubbo 的 ExtensionLoader 解析扩展过程"></a>Dubbo 的 ExtensionLoader 解析扩展过程</h4><p><code>jdk</code> 使用 <code>ServiceLoader</code>， <code>Dubbo</code> 使用<code>com.alibaba.dubbo.common.extension.ExtensionLoader</code> 来提供服务实现查找，<code>ExtensionLoader</code> 注入的依赖扩展点是一个 <code>Adaptive</code> 实例，直到扩展点方法执行时才决定调用是一个扩展点实现。</p><p>以下面例子为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ExtensionLoader&lt;Protocol&gt; protocolLoader=ExtensionLoader.getExtensionLoader(Protocol.class);</span><br><span class="line">Protocol  protocol=protocolLoader.getAdaptiveExtension();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Extension</span>(<span class="string">"dubbo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Protocol</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getDefaultPort</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Adaptive</span></span><br><span class="line">&lt;T&gt; <span class="function">Exporter&lt;T&gt; <span class="title">export</span><span class="params">(Invoker&lt;T&gt; invoker)</span> <span class="keyword">throws</span> RpcException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Adaptive</span></span><br><span class="line">    &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">refer</span><span class="params">(Class&lt;T&gt; type, URL url)</span> <span class="keyword">throws</span> RpcException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先根据要加载的接口创建出一个 ExtensionLoader 实例，然后再获取自适应的 <code>Protocol</code> 实现类(<code>DubboProtocol$Adaptive</code>)。</p><p><code>getAdaptiveExtension</code> 会根据 <code>@Adaptive</code> 注解去动态生成 <code>DubboProtocol$Adaptive</code> 实例， <code>DubboProtocol$Adaptive</code> 代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.dubbo.rpc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.extension.ExtensionLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Protocol</span>$<span class="title">Adaptive</span> <span class="keyword">implements</span> <span class="title">com</span>.<span class="title">alibaba</span>.<span class="title">dubbo</span>.<span class="title">rpc</span>.<span class="title">Protocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDefaultPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> com.alibaba.dubbo.rpc.<span class="function">Invoker <span class="title">refer</span><span class="params">(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1)</span> <span class="keyword">throws</span> com.alibaba.dubbo.rpc.RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arg1 == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"url == null"</span>);</span><br><span class="line">        com.alibaba.dubbo.common.URL url = arg1;</span><br><span class="line">        String extName = (url.getProtocol() == <span class="keyword">null</span> ? <span class="string">"dubbo"</span> : url.getProtocol());</span><br><span class="line">        <span class="keyword">if</span> (extName == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url("</span> + url.toString() + <span class="string">") use keys([protocol])"</span>);</span><br><span class="line">        com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol) ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);</span><br><span class="line">        <span class="keyword">return</span> extension.refer(arg0, arg1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> com.alibaba.dubbo.rpc.<span class="function">Exporter <span class="title">export</span><span class="params">(com.alibaba.dubbo.rpc.Invoker arg0)</span> <span class="keyword">throws</span> com.alibaba.dubbo.rpc.RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arg0 == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"com.alibaba.dubbo.rpc.Invoker argument == null"</span>);</span><br><span class="line">        <span class="keyword">if</span> (arg0.getUrl() == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"com.alibaba.dubbo.rpc.Invoker argument getUrl() == null"</span>);</span><br><span class="line">        com.alibaba.dubbo.common.URL url = arg0.getUrl();</span><br><span class="line">        String extName = (url.getProtocol() == <span class="keyword">null</span> ? <span class="string">"dubbo"</span> : url.getProtocol());</span><br><span class="line">        <span class="keyword">if</span> (extName == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url("</span> + url.toString() + <span class="string">") use keys([protocol])"</span>);</span><br><span class="line">        com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol) ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);</span><br><span class="line">        <span class="keyword">return</span> extension.export(arg0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现在使用过程中，如 <code>export()</code> 方法在调用过程中或通过 <code>ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName)</code> 来获取到真正的实例再进行调用，这就保证了在真正调用之前，实例是不会被真正创建的(只创建了对应的<code>Adaptive</code>实例)，如果有扩展实现初始化很耗时，没用上也不会加载，从而减少资源浪费。</p><h4 id="ExtensionLoader-实例是如何来加载-Protocol-的实现类的："><a href="#ExtensionLoader-实例是如何来加载-Protocol-的实现类的：" class="headerlink" title="ExtensionLoader 实例是如何来加载 Protocol 的实现类的："></a>ExtensionLoader 实例是如何来加载 Protocol 的实现类的：</h4><p>1.先解析 Protocol 上的 Extension 注解的 name,存至 String cachedDefaultName 属性中，作为默认的实现</p><p>2.到类路径下的加载所有的 META-INF/dubbo.interval.com.alibaba.dubbo.rpc.Protocol 文件，例如 <code>dubbo-rpc-dubbo</code> 模块下的 Protocol 文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dubbo=com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol</span><br></pre></td></tr></table></figure><p>然后读取内容加载对应的 <code>class</code>(<code>DubboProtocol</code>)，并和对应的 <code>name</code>(上面<code>=</code>前面的字符<code>dubbo</code>) 做关联，为以后根据 <code>name</code> 找具体实现类做铺垫。</p><h4 id="ExtensionLoader-获取扩展过程"><a href="#ExtensionLoader-获取扩展过程" class="headerlink" title="ExtensionLoader 获取扩展过程"></a>ExtensionLoader 获取扩展过程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">createExtension</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; clazz = getExtensionClasses().get(name);</span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> findException(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        T instance = (T) EXTENSION_INSTANCES.get(clazz);</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            EXTENSION_INSTANCES.putIfAbsent(clazz, clazz.newInstance());</span><br><span class="line">            instance = (T) EXTENSION_INSTANCES.get(clazz);</span><br><span class="line">        &#125;</span><br><span class="line">        injectExtension(instance);</span><br><span class="line">        Set&lt;Class&lt;?&gt;&gt; wrapperClasses = cachedWrapperClasses;</span><br><span class="line">        <span class="keyword">if</span> (wrapperClasses != <span class="keyword">null</span> &amp;&amp; !wrapperClasses.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; wrapperClass : wrapperClasses) &#123;</span><br><span class="line">                instance = injectExtension((T) wrapperClass.getConstructor(type).newInstance(instance));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Extension instance(name: "</span> + name + <span class="string">", class: "</span> +</span><br><span class="line">                type + <span class="string">")  could not be instantiated: "</span> + t.getMessage(), t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致分成 4 步：</p><p>1.根据 name 获取对应的 class</p><p>2.根据获取到的 class 创建一个实例</p><p>3.对获取到的实例，进行依赖注入</p><p>4.对于上述经过依赖注入的实例，再次进行包装，实现 <code>AOP</code>。以 <code>Protocol</code> 为例，<code>ProtocolFilterWrapper</code>、<code>ProtocolListenerWrapper</code> 会对 <code>DubboProtocol</code> 进行包装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XxxProtocolWrapper</span> <span class="title">implemenets</span> <span class="title">Protocol</span> </span>&#123;</span><br><span class="line">    Protocol impl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">XxxProtocol</span><span class="params">(Protocol protocol)</span> </span>&#123; impl = protocol; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接口方法做一个操作后，再调用extension的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//... 一些操作</span></span><br><span class="line">        impl.refer();</span><br><span class="line">        <span class="comment">// ... 一些操作</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一个扩展点可以直接-setter-注入其它扩展点"><a href="#一个扩展点可以直接-setter-注入其它扩展点" class="headerlink" title="一个扩展点可以直接 setter 注入其它扩展点"></a>一个扩展点可以直接 <code>setter</code> 注入其它扩展点</h4><p>对应的处理在 <code>ExtensionLoader</code> 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">injectExtension</span><span class="params">(T instance)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (objectFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Method method : instance.getClass().getMethods()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (method.getName().startsWith(<span class="string">"set"</span>)</span><br><span class="line">                        &amp;&amp; method.getParameterTypes().length == <span class="number">1</span></span><br><span class="line">                        &amp;&amp; Modifier.isPublic(method.getModifiers())) &#123;</span><br><span class="line">                    Class&lt;?&gt; pt = method.getParameterTypes()[<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        String property = method.getName().length() &gt; <span class="number">3</span> ? method.getName().substring(<span class="number">3</span>, <span class="number">4</span>).toLowerCase() + method.getName().substring(<span class="number">4</span>) : <span class="string">""</span>;</span><br><span class="line">                        Object object = objectFactory.getExtension(pt, property);</span><br><span class="line">                        <span class="keyword">if</span> (object != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            method.invoke(instance, object);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        logger.error(<span class="string">"fail to inject via method "</span> + method.getName()</span><br><span class="line">                                + <span class="string">" of interface "</span> + type.getName() + <span class="string">": "</span> + e.getMessage(), e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dubbo-通信"><a href="#Dubbo-通信" class="headerlink" title="Dubbo 通信"></a>Dubbo 通信</h3><p><code>Dubbo</code> 已经集成的有 <code>Netty</code>、<code>Mina</code>，默认是 <code>Netty</code>，这里主要介绍 <code>Netty</code>。</p><h4 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h4><p><code>Netty</code> 使用 <code>Reactor</code> 主从模型结构(三种 <code>Reactor</code> 模型详情请看<a href="http://gee.cs.oswego.edu/dl/cpjslides/nio.pdf" target="_blank" rel="noopener">这里</a>)的变种:</p><p><img src="/assets/img/reactor3.png" alt="reactor3"></p><p>去掉上面的线程池就为 <code>Netty</code> 的默认模式了。</p><p><code>Netty</code> 里对应 <code>mainReactor</code> 的角色叫做 <code>Boss</code>，而对应 <code>subReactor</code> 的角色叫做 <code>Worker</code>。<code>Boss</code> 负责分配请求，创建 Selector，用于不断监听 Socket 连接、客户端的读写操作等；<code>Worker</code> 负责执行，负责处理 Selector 派发的读写操作。</p><p><code>Netty</code> 中 <code>Reactor</code> 模式的参与者主要有下面一些组件：</p><p><img src="/assets/img/reactor.jpg" alt="reactor"></p><ul><li><code>Selector</code>(对应多路复用器 <code>Demultiplexer</code>)</li><li><code>EventLoopGroup/EventLoop</code>(对应 <code>Reactor</code> 模式中的分发者 <code>Dispatcher</code>)</li><li><code>ChannelPipeline</code>(对应请求处理器 <code>Handler</code>，真正干活的)</li></ul><p>不管是 <code>Boos</code> 线程还是 <code>Worker</code> 线程，所做的事情均分为以下三个步骤: </p><ol><li>轮询注册在 <code>selector</code> 上的 <code>I/O</code> 事件 </li><li>处理 <code>I/O</code> 事件 </li><li>执行异步 <code>task</code></li></ol><p>对于 <code>Boos</code> 线程来说，第一步轮询出来的基本都是 <code>accept</code> 事件，表示有新的连接，而 <code>Worker</code> 线程轮询出来的基本都是 <code>read/write</code> 事件，表示网络的读写事件。</p><p>新连接的建立 </p><ol><li><code>Boss</code> 的 <code>Selector</code> 检测到有新的连接 </li><li>将新的连接注册到 <code>Worker</code> 线程组 </li><li>注册新连接的读事件到 <code>Worker</code> 的 <code>Selector</code> 中</li></ol><p>新连接的读取和请求处理</p><ol><li>数据准备好了</li><li><code>Worker</code> 知道了，同步调用 <code>unsafe.read</code> 获得客户端传输的数据，交给 <code>ChannelPipeline</code> 处理</li><li><code>ChannelPipeline</code> 处理，<code>decode</code> -&gt; 处理数据 -&gt; <code>encode</code> 结果，这些过程都是异步的</li><li>用户调用 <code>channel.writeAndFlush</code>，写就绪</li><li><code>Worker</code> 知道了，<code>unsafe.forceflush</code> 写回结果给客户端</li></ol><p><code>ChannelPipeline</code> 处理过程类似下面这样，一般会有 <code>decode</code>，用户自定义的 <code>handler</code>，和 <code>encode</code>：</p><p><img src="/assets/img/netty_pipeline.png" alt="netty pipeline"></p><p><code>ChannelInBoundHandler</code> 对从客户端发往服务器的报文进行处理，一般用来执行拆包/粘包，解码，读取数据，业务处理等；<code>ChannelOutBoundHandler</code> 对从服务器发往客户端的报文进行处理，一般用来进行编码，发送报文到客户端。</p><h4 id="编码与解码-序列化与反序列化"><a href="#编码与解码-序列化与反序列化" class="headerlink" title="编码与解码(序列化与反序列化)"></a>编码与解码(序列化与反序列化)</h4><p>想要远程传输对象就得将对象变为二进制码，这就需要序列化工具来完成这些操作。</p><p>在 <code>Dubbo</code>中，同时支持多种序列化方式，例如：</p><ol><li><code>dubbo</code> 序列化：阿里尚未开发成熟的高效 <code>java</code> 序列化实现，阿里不建议在生产环境使用它</li><li><code>hessian2</code> 序列化：<code>hessian</code> 是一种跨语言的高效二进制序列化方式。</li><li><code>json</code> 序列化：目前有两种实现，一种是采用的阿里的 <code>fastjson</code> 库，另一种是采用 <code>Dubbo</code> 中自己实现的简单 <code>json</code> 库，但其实现都不是特别成熟，而且 <code>json</code> 这种文本序列化性能一般不如上面两种二进制序列化。</li><li><code>java</code> 序列化：主要是采用 <code>JDK</code> 自带的 <code>Java</code> 序列化实现，性能很不理想。</li></ol><p><code>Dubbo</code> 默认是使用 <code>Hessian</code> 作为序列化与反序列化的工具的，<code>Hessian</code> 的序列化语法看<a href="http://hessian.caucho.com/doc/hessian-serialization.html" target="_blank" rel="noopener">这里</a>。</p><p><strong>与跨平台的 <code>protobuf</code> 对比：</strong></p><ol><li><code>protobuf</code> 相比于 <code>hessian</code> 而言是要定义消息类型的，客户端与服务器都需要定义相同的消息类型(<code>.proto</code>文件)，配置方面较复杂，但是相应的消息的压缩率也就更高了，<code>protobuf</code> 存储类型只需要一个字节(8位)，即前5位代表顺序，后3位代表 <code>type</code>，更具体的 <code>protobuf</code> 的编码规则请看<a href="https://developers.google.com/protocol-buffers/docs/encoding" target="_blank" rel="noopener">官方文档</a>；而 <code>hessian</code> 则会把类型的全量名称都加上，因而效率会稍微低一点，具体的 <code>hessian</code> 编码规则请看<a href="http://hessian.caucho.com/doc/hessian-serialization.html" target="_blank" rel="noopener">官方文档</a>。所以如果对性能要求不是特别高(如即时消息系统，如QQ等)，而且是使用 <code>java</code> 编写的系统而言，用 <code>hessian</code> 就足够了，这就是 <code>Dubbo</code> 默认使用 <code>hessian</code> 的原因吧。</li><li><code>hessian</code> 一般是用于 <code>java</code> 平台的，<code>protobuf</code> 是跨平台的。</li><li><code>protobuf</code> 比 <code>hessian</code> 压缩率、速率更高。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Dubbo-框架的介绍以及源码阅读&quot;&gt;&lt;a href=&quot;#Dubbo-框架的介绍以及源码阅读&quot; class=&quot;headerlink&quot; title=&quot;Dubbo 框架的介绍以及源码阅读&quot;&gt;&lt;/a&gt;Dubbo 框架的介绍以及源码阅读&lt;/h1&gt;&lt;h2 id=&quot;Dubbo-简介&quot;&gt;&lt;a href=&quot;#Dubbo-简介&quot; class=&quot;headerlink&quot; title=&quot;Dubbo 简介&quot;&gt;&lt;/a&gt;Dubbo 简介&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Apache Dubbo|ˈdʌbəʊ|&lt;/code&gt; 是阿里开源的一个 RPC 框架。&lt;/p&gt;
&lt;p&gt;和大多数 &lt;code&gt;RPC&lt;/code&gt; 系统一样， &lt;code&gt;dubbo&lt;/code&gt; 基于一个理念：定义一个服务，确定远程调用的方法，并且包含他们的参数和返回类型。在服务端，服务器实现接口并且运行一个 &lt;code&gt;dubbo&lt;/code&gt; 的服务来处理来自客户端的请求；在客户端，客户端持有提供与服务端方法一模一样的桩。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://1016990109.github.io/tags/java/"/>
    
      <category term="RPC" scheme="http://1016990109.github.io/tags/RPC/"/>
    
  </entry>
  
  <entry>
    <title>《Node.js 设计模式》读书笔记 第二章</title>
    <link href="http://1016990109.github.io/2018/05/18/Node-js-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    <id>http://1016990109.github.io/2018/05/18/Node-js-设计模式读书笔记-第二章/</id>
    <published>2018-05-18T08:51:57.000Z</published>
    <updated>2018-06-05T01:32:15.267Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node-js-Essential-Patterns-Node-js-基本模式"><a href="#Node-js-Essential-Patterns-Node-js-基本模式" class="headerlink" title="Node.js Essential Patterns(Node.js 基本模式)"></a>Node.js Essential Patterns(Node.js 基本模式)</h1><h2 id="The-callback-pattern-回调模式"><a href="#The-callback-pattern-回调模式" class="headerlink" title="The callback pattern(回调模式)"></a>The callback pattern(回调模式)</h2><p>回调是<code>reactor</code>模式中<code>handler</code>的实例。</p><h3 id="The-continuation-passing-pattern-连续传递模式"><a href="#The-continuation-passing-pattern-连续传递模式" class="headerlink" title="The continuation-passing pattern(连续传递模式)"></a>The continuation-passing pattern(连续传递模式)</h3><p>在 JavaScript 中回调就是传入作为参数传入另外一个函数中的函数，并且在操作完成后调用。在函数式编程中，这种传递结果的方式被称为<code>continuation-passing style(CPS)</code>。这是个一般概念，并不是针对异步操作。实际上，它只是通过将结果作为参数传递给另一个函数（回调函数）来传递结果，然后在主体逻辑中调用回调函数拿到操作结果，而不是直接将其返回给调用者。</p><a id="more"></a><h4 id="Synchronous-continuation-passing-style-同步连续传递风格"><a href="#Synchronous-continuation-passing-style-同步连续传递风格" class="headerlink" title="Synchronous continuation-passing style(同步连续传递风格)"></a>Synchronous continuation-passing style(同步连续传递风格)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b, callback</span>) </span>&#123;</span><br><span class="line">  callback(a + b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个<code>add()</code>函数就是一个同步的 CPS 函数，意味着只有回调函数执行完成它才会返回值。</p><h4 id="Asynchronous-continuation-passing-style-异步连续传递风格"><a href="#Asynchronous-continuation-passing-style-异步连续传递风格" class="headerlink" title="Asynchronous continuation-passing style(异步连续传递风格)"></a>Asynchronous continuation-passing style(异步连续传递风格)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">additionAsync</span>(<span class="params">a, b, callback</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> callback(a + b), <span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>setTimeout()</code>触发了一个异步操作，不需要等待回调函数执行完就会返回到<code>additionAsync()</code>的控制权，然后再回到<code>additionAsync</code>的调用者。这个属性对于<code>Node.js</code>是至关重要的，当一个异步的请求发出后会立即回到事件循环中， 因而允许队列中  新的事件被处理。下图描述了事件循环是怎么运作的：</p><p><img src="assets/img/event_loop2.png" alt="事件循环"></p><h4 id="Non-continuation-passing-style-callbacks-非连续传递风格的回调"><a href="#Non-continuation-passing-style-callbacks-非连续传递风格的回调" class="headerlink" title="Non-continuation-passing style callbacks(非连续传递风格的回调)"></a>Non-continuation-passing style callbacks(非连续传递风格的回调)</h4><p>某些情况下，比如一个回调函数作为参数传入，我们可能会以为这是一个异步操作或者是使用 CPS，但是有例外：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>].map(<span class="function"><span class="params">element</span> =&gt;</span> element - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// [0, 4, 6]</span></span><br></pre></td></tr></table></figure><p>这就是一个同步的调用。</p><h3 id="Synchronous-or-asynchronous-同步还是异步"><a href="#Synchronous-or-asynchronous-同步还是异步" class="headerlink" title="Synchronous or asynchronous?(同步还是异步?)"></a>Synchronous or asynchronous?(同步还是异步?)</h3><p>代码的执行顺序会因同步或异步的执行方式产生根本性的改变。这对整个应用程序的流程，正确性和效率都产生了重大影响。以下是对这两种模式的范例和缺陷的分析：</p><h4 id="An-unpredictable-function-一个不可预测的函数"><a href="#An-unpredictable-function-一个不可预测的函数" class="headerlink" title="An unpredictable function(一个不可预测的函数)"></a>An unpredictable function(一个不可预测的函数)</h4><p>最危险的情况之一就是使一个 API 在某种特定情况下是同步执行的但是在另一种情况却是异步执行的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> cache = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inconsistentRead</span>(<span class="params">filename, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (cache[filename]) &#123;</span><br><span class="line">    <span class="comment">// 同步执行回调</span></span><br><span class="line">    callback(cache[filename])</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 异步</span></span><br><span class="line">    fs.readFile(filename, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      cache[filename] = data</span><br><span class="line">      callback(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的函数使用 cache 缓存文件读取结果，这个函数是危险的，因为当缓存命中时表现为同步的，当缓存未命中表现为异步的。</p><h4 id="Unleashing-Zalgo-解放-Zalgo"><a href="#Unleashing-Zalgo-解放-Zalgo" class="headerlink" title="Unleashing Zalgo(解放 Zalgo)"></a>Unleashing Zalgo(解放 Zalgo)</h4><p>围绕着同步或异步行为的不确定性，几乎总是导致非常难追踪的 Bug，这被称为<code>Zalgo</code>。</p><blockquote><p>注意：更多关于 Zalgo 的信息，参见 Oren Golan 的<a href="https://github.com/oren/oren.github.io/blob/master/posts/zalgo.md" target="_blank" rel="noopener">Don’t Release Zalgo!(不要释放 Zalgo!)</a>和 Isaac Z. Schlueter 的<a href="http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony" target="_blank" rel="noopener">Designing APIs for Asynchrony(异步 API 设计)</a>。</p></blockquote><p>看个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFileReader</span>(<span class="params">filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> listeners = []</span><br><span class="line">  inconsistentRead(filename, value =&gt; &#123;</span><br><span class="line">    listeners.forEach(<span class="function"><span class="params">listener</span> =&gt;</span> listener(value))</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    onDataReady: <span class="function"><span class="params">listener</span> =&gt;</span> listeners.push(listener)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数被调用的时候创建了一个作为通知器的对象，允许为一个  读文件操作设置多个监听。当文件读取完后或者数据可用后所有的监听都会被调用，现在使用上面的<code>inconsistentRead</code>函数来完成这个功能：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reader1 = createFileReader(<span class="string">'data.txt'</span>)</span><br><span class="line">reader1.onDataReady(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'First call data: '</span> + data)</span><br><span class="line">  <span class="comment">// 之后再次通过fs读取同一个文件</span></span><br><span class="line">  <span class="keyword">const</span> reader2 = createFileReader(<span class="string">'data.txt'</span>)</span><br><span class="line">  reader2.onDataReady(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Second call data: '</span> + data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>输出是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">First call data: some data</span><br></pre></td></tr></table></figure><p>会发现，第二个操作的回调未被调用，这是因为第一次调用时没有缓存，<code>inconsistentRead</code>是异步调用的，这个时候第一个回调函数已经加入到监听列表中了，然而第二次调用时，缓存中已经存在了，所以<code>inconsistentRead</code>是同步调用的，这个时候监听列表中还没有第二个回调函数，故而之后也没有再调用了。</p><h4 id="Using-asynchronous-API-使用同步-API"><a href="#Using-asynchronous-API-使用同步-API" class="headerlink" title="Using asynchronous API(使用同步 API)"></a>Using asynchronous API(使用同步 API)</h4><p>从上面<code>unleashing Zalgo</code>中我们知道，清楚地定义<code>API</code>性质是非常重要的：同步还是异步？</p><p>可以使整个函数同步来解决上面的问题，<code>readFileSync</code>代替<code>readFile</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> cache = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">consistentReadSync</span>(<span class="params">filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (cache[filename]) &#123;</span><br><span class="line">    <span class="keyword">return</span> cache[filename]</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cache[filename] = fs.readFileSync(filename, <span class="string">'utf8'</span>)</span><br><span class="line">    <span class="keyword">return</span> cache[filename]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有理由为一个同步函数使用<code>CPS</code>风格。</p><blockquote><p>注意：最好为纯同步函数使用<code>direct style</code>。</p></blockquote><p>使用同步 API 替代异步 API 需要注意：</p><ul><li>同步 API 并不适用所有场景。</li><li>同步 API 会阻塞事件循环，降低了应用性能，破坏了<code>JavaScript</code>并发模型。</li></ul><p>如果只是读取有限的文件，那么<code>consistentReadSync</code>并不会对事件循环的性能造成多大影响，但是当文件很多时就不同了。</p><p>很多时候<code>Node.js</code>是不鼓励使用同步函数的，但是有时候同步函数也是最简单、最有效的解决方案。所以要根据情况来选择使用同步的方法还是异步的。</p><p>当对程序处理并发请求影响不大的时候使用同步(例如读取程序配置文件)。</p><h3 id="Deffered-execution-延时处理"><a href="#Deffered-execution-延时处理" class="headerlink" title="Deffered execution(延时处理)"></a>Deffered execution(延时处理)</h3><p>另外一种处理<code>consistentRead</code>的方法就是使整个函数都是异步的，使用<code>process.nextTick()</code>使得回调函数在下一个事件循环周期调用而不是立即调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> cache = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">consistentReadAsync</span>(<span class="params">filename, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (cache[filename]) &#123;</span><br><span class="line">    process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> callback(cache[filename]))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 异步函数</span></span><br><span class="line">    fs.readFile(filename, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      cache[filename] = data</span><br><span class="line">      callback(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外一个延迟执行的 API 是<code>setImmediate()</code>，尽管他们看起来相似，但是在语义上完全不同，<code>process.nextTick()</code>在任何 I/O 事件触发前执行，而<code>setImmediate()</code>在队列中所有的 I/O 事件执行之后执行。</p><h3 id="Node-js-callback-conventions-Node-js-回调风格"><a href="#Node-js-callback-conventions-Node-js-回调风格" class="headerlink" title="Node.js callback conventions(Node.js 回调风格)"></a>Node.js callback conventions(Node.js 回调风格)</h3><p>对于<code>Node.js</code>而言，<code>CPS</code>风格的 API 和回调函数遵循一组特殊的约定。这些约定不只是适用于<code>Node.js</code>核心 API，对于它们之后也是绝大多数用户级模块和应用程序也很有意义。因此，我们了解这些风格，并确保我们在需要设计异步 API 时遵守规定显得至关重要。</p><h4 id="Callbacks-come-last-回调函数在最后"><a href="#Callbacks-come-last-回调函数在最后" class="headerlink" title="Callbacks come last(回调函数在最后)"></a>Callbacks come last(回调函数在最后)</h4><p>在所有核心 Node.js 方法中，标准约定是当函数在输入中接受回调时，必须作为最后一个参数传递。我们以下面的 Node.js 核心 API 为例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(filename, [options], callback)</span><br></pre></td></tr></table></figure><p>从前面的例子可以看出，即使是在可选参数存在的情况下，回调也始终置于最后的位置。其原因是在回调定义的情况下，函数调用更可读。</p><h4 id="Error-comes-first-错误处理在最前"><a href="#Error-comes-first-错误处理在最前" class="headerlink" title="Error comes first(错误处理在最前)"></a>Error comes first(错误处理在最前)</h4><p>在<code>Node.js</code>中，在<code>CPS</code>中产生的错误总是作为第一个参数，这样便于调试，没有错误则第一个参数为 null 或者 undefined，在正式处理结果之前先判断 error 这样有利于 debug，错误类型为<code>Error</code>型，普通的字符串或者数字是不应该作为错误被传递的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(<span class="string">'foo.txt'</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) handleError(err)</span><br><span class="line">  <span class="keyword">else</span> processData(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="Propagating-errors-传递错误"><a href="#Propagating-errors-传递错误" class="headerlink" title="Propagating errors(传递错误)"></a>Propagating errors(传递错误)</h4><p>在同步函数或者直接风格中，使用<code>throw</code>是最直接的，使得错误从调用栈中弹出直到被捕获。</p><p>但是在异步调用中，比较好的错误处理方式是将错误传递到回调链中的下一个回调函数中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readJSON</span>(<span class="params">filename, callback</span>) </span>&#123;</span><br><span class="line">  fs.readFile(filename, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> parsed</span><br><span class="line">    <span class="keyword">if</span> (err)</span><br><span class="line">      <span class="comment">//传递错误并退出当前函数</span></span><br><span class="line">      <span class="keyword">return</span> callback(err)</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//解析文件内容</span></span><br><span class="line">      parsed = <span class="built_in">JSON</span>.parse(data)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="comment">//捕获解析中的错误</span></span><br><span class="line">      <span class="keyword">return</span> callback(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没有错误，只传递数据</span></span><br><span class="line">    callback(<span class="literal">null</span>, parsed)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有错误直接<code>return</code>避免继续执行。</p><h4 id="Uncaught-exceptions"><a href="#Uncaught-exceptions" class="headerlink" title="Uncaught exceptions"></a>Uncaught exceptions</h4><p>在异步回调过程中，错误是难以被捕获的，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readJSONThrows</span>(<span class="params">filename, callback</span>) </span>&#123;</span><br><span class="line">  fs.readFile(filename, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(err)</span><br><span class="line">    &#125;</span><br><span class="line">    callback(<span class="literal">null</span>, <span class="built_in">JSON</span>.parse(data))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的函数中，如果<code>JSON.parse(data)</code>异常的话是没有办法捕获的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  readJSONThrows(<span class="string">'nonJSON.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'This will not catch the JSON parsing exception'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面<code>catch</code>语句将捕获不到错误，因为错误是在回调函数中产生的。然而，我们仍然有机会在应用程序终止之前执行一些清理或日志记录。事实上，当这种情况发生时，Node.js 会在退出进程之前发出一个名为<code>uncaughtException</code>的特殊事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">process.on(<span class="string">'uncaughtException'</span>, err =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(</span><br><span class="line">    <span class="string">'This will catch at last the '</span> + <span class="string">'JSON parsing exception: '</span> + err.message</span><br><span class="line">  )</span><br><span class="line">  <span class="comment">// Terminates the application with 1 (error) as exit code:</span></span><br><span class="line">  <span class="comment">// without the following line, the application would continue</span></span><br><span class="line">  process.exit(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>需要注意的是，<code>uncaughtException</code>会使得应用处于一个不能保证一致的状态 ，而这可能导致不可预见的错误。比如还有未完成的 I/O 请求正在运行或关闭，这可能导致不一致。所以建议，尤其是在生产环境，在收到任何<code>uncaught exception</code>之后停止应用的运行。</p><h3 id="The-module-system-and-its-patterns-模块系统和其中的模式"><a href="#The-module-system-and-its-patterns-模块系统和其中的模式" class="headerlink" title="The module system and its patterns(模块系统和其中的模式)"></a>The module system and its patterns(模块系统和其中的模式)</h3><p>模块可以隐藏不想暴露的函数、变量，是构成大型应用的基础。</p><h4 id="The-revealing-module-pattern-模块模式"><a href="#The-revealing-module-pattern-模块模式" class="headerlink" title="The revealing module pattern(模块模式)"></a>The revealing module pattern(模块模式)</h4><p><code>JavaScript</code> 是没有命名空间的，在全局范围内运行的程序会污染全局命名空间，造成相关变量、数据、方法名的冲突。解决该问题的一个比较流行的做法是使用 <code>模块模式</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">module</span> = <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> privateFoo = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> privateBar = []</span><br><span class="line">  <span class="keyword">const</span> exported = &#123;</span><br><span class="line">    publicFoo: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    publicBar: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> exported</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">module</span>)</span><br></pre></td></tr></table></figure><p>该模式利用自执行函数创建私有空间，只导出需要暴露的部分，前面的代码中， <code>module</code> 变量只包含了暴露的 <code>API</code>，而内部的其他部分是外面访问不到的。这个模式背后的思想就是用来构建 <code>Node.js</code> 模块系统的基础。</p><h4 id="Node-js-modules-explained-Node-js-模块解释"><a href="#Node-js-modules-explained-Node-js-模块解释" class="headerlink" title="Node.js modules explained(Node.js 模块解释)"></a>Node.js modules explained(Node.js 模块解释)</h4><p><code>CommonJS</code> 是一个旨在规范 <code>JavaScript</code> 生态系统的组织，他们提出了 <code>CommonJS模块规范</code>。<code>Node.js</code> 在此规范之上构建了其模块系统，并添加了一些自定义的扩展。每个模块都在自己的私有空间下运行，所以在模块内定义的本地变量不会污染全局变量。</p><h5 id="A-homemade-module-loader-自定义模块加载器"><a href="#A-homemade-module-loader-自定义模块加载器" class="headerlink" title="A homemade module loader(自定义模块加载器)"></a>A homemade module loader(自定义模块加载器)</h5><p>为了解释加载器是如何工作的，先简单勾勒一个类似的系统，下面的代码模仿了内部函数 <code>require()</code> 的一部分功能：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadModule</span>(<span class="params">filename, module, require</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> wrappedSrc = <span class="string">`(function(module, exports, require) &#123;</span></span><br><span class="line"><span class="string">         <span class="subst">$&#123;fs.readFileSync(filename, <span class="string">'utf8'</span>)&#125;</span></span></span><br><span class="line"><span class="string">       &#125;)(module, module.exports, require);`</span></span><br><span class="line">  <span class="built_in">eval</span>(wrappedSrc)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模块的源码被包装入一个函数，并且是使用模块模式的。区别在于传递了一些参数到模块中，实际上就是 <code>module</code>, <code>exports</code>, <code>require</code>。<code>exports</code> 参数被初始化为 <code>module.exports</code>。</p><blockquote><p>注意： 上面只是个示例，其实很少使用 <code>eval</code> 来执行源码，这可能导致注入攻击，使用 <code>eval</code> 要十分谨慎。</p></blockquote><p>现在通过实现 <code>require()</code> 函数来看看这都些变量中的包含了什么内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">require</span> = <span class="function"><span class="params">moduleName</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Require invoked for module: <span class="subst">$&#123;moduleName&#125;</span>`</span>)</span><br><span class="line">  <span class="keyword">const</span> id = <span class="built_in">require</span>.resolve(moduleName)</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">require</span>.cache[id]) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">require</span>.cache[id].exports</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//模块元数据</span></span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">    exports: &#123;&#125;,</span><br><span class="line">    id: id</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//更新缓存</span></span><br><span class="line">  <span class="built_in">require</span>.cache[id] = <span class="built_in">module</span></span><br><span class="line">  <span class="comment">//加载模块</span></span><br><span class="line">  loadModule(id, <span class="built_in">module</span>, <span class="built_in">require</span>)</span><br><span class="line">  <span class="comment">//返回导出的变量</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>.exports</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">require</span>.cache = &#123;&#125;</span><br><span class="line"><span class="built_in">require</span>.resolve = <span class="function"><span class="params">moduleName</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* 通过模块名作为参数resolve一个完整的模块 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面函数模拟了原生 <code>require()</code> 函数，并不能准确完美地反应真实的行为，但是却能帮助我们理解一个模块是怎么被定义和加载的：</p><ol><li>一个模块的名字作为输入被接收，我们需要做的第一件事就是找到这个模块的路径(我们称之为<code>id</code>)，这个依靠 <code>require.resolve()</code>来完成。</li><li>如果模块过去被加载过，那它应该存在于缓存。这种情况下我们直接返回就行。</li><li>如果模块尚未加载，我们将初始化首次加载模块环境。具体来说就是，创建一个模块(<code>module</code>)对象，其中包含一个 <code>exports</code> (被初始化为空的对象字面量<code>{}</code>)属性。该属性将被模块的代码用于导出模块的公共 <code>API</code>。</li><li>模块被缓存。</li><li>像前面所看到的一样，源代码从文件中被加载，接着被执行。我们给模块提供一个刚才创建的 <code>module</code> 对象和一个 <code>require()</code> 函数的引用。模块通过修改或替换 <code>module.exports</code> 来提供公共 <code>API</code>。</li><li>最后，包含公共 <code>API</code> 的 <code>module.exports</code>  返回给调用者。</li></ol><h5 id="Defining-a-module-定义一个模块"><a href="#Defining-a-module-定义一个模块" class="headerlink" title="Defining a module(定义一个模块)"></a>Defining a module(定义一个模块)</h5><p>让我们看看怎么定义一个模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载另一个依赖</span></span><br><span class="line"><span class="keyword">const</span> dependency = <span class="built_in">require</span>(<span class="string">'./anotherModule'</span>)</span><br><span class="line"><span class="comment">//一个私有函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Well done <span class="subst">$&#123;dependency.username&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//API 被导出给外部用</span></span><br><span class="line"><span class="built_in">module</span>.exports.run = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  log()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了 <code>module.exports</code> 的内容其他都是私有的，当模块被加载的时候这个变量的内容被返回且被缓存。</p><h5 id="Defining-globals-定义全局内容"><a href="#Defining-globals-定义全局内容" class="headerlink" title="Defining globals(定义全局内容)"></a>Defining globals(定义全局内容)</h5><p>即使在模块中声明的所有变量和函数都在其本地范围内定义，仍然可以定义全局变量。事实上，模块系统公开了一个名为 <code>global</code> 的特殊变量。分配给此变量的所有内容将会被定义到全局环境下。</p><blockquote><p>注意：污染全局变量是不好的，模块化的优势就不在了，所以只有当你真的需要用的时候再用吧！</p></blockquote><h5 id="module-exports-vs-exports"><a href="#module-exports-vs-exports" class="headerlink" title="module.exports vs exports"></a>module.exports vs exports</h5><p><code>exports</code> 只是 <code>module.exports</code> 的一个引用，所以在 <code>exports</code> 中添加新属性是有效的，能更新 <code>module.exports</code> 的内容，而对 <code>exports</code> 重新赋值则不会更新 <code>module.exports</code>，只是让 <code>exports</code> 指向了另一个对象；但是对 <code>module.exports</code> 重新赋值就是实实在在地更改了 <code>module</code> 了，是能起作用的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有效</span></span><br><span class="line">exports.foo = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无效</span></span><br><span class="line">exports = &#123;</span><br><span class="line">  foo: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有效</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  foo: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="The-require-function-is-synchronous-require-函数是同步的"><a href="#The-require-function-is-synchronous-require-函数是同步的" class="headerlink" title="The require function is synchronous(require 函数是同步的)"></a>The require function is synchronous(require 函数是同步的)</h5><p>原生的 <code>require()</code> 函数也是同步的，所以对 <code>module.exports</code> 的赋值操作也是要同步的。下面这种代码就是错误的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>这就限制了我们绝大多数情况下都是使用同步的代码定义模块，这就是 <code>Node.js</code> 核心库为一些异步函数提供可选的同步的 <code>API</code> 的原因。</p><p>如果需要在模块初始化过程中使用异步方法，那么可以返回一个未初始化的模块，让使用者之后去初始化这个模块，这就导致了 <code>require</code> 不能保证模块被立即使用。</p><p>出于好奇，你可能想知道为什么 <code>Node.js</code> 早期是有异步的 <code>require()</code> 函数后来又被移除了，这是因为在初始化的过程中处理异步的 I/O 带来的复杂性比优势大太多了。</p><h5 id="The-resolve-algorithm-resolve-算法"><a href="#The-resolve-algorithm-resolve-算法" class="headerlink" title="The resolve algorithm(resolve 算法)"></a>The resolve algorithm(resolve 算法)</h5><p>为了解决<a href="https://zh.wikipedia.org/wiki/相依性地狱" target="_blank" rel="noopener">依赖地狱</a>问题，<code>Node.js</code> 根据模块的被加载的位置来加载不同版本的模块，这些理念也被运用到 <code>npm</code> 和 <code>require</code> 的 <code>resolve</code> 算法中。</p><p><code>resolve()</code> 接收 <code>moduleName</code> 作为参数，并返回模块的完整路径。</p><p><code>resolve</code> 算法的三个主要分支：</p><ol><li><strong>File modules</strong>(文件模块)：模块名是 <code>/</code> 开头认为是绝对路径，以 <code>./</code> 开头则认为是相对当前使用 <code>require</code> 的模块的路径。</li><li><strong>Core modules</strong>(核心模块)：模块名不以 <code>/</code> 或 <code>./</code> 开头则优先从核心库开始查找。</li><li><strong>Package modules</strong>(包模块)：核心库没有查找到时，再从当前目录的 <code>node_modules</code> 中查找相应的模块，没有则继续往上层的 <code>node_modules</code> 中找直到系统的根目录。</li></ol><p>对于文件和包模块，单个文件和目录也可以匹配到 <code>moduleName</code>。特别地，算法将尝试匹配以下内容：</p><ul><li><code>&lt;moduleName&gt;.js</code></li><li><code>&lt;moduleName&gt;/index.js</code></li><li>在<code>&lt;moduleName&gt;/package.json</code> 的 <code>main</code> 值下声明的文件或目录</li></ul><p>更详尽的 <code>resolve</code> 算法请看<a href="https://nodejs.org/api/modules.html#modules_all_together" target="_blank" rel="noopener">这里</a>。</p><p><code>node_modules</code> 目录实际上是 <code>npm</code> 安装每个包并存放相关依赖关系的地方：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">myApp</span><br><span class="line">├── foo.js</span><br><span class="line">└── node_modules</span><br><span class="line">    ├── depA</span><br><span class="line">    │   └── index.js</span><br><span class="line">    └── depB</span><br><span class="line">        │</span><br><span class="line">        ├── bar.js</span><br><span class="line">        ├── node_modules</span><br><span class="line">        ├── depA</span><br><span class="line">        │    └── index.js</span><br><span class="line">        └── depC</span><br><span class="line">             ├── foobar.js</span><br><span class="line">             └── node_modules</span><br><span class="line">                 └── depA</span><br><span class="line">                     └── index.js</span><br></pre></td></tr></table></figure><p>可以发现 <code>depA</code>, <code>depB</code>, <code>depC</code> 都有它们自己的依赖， 所以同样使用 <code>require(&#39;depA&#39;)</code>，在不同的地方加载就会加载不同的模块，如：</p><ul><li>在 <code>/myApp/foo.js</code> 中调用的 <code>require(&#39;depA&#39;)</code> 会加载 <code>/myApp/node_modules/depA/index.js</code></li><li>在 <code>/myApp/node_modules/depC/foobar.js</code> 中调用的 <code>require(&#39;depA&#39;)</code> 会加载 <code>/myApp/node_modules/depC/node_modules/depA/index.js</code></li></ul><p><code>resolve</code> 算法是 <code>Node.js</code> 依赖关系管理的核心部分，它的存在使得即便应用程序拥有成百上千包的情况下也不会出现冲突和版本不兼容的问题。</p><p>当我们调用 <code>require()</code> 时，解析算法对我们是透明的。然而，仍然可以在任何模块中通过调用 <code>require.resolve()</code> 使用该算法。</p><h5 id="The-module-cache-模块缓存"><a href="#The-module-cache-模块缓存" class="headerlink" title="The module cache(模块缓存)"></a>The module cache(模块缓存)</h5><p>模块只有在第一次被 <code>require</code> 的时候才会去加载，之后都是直接从缓存中获取的，除了提升性能外还有 2 个好处：</p><ul><li>模块依赖重复利用</li><li>从给定的包中获取相同的模块总是返回一个实例，避免了冲突</li></ul><p>需要的时候，模块的缓存可以通过 <code>require.cache</code> 访问，想要使缓存的模块失效可以删除 <code>require.cache</code> 中对应的 key 就行了，一般来说只在测试中做，在正常环境下是非常危险的。</p><h5 id="Circular-dependencies-循环依赖"><a href="#Circular-dependencies-循环依赖" class="headerlink" title="Circular dependencies(循环依赖)"></a>Circular dependencies(循环依赖)</h5><p>假设有两个模块：</p><ul><li>模块 <code>a.js</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">exports.loaded = <span class="literal">false</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  bWasLoaded: b.loaded,</span><br><span class="line">  loaded: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>模块 <code>b.js</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">exports.loaded = <span class="literal">false</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  aWasLoaded: a.loaded,</span><br><span class="line">  loaded: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>试着加载模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>)</span><br><span class="line"><span class="keyword">const</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="built_in">console</span>.log(b)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;bWasLoaded: true,loaded: true&#125;</span><br><span class="line">&#123;aWasLoaded: false,loaded: true&#125;</span><br></pre></td></tr></table></figure><p>先引入 <code>a</code> 模块，这时候 <code>a</code> 引入 <code>b</code> 模块，而 <code>b</code> 又去引入 <code>a</code> 模块，<code>b</code> 引入 <code>a</code> 的时候会直接返回缓存中的 <code>a</code>，也就是只有 <code>{load: false}</code>，然后 <code>b</code> 将 <code>{aWasLoaded: false, loaded: true}</code> 返回给 <code>a</code>，所以 <code>a</code> 中先拿到的 <code>b</code> 是完整的，而 <code>b</code> 拿到的 <code>a</code> 是不完整的。详情可查看<a href="https://nodejs.org/api/modules.html#modules_cycles" target="_blank" rel="noopener">这里</a>。</p><p>在项目中千万要注意不要出现循环依赖的情况，不然可能会出现严重的问题。</p><h4 id="Module-definition-patterns-模块定义模式"><a href="#Module-definition-patterns-模块定义模式" class="headerlink" title="Module definition patterns(模块定义模式)"></a>Module definition patterns(模块定义模式)</h4><h5 id="Named-exports-命名导出"><a href="#Named-exports-命名导出" class="headerlink" title="Named exports(命名导出)"></a>Named exports(命名导出)</h5><p>暴露公共 <code>API</code> 最常用的方法就是命名导出，将想要公开的值分配给 <code>exports</code>（或者 <code>module.exports</code>):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//file logger.js</span></span><br><span class="line">exports.info = <span class="function"><span class="params">message</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'info: '</span> + message)</span><br><span class="line">&#125;</span><br><span class="line">exports.verbose = <span class="function"><span class="params">message</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'verbose: '</span> + message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导出的函数就可以当做已加载模块的属性使用了:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//file main.js</span></span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">'./logger'</span>)</span><br><span class="line">logger.info(<span class="string">'This is an informational message'</span>)</span><br><span class="line">logger.verbose(<span class="string">'This is a verbose message'</span>)</span><br></pre></td></tr></table></figure><p><code>CommonJS</code> 规范只允许使用 <code>exports</code> 来导出公共的成员，所以命名导出也是唯一的与 <code>CommonJS</code> 规范兼容的模式。而 <code>module.exports</code> 是为了支持更广泛定义模式的一个扩展。</p><h5 id="Exporting-a-function-导出一个函数"><a href="#Exporting-a-function-导出一个函数" class="headerlink" title="Exporting a function(导出一个函数)"></a>Exporting a function(导出一个函数)</h5><p>它只暴露了一个函数，为模块提供了一个明确的入口点，使其更易于理解和使用，也很好地体现了单一职责原则，也被称为 <code>substack</code> 模式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file logger.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">message</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`info: <span class="subst">$&#123;message&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该模式的一种可能扩展是使用导出的函数作为其他公共 <code>API</code> 的命名空间，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.verbose = <span class="function"><span class="params">message</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`verbose: <span class="subst">$&#123;message&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file main.js</span></span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">'./logger'</span>)</span><br><span class="line">logger(<span class="string">'This is an informational message'</span>)</span><br><span class="line">logger.verbose(<span class="string">'This is a verbose message'</span>)</span><br></pre></td></tr></table></figure><p><code>Node.js</code> 鼓励 <code>Single Responsibility Principle(SRP)</code>(单一职责原则)：每个模块负责单一功能，该职责也完全由该模块封装。</p><blockquote><p><code>substatck</code> 模式：导出一个函数来暴露主要功能(如上面的<code>logger(***)</code>)，使用导出的函数作为命名空间来导出次要的功能(如上面的<code>logger.verbose(***)</code>)，注意主要功能定义要在前，不然次要功能会被覆盖，因为 <code>module.exports</code> 被重新赋值了！</p></blockquote><h5 id="Exporting-a-constructor-导出一个构造器"><a href="#Exporting-a-constructor-导出一个构造器" class="headerlink" title="Exporting a constructor(导出一个构造器)"></a>Exporting a constructor(导出一个构造器)</h5><p>导出构造器是导出一个函数的特例，区别在于使用者可以用构造器创建实例也可以扩展原型并创建新类:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//file logger.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Logger</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">Logger.prototype.log = <span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`[<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>] <span class="subst">$&#123;message&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">Logger.prototype.info = <span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.log(<span class="string">`info: <span class="subst">$&#123;message&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">Logger.prototype.verbose = <span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.log(<span class="string">`verbose: <span class="subst">$&#123;message&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = Logger</span><br></pre></td></tr></table></figure><p>下面是如何使用的代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//file main.js</span></span><br><span class="line"><span class="keyword">const</span> Logger = <span class="built_in">require</span>(<span class="string">'./logger'</span>)</span><br><span class="line"><span class="keyword">const</span> dbLogger = <span class="keyword">new</span> Logger(<span class="string">'DB'</span>)</span><br><span class="line">dbLogger.info(<span class="string">'This is an informational message'</span>)</span><br><span class="line"><span class="keyword">const</span> accessLogger = <span class="keyword">new</span> Logger(<span class="string">'ACCESS'</span>)</span><br><span class="line">accessLogger.verbose(<span class="string">'This is a verbose message'</span>)</span><br></pre></td></tr></table></figure><p>上面的 <code>logger</code> 也可以使用 <code>ES2015</code> 的 <code>class</code> 改写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  log(message) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`[<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>] <span class="subst">$&#123;message&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  info(message) &#123;</span><br><span class="line">    <span class="keyword">this</span>.log(<span class="string">`info: <span class="subst">$&#123;message&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  verbose(message) &#123;</span><br><span class="line">    <span class="keyword">this</span>.log(<span class="string">`verbose: <span class="subst">$&#123;message&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = Logger</span><br></pre></td></tr></table></figure><p>这种模式的变种包括对不使用 <code>new</code> 调用的防御(不使用 <code>new</code> 只会当做普通函数调用，而不会返回实例，而且可能会污染调用者(<code>this.name = name</code>这就污染了<code>Logger()</code>所属的对象了，这里是<code>global</code>))，这可以让我们把模块当做工厂使用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Logger</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Logger)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Logger(name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这很简单：我们检查 <code>this</code> 是否存在，并且是 <code>Logger</code> 的一个实例。如果这些条件中的任何一个都为 <code>false</code>，则意味着 <code>Logger()</code> 函数在不使用 <code>new</code> 的情况下被调用，然后继续正确创建新实例并将其返回给调用者。这种技术允许我们将模块也用作工厂(<strong>这里原书存在问题所以做了些改动</strong>)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原书</span></span><br><span class="line"><span class="comment">// file logger.js</span></span><br><span class="line"><span class="keyword">const</span> Logger = <span class="built_in">require</span>(<span class="string">'./logger'</span>)</span><br><span class="line"><span class="keyword">const</span> dbLogger = Logger(<span class="string">'DB'</span>)</span><br><span class="line">accessLogger.verbose(<span class="string">'This is a verbose message'</span>)</span><br><span class="line"><span class="comment">// 改后</span></span><br><span class="line"><span class="comment">// file main.js</span></span><br><span class="line"><span class="keyword">const</span> Logger = <span class="built_in">require</span>(<span class="string">'./logger'</span>)</span><br><span class="line"><span class="keyword">const</span> dbLogger = Logger(<span class="string">'DB'</span>)</span><br><span class="line">dbLogger.verbose(<span class="string">'This is a verbose message'</span>)</span><br></pre></td></tr></table></figure><p>另一种更加清晰的方法来实现这个防御的是使用 <code>ES2015</code> 的 <code>new.target</code> 的语法(<code>Node.js</code> 第 6 版开始)，<code>new.target</code> 是用来检测一个函数或者构造器是否是使用 <code>new</code> 调用的，如果是则为 <code>true</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Logger</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">new</span>.target) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Logger(name) <span class="comment">//原书为 new LoggerConstructor(name)</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果使用 <code>ES2015</code> 的 <code>class</code> 则不需要做 <code>new</code> 的防御，因为不使用 <code>new</code> 关键字来调用构造函数会抛出异常：<code>TypeError: Class constructor Logger cannot be invoked without &#39;new&#39;</code></p></blockquote><h5 id="Exporting-an-instance-导出一个实例"><a href="#Exporting-an-instance-导出一个实例" class="headerlink" title="Exporting an instance(导出一个实例)"></a>Exporting an instance(导出一个实例)</h5><p>我们可以利用 <code>require()</code> 的缓存机制来轻松地定义具有从构造函数或工厂创建的状态的有状态实例，可以在不同模块之间共享:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//file logger.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Logger</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">Logger.prototype.log = <span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.count++</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'['</span> + <span class="keyword">this</span>.name + <span class="string">'] '</span> + message)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> Logger(<span class="string">'DEFAULT'</span>)</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file main.js</span></span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">'./logger'</span>)</span><br><span class="line">logger.log(<span class="string">'This is an informational message'</span>)</span><br></pre></td></tr></table></figure><p>因为模块会被缓存，所以通过 <code>require</code> 引入的模块都是同一个实例，共享状态，这就像单例模式一样。但是实际上有可能并不只有一个实例，我们知道在安装依赖的时候，一个模块可能会被安装多次(版本不同)，这就会有多个同时运行于一个 <code>Node.js</code> 的应用程序中实例出现。</p><p>该模式的一个扩展是不仅导出实例，同时也导出用于创建实例的构造器，这让使用者可以创建新的实例或者必要时扩展对象，这有点类似导出命名空间(<a href="#Exporting-a-function-导出一个函数">Exporting a function</a>):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// other code</span></span><br><span class="line"><span class="built_in">module</span>.exports.Logger = Logger</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file main.js</span></span><br><span class="line"><span class="keyword">const</span> customLogger = <span class="keyword">new</span> logger.Logger(<span class="string">'CUSTOM'</span>)</span><br><span class="line">customLogger.log(<span class="string">'This is an informational message'</span>)</span><br></pre></td></tr></table></figure><h5 id="Modifying-other-modules-or-the-global-scope-修改其他模块或全局作用域"><a href="#Modifying-other-modules-or-the-global-scope-修改其他模块或全局作用域" class="headerlink" title="Modifying other modules or the global scope(修改其他模块或全局作用域)"></a>Modifying other modules or the global scope(修改其他模块或全局作用域)</h5><p>一个模块可以不导出任何东西，一个模块也可以修改全局域或者其他已经缓存的模块。</p><blockquote><p>注意：修改全局域或者其他模块是不好的，但是这在某些情况(如测试)下是有用的。</p></blockquote><p>这是向另一个模块添加函数的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file patcher.js</span></span><br><span class="line"><span class="comment">// ./logger is another module</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./logger'</span>).customMessage = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'This is a new functionality'</span>)</span><br></pre></td></tr></table></figure><p>所以只要在引入了 <code>patcher</code> 模块之后才有 <code>customMessage</code> 函数，这是非常危险的，特别是当多个模块与相同的实体进行交互时。</p><h4 id="The-observer-pattern-观察者模式"><a href="#The-observer-pattern-观察者模式" class="headerlink" title="The observer pattern(观察者模式)"></a>The observer pattern(观察者模式)</h4><p>观察者模式是对 <code>Node.js</code> 响应模型的理想解决方案，也是对回调的完美补充。我们给出以下定义：</p><blockquote><p>模式(观察者)定义一个对象(<code>subject</code>，主题)，它可以在其状态发生变化时通知一组观察者(或监听器)。</p></blockquote><p>和回调的不同在于可以通知多个观察者，传统的 <code>CPS</code> 模式只能传递结果给一个监听器(就是 <code>callback</code>)。</p><h5 id="The-EventEmiiter-class"><a href="#The-EventEmiiter-class" class="headerlink" title="The EventEmiiter class"></a>The EventEmiiter class</h5><p>在传统的面向对象编程中，观察者模式需要接口，具体类和层次结构。在 <code>Node.js</code> 中，都变得简单得多。观察者模式已经内置在核心模块中，可以通过 <code>EventEmitter</code> 类来实现。 <code>EventEmitter</code> 类允许我们注册一个或多个函数作为监听器，当特定的事件类型被触发时，它的回调将被调用，以通知其监听器:</p><p><img src="/assets/img/EventEmitter.png" alt="EventEmitter"></p><p><code>EventEmitter</code> 是从事件核心模块导出的原型，下面是如何获取一个实例的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter</span><br><span class="line"><span class="keyword">const</span> eeInstance = <span class="keyword">new</span> EventEmitter()</span><br></pre></td></tr></table></figure><p><code>EventEmitter</code> 的基本方法如下：</p><ul><li><code>on(event, listener)</code>:注册一个新的监听器(一个函数)到一个事件(string)中。</li><li><code>once(event, listener)</code>:也是为一个事件注册监听器，但是在事件第一次被触发后监听器被移除。</li><li><code>emit(event, [arg1], [...])</code>:生成一个新事件，并附带参数给监听器。</li><li><code>removeListener(event, listener)</code>:删除指定事件的一个监听器。</li></ul><p>上述每个方法都返回 <code>EventEmitter</code> 以便链式调用。监听器是类似于 <code>function([arg1], [...])</code> 的函数，可以接受通过 <code>emit</code> 传入的参数，函数中 <code>this</code> 是指向生产事件的 <code>EventEmitter</code> 实例。</p><blockquote><p>和回调函数不同的是，监听器第一个参数就是来自于 <code>emit</code> 的任何类型的数据，而不是 <code>error</code>。</p></blockquote><h5 id="Creating-and-using-EventEmitter-创建和使用-EventEmitter"><a href="#Creating-and-using-EventEmitter-创建和使用-EventEmitter" class="headerlink" title="Creating and using EventEmitter(创建和使用 EventEmitter)"></a>Creating and using EventEmitter(创建和使用 EventEmitter)</h5><p>以下代码显示了在文件列表中找到匹配特定正则的文件内容时，使用 <code>EventEmitter</code> 实现实时通知订阅者的功能：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findPattern</span>(<span class="params">files, regex</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> emitter = <span class="keyword">new</span> EventEmitter()</span><br><span class="line">  files.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    fs.readFile(file, <span class="string">'utf8'</span>, (err, content) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> emitter.emit(<span class="string">'error'</span>, err)</span><br><span class="line">      emitter.emit(<span class="string">'fileread'</span>, file)</span><br><span class="line">      <span class="keyword">let</span> match</span><br><span class="line">      <span class="keyword">if</span> ((match = content.match(regex)))</span><br><span class="line">        match.forEach(<span class="function"><span class="params">elem</span> =&gt;</span> emitter.emit(<span class="string">'found'</span>, file, elem))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> emitter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">findPattern([<span class="string">'fileA.txt'</span>, <span class="string">'fileB.json'</span>], /hello \w+<span class="regexp">/g)</span></span><br><span class="line"><span class="regexp">  .on('fileread', file =&gt; console.log(file + ' was read'))</span></span><br><span class="line"><span class="regexp">  .on('found', (file, match) =&gt;</span></span><br><span class="line"><span class="regexp">    console.log('Matched "' + match + '" in file ' + file)</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">  .on('error', err =&gt; console.log('Error emitted: ' + err.message))</span></span><br></pre></td></tr></table></figure><p>从上面我们也看到了是如何链式调用的了。</p><blockquote><p>注意，这里因为 <code>fs.readFile</code> 是异步的，会在下一次事件循环中才执行，所以实际上还是先注册了事件监听(<code>on</code>)再生产了事件(<code>emit</code>)。</p></blockquote><h5 id="Propagating-errors-传递错误-1"><a href="#Propagating-errors-传递错误-1" class="headerlink" title="Propagating errors(传递错误)"></a>Propagating errors(传递错误)</h5><p>对于错误事件，最佳做法是注册错误的侦听器(如在<code>findPattern</code>中的<code>error</code>事件一样)，因为 Node.js 会以特殊的方式处理它，并且如果没有找到相关联的侦听器，将自动抛出异常并退出程序。</p><h5 id="Making-any-object-observable-使任意对象可观察"><a href="#Making-any-object-observable-使任意对象可观察" class="headerlink" title="Making any object observable(使任意对象可观察)"></a>Making any object observable(使任意对象可观察)</h5><p>直接上代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FindPattern</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(regex) &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="keyword">this</span>.regex = regex</span><br><span class="line">    <span class="keyword">this</span>.files = []</span><br><span class="line">  &#125;</span><br><span class="line">  addFile(file) &#123;</span><br><span class="line">    <span class="keyword">this</span>.files.push(file)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">  find() &#123;</span><br><span class="line">    <span class="keyword">this</span>.files.forEach(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">      fs.readFile(file, <span class="string">'utf8'</span>, (err, content) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.emit(<span class="string">'error'</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.emit(<span class="string">'fileread'</span>, file)</span><br><span class="line">        <span class="keyword">let</span> match = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">if</span> ((match = content.match(<span class="keyword">this</span>.regex))) &#123;</span><br><span class="line">          match.forEach(<span class="function"><span class="params">elem</span> =&gt;</span> <span class="keyword">this</span>.emit(<span class="string">'found'</span>, file, elem))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> findPatternObject = <span class="keyword">new</span> FindPattern(<span class="regexp">/hello \w+/</span>)</span><br><span class="line">findPatternObject</span><br><span class="line">  .addFile(<span class="string">'fileA.txt'</span>)</span><br><span class="line">  .addFile(<span class="string">'fileB.json'</span>)</span><br><span class="line">  .find()</span><br><span class="line">  .on(<span class="string">'found'</span>, (file, match) =&gt;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Matched "<span class="subst">$&#123;match&#125;</span>"</span></span><br><span class="line"><span class="string">       in file <span class="subst">$&#123;file&#125;</span>`</span>)</span><br><span class="line">  )</span><br><span class="line">  .on(<span class="string">'error'</span>, err =&gt; <span class="built_in">console</span>.log(<span class="string">`Error emitted <span class="subst">$&#123;err.message&#125;</span>`</span>))</span><br></pre></td></tr></table></figure><p>这里直接使用 <code>ES6</code> 的继承语法(不推荐使用<a href="https://nodejs.org/docs/latest/api/util.html#util_util_inherits_constructor_superconstructor" target="_blank" rel="noopener">util.inherits</a>方式了，这里书中还没有更新过来)来实现对 <code>EventEmitter</code> 的继承， 这在 <code>Node.js</code> 生态系统中是一个很常见的模式，例如，核心 <code>HTTP</code> 模块的 <code>Server</code> 对象定义了 <code>listen()</code>，<code>close()</code>，<code>setTimeout()</code> 等方法，并且在内部它也继承自 <code>EventEmitter</code> 函数，从而允许它在收到新的请求时生产 <code>request</code> 事件、在建立新的连接时生产 <code>connection</code> 事件、或者在服务器关闭时生产 <code>closed</code> 事件。</p><h5 id="Synchronous-and-asynchronous-events-同步和异步事件"><a href="#Synchronous-and-asynchronous-events-同步和异步事件" class="headerlink" title="Synchronous and asynchronous events(同步和异步事件)"></a>Synchronous and asynchronous events(同步和异步事件)</h5><p>同一个 <code>EventEmitter</code> 中不要同时使用同步和异步触发事件(这样来阻止<code>Zalgo</code>)，同步事件是要在所有监听器都注册完了才能触发的，而异步事件要保证在下一个事件循环周期前不被触发，异步事件触发前都能添加监听器(上面的<code>findPattern</code>就是这种)。</p><p>像下面这种就是不会正常运行的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncEmit</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="keyword">this</span>.emit(<span class="string">'ready'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> syncEmit = <span class="keyword">new</span> SyncEmit()</span><br><span class="line">syncEmit.on(<span class="string">'ready'</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'Object is ready to be  used'</span>))</span><br></pre></td></tr></table></figure><h5 id="EventEmitter-versus-callbacks-EventEmitter-vs-回调函数"><a href="#EventEmitter-versus-callbacks-EventEmitter-vs-回调函数" class="headerlink" title="EventEmitter versus callbacks(EventEmitter vs 回调函数)"></a>EventEmitter versus callbacks(EventEmitter vs 回调函数)</h5><p>定义异步 <code>API</code> 时是使用 <code>callbacks</code> 还是 <code>EventEmitter</code> 的一般规则：当结果必须通过异步方式返回时使用 <code>callbacks</code>，当有什么东西需要被传达时使用 <code>EventEmitter</code>。</p><p>来看一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helloEvents</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> eventEmitter = <span class="keyword">new</span> EventEmitter()</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> eventEmitter.emit(<span class="string">'hello'</span>, <span class="string">'hello world'</span>), <span class="number">100</span>)</span><br><span class="line">  <span class="keyword">return</span> eventEmitter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helloCallback</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> callback(<span class="string">'hello world'</span>), <span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个函数在功能上是等价的，第一个函数通过事件传递延迟函数的结束，第二个函数使用回调函数通知调用函数。实际上，真正的区别在于可读性、代码量、语法上，这里给出一些提示帮助决定是使用 <code>callbacks</code> 还是 <code>EventEmitter</code>：</p><ul><li><code>callbacks</code> 在支持事件的不同类型上有限制，虽然可以把事件类型作为参数传递给回调函数，或者接受多个回调来区分多种类型事件，但是这样是不够优雅的，这种情况 <code>EventEmitter</code> 可以提供更简单的接口和更简洁的代码。</li><li>同一事件多次被触发或者从未触发，这种情况使用 <code>EventEmitter</code> 更好。</li><li>使用 <code>callbacks</code> 的 <code>API</code> 仅通知一个特定的回调函数，而使用 <code>EventEmitter</code> 可以让多个监听器接收同一个通知。</li></ul><h5 id="Combining-callbacks-and-EventEmitter-结合回调和-EventEmitter"><a href="#Combining-callbacks-and-EventEmitter-结合回调和-EventEmitter" class="headerlink" title="Combining callbacks and EventEmitter(结合回调和 EventEmitter)"></a>Combining callbacks and EventEmitter(结合回调和 EventEmitter)</h5><p>某些场景下我们需要结合 <code>callbacks</code> 和 <code>EventEmitter</code> 来使用，这种模式在某种场景下是非常有用的：通过导出一个传统的异步函数作为主功能来实现最小接口原则，但同时通过返回 <code>EventEmitter</code> 提供更丰富的功能和控制。使用该模式的一个例子是 <a href="https://www.npmjs.com/package/glob" target="_blank" rel="noopener">node-glob</a> 模块，模块的主入口是它导出的一个函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">glob(pattern, [options], callback)</span><br></pre></td></tr></table></figure><p>对于匹配到指定文件名匹配模式的文件列表，相关回调函数会被调用。同时，该函数返回 <code>EventEmitter</code>，它展现了当前进程的状态。例如，当成功匹配文件名时触发 <code>match</code> 事件，当文件列表全部匹配完毕时触发 <code>end</code> 事件，或者该进程被手动中止时触发 <code>abort</code> 事件:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> glob = <span class="built_in">require</span>(<span class="string">'glob'</span>)</span><br><span class="line">glob(<span class="string">'data/*.txt'</span>, (error, files) =&gt;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`All files found: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(files)&#125;</span>`</span>)</span><br><span class="line">).on(<span class="string">'match'</span>, match =&gt; <span class="built_in">console</span>.log(<span class="string">`Match found: <span class="subst">$&#123;match&#125;</span>`</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Node-js-Essential-Patterns-Node-js-基本模式&quot;&gt;&lt;a href=&quot;#Node-js-Essential-Patterns-Node-js-基本模式&quot; class=&quot;headerlink&quot; title=&quot;Node.js Essential Patterns(Node.js 基本模式)&quot;&gt;&lt;/a&gt;Node.js Essential Patterns(Node.js 基本模式)&lt;/h1&gt;&lt;h2 id=&quot;The-callback-pattern-回调模式&quot;&gt;&lt;a href=&quot;#The-callback-pattern-回调模式&quot; class=&quot;headerlink&quot; title=&quot;The callback pattern(回调模式)&quot;&gt;&lt;/a&gt;The callback pattern(回调模式)&lt;/h2&gt;&lt;p&gt;回调是&lt;code&gt;reactor&lt;/code&gt;模式中&lt;code&gt;handler&lt;/code&gt;的实例。&lt;/p&gt;
&lt;h3 id=&quot;The-continuation-passing-pattern-连续传递模式&quot;&gt;&lt;a href=&quot;#The-continuation-passing-pattern-连续传递模式&quot; class=&quot;headerlink&quot; title=&quot;The continuation-passing pattern(连续传递模式)&quot;&gt;&lt;/a&gt;The continuation-passing pattern(连续传递模式)&lt;/h3&gt;&lt;p&gt;在 JavaScript 中回调就是传入作为参数传入另外一个函数中的函数，并且在操作完成后调用。在函数式编程中，这种传递结果的方式被称为&lt;code&gt;continuation-passing style(CPS)&lt;/code&gt;。这是个一般概念，并不是针对异步操作。实际上，它只是通过将结果作为参数传递给另一个函数（回调函数）来传递结果，然后在主体逻辑中调用回调函数拿到操作结果，而不是直接将其返回给调用者。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://1016990109.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《Node.js 设计模式》读书笔记 第一章</title>
    <link href="http://1016990109.github.io/2018/05/11/Node-js-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <id>http://1016990109.github.io/2018/05/11/Node-js-设计模式读书笔记-第一章/</id>
    <published>2018-05-11T12:00:45.000Z</published>
    <updated>2018-05-22T03:12:52.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Welcome-to-the-Node-js-Platform"><a href="#Welcome-to-the-Node-js-Platform" class="headerlink" title="Welcome to the Node.js Platform"></a>Welcome to the Node.js Platform</h1><h2 id="Small-modules-小模块"><a href="#Small-modules-小模块" class="headerlink" title="Small modules(小模块)"></a>Small modules(小模块)</h2><p><code>Node.js</code>使用<code>module</code>(模块)的概念组织代码的结构。<br><code>package</code>可提供复用的模块，有一个 module 作为入口。<br><code>Node.js</code>中，致力于设计小模块，为了代码的简洁，更为了更好地控制作用域。有两个主要原则：</p><a id="more"></a><blockquote><ul><li>“Small is beautiful.”(小而精)</li><li>“Make each program do one thing well.” (每个程序只有单一的职责)</li></ul></blockquote><p><code>Node.js</code> 通过官方包管理工具<code>npm</code>解决包之间的依赖问题，每个<code>package</code>都有它自己的依赖，故而一个程序中多个<code>package</code>能够无冲突地安装。应用程序都是由一个个很小的、单职责的依赖构成的。</p><p><strong>小模块</strong>应该有的特性：</p><blockquote><ul><li>Easier to understand and use(易理解、易用)</li><li>Simpler to test and maintain(易于测试和维护)</li><li>Perfect to share with the browser(完美支持浏览器)</li></ul></blockquote><p><strong>DRY(Dont’t Repeat Yourself)原则</strong></p><h2 id="Small-surface-area-暴露需要的接口"><a href="#Small-surface-area-暴露需要的接口" class="headerlink" title="Small surface area(暴露需要的接口)"></a>Small surface area(暴露需要的接口)</h2><p>一般使用者只会用到很有限的功能，而很少去  扩展一个模块，所以<code>Node.js</code>的很多模块只会暴露一个函数或者一个构造器，然后把更细节的东西都放在函数或者构造器里，这样能帮助  使用者认清什么是主要的什么是次要的.</p><p>模块是不允许被扩展的，看起来扩展性低，但实际上有很多优势：减少了应用场景(这样考虑的情况就少了，容易实现)，简化了实现，便于维护，提高了可用性。</p><h2 id="Simplicity-and-progmatism-简单而实用"><a href="#Simplicity-and-progmatism-简单而实用" class="headerlink" title="Simplicity and progmatism(简单而实用)"></a>Simplicity and progmatism(简单而实用)</h2><blockquote><p>简单就是复杂到极致。—— 达尔文</p></blockquote><blockquote><p>设计必须简单， 不管是实现还是接口。实现的简洁比接口的简洁更重要。设计中最重要的就是简洁。—— Richard P.Gabriel(一位杰出的计算机科学家)</p></blockquote><p>设计简单的而不是完美或功能完备的软件是一个好的实践：</p><ul><li> 更容易实现</li><li>更少的资源，传输更快</li><li>更容易适应</li><li>容易维护和理解</li></ul><p>设计简单这个原则同样也适用于<code>JavaScript</code>，简单函数、闭包、<code>object</code>替代了复杂的类继承。</p><h2 id="Introduction-to-Node-js-6-and-ES2015-介绍-Node-js-6-和-ES6"><a href="#Introduction-to-Node-js-6-and-ES2015-介绍-Node-js-6-和-ES6" class="headerlink" title="Introduction to Node.js 6 and ES2015 (介绍 Node.js 6 和 ES6)"></a>Introduction to Node.js 6 and ES2015 (介绍 Node.js 6 和 ES6)</h2><h3 id="The-let-and-const-keywords-let-和-const-关键字"><a href="#The-let-and-const-keywords-let-和-const-关键字" class="headerlink" title="The let and const keywords(let 和 const 关键字)"></a>The let and const keywords(let 和 const 关键字)</h3><p>在之前(ES2015 之前)，<code>js</code>只支持函数作用域和全局作用域，例如在 if 中声明一个变量却能在 if 块之外访问：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="string">'hello'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x) <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>但是使用<code>let</code>关键字后，if 块外就访问不到其中声明的变量了，这在一定程度上能减少因为误操作其中的变量而导致的 bug：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="string">'hello'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x) <span class="comment">//ReferenceError: x is not defined</span></span><br></pre></td></tr></table></figure><p><code>const</code>关键字用于声明不可变变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="string">'This will never change'</span></span><br><span class="line">x = <span class="string">'...'</span></span><br><span class="line"><span class="comment">//TypeError: Assignment to constant variable</span></span><br></pre></td></tr></table></figure><p>需要注意的是，<code>const</code>  是意味着变量的绑定不变而不是内容不变，示例入下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cosnt x = &#123;&#125;</span><br><span class="line">x.name = <span class="string">'John'</span><span class="comment">//work</span></span><br><span class="line"></span><br><span class="line">x = <span class="literal">null</span><span class="comment">//don't work</span></span><br></pre></td></tr></table></figure><p>通常来说引入模块使用 <code>const</code>防止模块发生变化：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> path = <span class="string">'./some/path'</span> <span class="comment">//fail</span></span><br></pre></td></tr></table></figure><p>如果你想要创建一个不可更改的对象，<code>const</code>是不够的，你可以使用 ES5 的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze" target="_blank" rel="noopener">Object.freeze()</a>或者 <a href="https://www.npmjs.com/package/deep-freeze" target="_blank" rel="noopener">deep-freeze</a>模块，或者我使用<code>react</code>框架时候经常用的<a href="https://www.npmjs.com/package/immutable" target="_blank" rel="noopener">immutable</a>模块也可以。</p><blockquote><p>扩展——这里提一下<strong>ES5</strong>中<code>freeze</code>和<code>seal</code>的区别，<code>seal</code>只限制无法增加和删除对象属性 ，而<code>freeze</code>在<code>seal</code>的基础上还限制了不可更改对象的属性。</p></blockquote><h3 id="The-arrow-function-箭头函数"><a href="#The-arrow-function-箭头函数" class="headerlink" title="The arrow function(箭头函数)"></a>The arrow function(箭头函数)</h3><p>箭头函数是<strong>ES6</strong>的一大亮点，能很大程度上简化代码。一个参数可以不需要圆括号，函数体只有一行且结果为返回值可不需要花括号，具体示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">const</span> event = numbers.filter(<span class="function"><span class="params">x</span> =&gt;</span> x % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> event2 = numbers.filter(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (x % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>箭头函数中 this 的指向跟随父函数，示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DelayedGreeter</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DelayedGreeter.prototype.greet = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> DelayedGreeter(<span class="string">'World'</span>).greet() <span class="comment">//Hello undefined</span></span><br><span class="line"></span><br><span class="line">DelayedGreeter.prototype.greet = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + <span class="keyword">this</span>.name))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> DelayedGreeter(<span class="string">'World'</span>).greet() <span class="comment">//Hello World</span></span><br></pre></td></tr></table></figure><h3 id="Class-syntax-Class-语法"><a href="#Class-syntax-Class-语法" class="headerlink" title="Class syntax(Class 语法)"></a>Class syntax(Class 语法)</h3><p><code>class</code>只是个语法糖，使用 class 实现对象继承并不是通过<code>class</code>继承的，还是通过内部的 prototypes，properties 实现继承，但是<code>class</code>使得程序可读性变强了。</p><p>让我们来看个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//复杂，晦涩难懂</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, surname, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.surname = surname</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.getFullName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">' '</span> + <span class="keyword">this</span>.surname</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.older = <span class="function"><span class="keyword">function</span>(<span class="params">person1, person2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> preson1.age &gt;= person2.age ? person1 : person2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//易懂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, surname, age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.surname = surname</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getFullName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">' '</span> + <span class="keyword">this</span>.surname</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> older(person1, person2) &#123;</span><br><span class="line">    <span class="keyword">return</span> preson1.age &gt;= person2.age ? person1 : person2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonWithMiddlename</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, middlename, surname, age) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name, surname, age)</span><br><span class="line">    <span class="keyword">this</span>.middlename = middlename</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getFullName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">' '</span> + <span class="keyword">this</span>.middlename + <span class="string">' '</span> + <span class="keyword">this</span>.surname</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Enhanced-object-literals-对象字面量语法增强"><a href="#Enhanced-object-literals-对象字面量语法增强" class="headerlink" title="Enhanced object literals(对象字面量语法增强)"></a>Enhanced object literals(对象字面量语法增强)</h3><ul><li>缺省键值，属性名和变量名相同时可省略属性名</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">22</span></span><br><span class="line"><span class="keyword">const</span> y = <span class="number">17</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; x, y &#125;</span><br></pre></td></tr></table></figure><ul><li>计算属性，属性可以是由变量计算而来</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> namespace = <span class="string">'-webkit-'</span></span><br><span class="line"><span class="keyword">const</span> style = &#123;</span><br><span class="line">  [namespace + <span class="string">'box-sizing'</span>]: <span class="string">'border-box'</span>,</span><br><span class="line">  [namespace + <span class="string">'box-shadow'</span>]: <span class="string">'10px 10px 5px #888888'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>getter 和 setter</li></ul><p>先看例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">'George'</span>,</span><br><span class="line">  surname: <span class="string">'Boole'</span>,</span><br><span class="line">  get fullname() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">''</span> + <span class="keyword">this</span>.surname</span><br><span class="line">  &#125;,</span><br><span class="line">  set fullname(fullname) &#123;</span><br><span class="line">    <span class="keyword">let</span> parts = fullname.split(<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">this</span>.name = parts[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">this</span>.surname = parts[<span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person.fullname) <span class="comment">// "George Boole"</span></span><br><span class="line"><span class="built_in">console</span>.log((person.fullname = <span class="string">'Alan Turing'</span>)) <span class="comment">// "Alan Turing"</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name) <span class="comment">// "Alan"</span></span><br></pre></td></tr></table></figure><p>可以看到第二个 console.log 输出的是“Alan Turing”，这是因为调用 set 后默认返回 get 获得的值。</p><h3 id="Map-and-Set-collections-Map-和-Set-集合"><a href="#Map-and-Set-collections-Map-和-Set-集合" class="headerlink" title="Map and Set collections(Map 和 Set 集合)"></a>Map and Set collections(Map 和 Set 集合)</h3><p>原来我们建立 hash map 的时候都是用<code>object</code>来完成的，而现在可以直接使用<code>Map</code>原型，提供了 set、get、has、delete 方法和 size 属性，比使用<code>object</code>更加直接、简单，遍历可使用<code>for...of</code>语法，这种遍历方式是和 Map 中属性的插入顺序是一样的(这在普通<code>object</code>中是无法保证的)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tests = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">   tests.set(<span class="function"><span class="params">()</span> =&gt;</span> <span class="number">2</span>+<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">   tests.set(<span class="function"><span class="params">()</span> =&gt;</span> <span class="number">2</span>*<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">   tests.set(<span class="function"><span class="params">()</span> =&gt;</span> <span class="number">2</span>/<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">const</span> entry <span class="keyword">of</span> tests) &#123;</span><br><span class="line">     <span class="built_in">console</span>.log((entry[<span class="number">0</span>]() === entry[<span class="number">1</span>])   <span class="string">'PASS'</span> : <span class="string">'FAIL'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Set</code>只允许存在不同的值，和数学上的集合是一个概念，里面内容可以是<code>number</code>也可以是<code>object</code>或<code>function</code>，除了 set 换成 add 外其他的都与 map 相同，遍历时每一个 entry 内容是 value。</p><h3 id="WeakMap-and-WeakSet-collections"><a href="#WeakMap-and-WeakSet-collections" class="headerlink" title="WeakMap and WeakSet collections"></a>WeakMap and WeakSet collections</h3><p>顾名思义，<code>WeakMap</code>和<code>WeakSet</code>是<code>Map</code>和<code>Set</code>弱化后的原型，但是这其中并无优劣之分，只是适用于不同的场合。</p><p><code>WeakMap</code>的<strong>key</strong>只能是非空对象，对<strong>key</strong>仅保持弱引用，最大的好处是可以避免内存泄漏，一旦<strong>key</strong>的引用为空或者 undefined，垃圾回收器就可以回收这个对象，但是<code>WeakMap</code>不能迭代遍历。</p><p><code>WeakSet</code>与<code>WeakMap</code>同。</p><h3 id="Template-literals-模板字符串"><a href="#Template-literals-模板字符串" class="headerlink" title="Template literals(模板字符串)"></a>Template literals(模板字符串)</h3><p>使用`代替双引号和单引号，在字符串中可以使用表达式${expression}，可以换行。</p><h3 id="ES6-其他语法"><a href="#ES6-其他语法" class="headerlink" title="ES6 其他语法"></a>ES6 其他语法</h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise</a>(稍后会详细讲到)</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters" target="_blank" rel="noopener">函数默认参数</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Rest_parameters" target="_blank" rel="noopener">剩余参数语法</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator" target="_blank" rel="noopener">拓展运算符</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noopener">解构赋值</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target" target="_blank" rel="noopener">new.target</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noopener">代理</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect" target="_blank" rel="noopener">反射</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Symbol" target="_blank" rel="noopener">Symbol</a></li></ul><h2 id="The-reactor-pattern"><a href="#The-reactor-pattern" class="headerlink" title="The reactor pattern"></a>The reactor pattern</h2><p><code>reactor</code>模式是 <code>Node.js</code> 异步的核心。</p><h3 id="I-O-is-slow-I-O-操作是慢的"><a href="#I-O-is-slow-I-O-操作是慢的" class="headerlink" title="I/O is slow(I/O 操作是慢的)"></a>I/O is slow(I/O 操作是慢的)</h3><p>I/O 操作可以说是计算机操作中最慢的一环，I/O 的速度可能和网络速度、磁盘速率有关，也可能和其他因素有关，比如用户点击事件等等。</p><h3 id="Blocking-I-O-阻塞-I-O"><a href="#Blocking-I-O-阻塞-I-O" class="headerlink" title="Blocking I/O(阻塞 I/O)"></a>Blocking I/O(阻塞 I/O)</h3><p>传统的阻塞 I/O 模型中，I/O 请求会阻塞之后代码块的运行，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直到请求完成，数据可用，线程都是阻塞的</span></span><br><span class="line">data = socket.read()</span><br><span class="line"><span class="comment">// 请求完成，数据可用</span></span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure><p>而为了达到并发的  目的，传统的 web 服务器是  选择新开一个线程或进程，这样因为线程(或进程)之间的相互独立性，一个线程(或进程)阻塞并不会影响另一个。</p><p>但是创建一个线程是昂贵的，一个线程需要内存，而且切换线程需要保留线程的上下文等等，所以这种方式并不是最佳实践。</p><h3 id="Non-blocking-I-O-非阻塞-I-O"><a href="#Non-blocking-I-O-非阻塞-I-O" class="headerlink" title="Non-blocking I/O(非阻塞 I/O)"></a>Non-blocking I/O(非阻塞 I/O)</h3><p>与阻塞 I/O 相反，遇到 I/O 请求不会阻塞后续代码的执行，如果访问的资源不可用则会返回一个预定义的常量值。</p><p>非阻塞 I/O 最基本的模式是轮询直到有数据已经返回了，也叫做 <code>忙等待</code>模式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">resources = [socketA, socketB, pipeA]</span><br><span class="line"><span class="keyword">while</span> (!resources.isEmpty()) &#123;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; resources.length; i++) &#123;</span><br><span class="line">    resource = resources[i]</span><br><span class="line">    <span class="comment">// 进行读操作</span></span><br><span class="line">    <span class="keyword">let</span> data = resource.read()</span><br><span class="line">    <span class="keyword">if</span> (data === NO_DATA_AVAILABLE) &#123;</span><br><span class="line">      <span class="comment">// 此时还没有数据</span></span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (data === RESOURCE_CLOSED) &#123;</span><br><span class="line">      <span class="comment">// 资源被释放，从队列中移除该链接</span></span><br><span class="line">      resources.remove(i)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      consumeData(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子已经能有单线程处理多个请求了， 但是不够高效，资源不可用时循环占了太多了 CPU 时间，轮询算法浪费 CPU 时间。</p><h3 id="Event-demultiplexing-事件多路复用"><a href="#Event-demultiplexing-事件多路复用" class="headerlink" title="Event demultiplexing(事件多路复用)"></a>Event demultiplexing(事件多路复用)</h3><p>对于获取非阻塞的资源而言，忙等待模型不是一个理想的技术，大多数现代的操作系统都提供了一种机制来处理并发和非阻塞资源，这个机制被称为<code>同步多路复用</code>。</p><p>这个组件从一系列被监听的资源中收集 I/O 事件并放入队列中，而且会一直处于阻塞状态直到有新的事件可以被处理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">socketA, pipeB;</span><br><span class="line">wachedList.add(socketA, FOR_READ);</span><br><span class="line">wachedList.add(pipeB, FOR_READ);</span><br><span class="line"><span class="keyword">while</span>(events = demultiplexer.watch(wachedList)) &#123;</span><br><span class="line">  <span class="comment">// 事件循环</span></span><br><span class="line">  foreach(event <span class="keyword">in</span> events) &#123;</span><br><span class="line">    <span class="comment">// 永远不会阻塞，并且总会有返回值</span></span><br><span class="line">    data = event.resource.read();</span><br><span class="line">    <span class="keyword">if</span> (data === RESOURCE_CLOSED) &#123;</span><br><span class="line">      <span class="comment">// 资源已经被释放，从观察者队列移除</span></span><br><span class="line">      demultiplexer.unwatch(event.resource);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 获得数据进行处理</span></span><br><span class="line">      consumeData(data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码的三个重要步骤：</p><ol><li>资源被添加到一个数据结构中，为每个资源关联一个特定的操作，在这个例子中是 read。</li><li>事件通知器由一组被观察的资源组成，事件通知器是同步和阻塞的直到有资源可以被<code>read</code>，事件触发后会从调用中返回，之后这些事件可以被处理。</li><li>多路复用器返回的每个事件被处理，此时，和事件相关的资源都可用且不会在操作中阻塞。当所有的事件都被处理完后，继续进入循环等待下一个可以被处理的事件。这个被称作为<code>事件循环(event loop)</code>。</li></ol><p><img src="/assets/img/node_demultiplexer.png" alt="多路复用"></p><p>上图帮助我们理解如何在一个单线程中使用多路复用器和非阻塞 I/O 来处理并发。我们能够看到，只使用一个线程并不会影响我们处理多个 I/O 任务的性能。同时，我们看到任务是在单个线程中随着时间的推移而展开的，而不是分散在多个线程中。我们看到，在单线程中传播的任务相对于多线程中传播的任务反而节约了线程的总体空闲时间，并且更利于程序员编写代码。</p><h3 id="Introducing-to-reactor-pattern-reactor-模式的介绍"><a href="#Introducing-to-reactor-pattern-reactor-模式的介绍" class="headerlink" title="Introducing to reactor pattern(reactor 模式的介绍)"></a>Introducing to reactor pattern(reactor 模式的介绍)</h3><p>主要思想就是每一个 I/O 操作都有一个<code>handler</code>或者成为回调函数(<code>callback</code>)，当事件发生并且被<code>事件循环</code>处理后，这个回调函数就会被调用：</p><p><img src="/assets/img/event_loop.png" alt="event loop"></p><p>一个应用使用<code>reactor</code>模式后：</p><ol><li>应用提交一个请求给事件多路复用器 ，生成 I/O 操作，同时提供事件触发时的<code>handler</code>， 发送请求给事件多路复用器是一个非阻塞的操作，发送后立即返回到应用。</li><li>当一组 I/O 操作完成，事件多路复用器会将新来的事件添加到事件队列中。</li><li>此时，事件循环会迭代事件队列中的每个事件。</li><li>对于每个事件，对应的<code>handler</code>被处理。</li><li><code>handler</code>，是应用程序代码的一部分，<code>handler</code>执行结束后执行权会交回事件循环。但是，在<code>handler</code>执行时可能请求新的异步操作，从而新的操作被添加到事件多路复用器。</li><li>当事件队列的全部事件被处理完后，事件多路复用器再次阻塞直到有一个新的事件触发。</li></ol><p>现在来定义 Node.js 的核心模式：<br><code>模式(reactor)</code>这样处理 I/O，阻塞直到有新的事件从被观察的资源中触发，然后将事件派发给相应的<code>handler</code>。</p><h3 id="Node-js-非阻塞-I-O-引擎——libuv"><a href="#Node-js-非阻塞-I-O-引擎——libuv" class="headerlink" title="Node.js 非阻塞 I/O 引擎——libuv"></a>Node.js 非阻塞 I/O 引擎——libuv</h3><p>每个操作系统都有不同的接口来实现事件多路复用器，Linux 是 epoll，Mac OSX 是 kqueue，Windows 的 IOCP API，即使是在相同的操作系统中对于不同资源的 I/O 操作也不同，所以 Node.js 使用<code>libuv</code>来统一处理 I/O 操作，来达到兼容不同操作系统的目的。</p><h3 id="Node-js-架构"><a href="#Node-js-架构" class="headerlink" title="Node.js 架构"></a>Node.js 架构</h3><p><img src="/assets/img/node_architecture.png" alt="Node.js 架构"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Welcome-to-the-Node-js-Platform&quot;&gt;&lt;a href=&quot;#Welcome-to-the-Node-js-Platform&quot; class=&quot;headerlink&quot; title=&quot;Welcome to the Node.js Platform&quot;&gt;&lt;/a&gt;Welcome to the Node.js Platform&lt;/h1&gt;&lt;h2 id=&quot;Small-modules-小模块&quot;&gt;&lt;a href=&quot;#Small-modules-小模块&quot; class=&quot;headerlink&quot; title=&quot;Small modules(小模块)&quot;&gt;&lt;/a&gt;Small modules(小模块)&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Node.js&lt;/code&gt;使用&lt;code&gt;module&lt;/code&gt;(模块)的概念组织代码的结构。&lt;br&gt;&lt;code&gt;package&lt;/code&gt;可提供复用的模块，有一个 module 作为入口。&lt;br&gt;&lt;code&gt;Node.js&lt;/code&gt;中，致力于设计小模块，为了代码的简洁，更为了更好地控制作用域。有两个主要原则：&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://1016990109.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python 处理excel文件</title>
    <link href="http://1016990109.github.io/2018/05/09/Python-%E5%A4%84%E7%90%86excel%E6%96%87%E4%BB%B6/"/>
    <id>http://1016990109.github.io/2018/05/09/Python-处理excel文件/</id>
    <published>2018-05-09T14:42:58.000Z</published>
    <updated>2018-05-10T09:01:45.774Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要用到Python去处理excel，目标是根据用户输入的信息，先显示每列的列名以及这一列示例行（取前两行信息），然后根据输入的列号删除对应的列。</p><p>网上搜索了下主要有几种方案：</p><h3 id="1-使用xlrd、xlwt、xlutils组合"><a href="#1-使用xlrd、xlwt、xlutils组合" class="headerlink" title="1. 使用xlrd、xlwt、xlutils组合"></a>1. 使用xlrd、xlwt、xlutils组合</h3><p>这种方案比较常见，而且读取和写入速度较快，但是只能操作2003版本之前的xls文件，处理不了xlsx，所以想要处理2003版本之后的请绕道。</p><blockquote><p>注意！<br>xlutils复制的excel格式上会存在一些问题，我在使用的时候就因为这个原因而弃用了，灰底的表格会变成深蓝色底的，难以接受。 </p></blockquote><a id="more"></a><p>xlrd用来读取excel内容，xlwt写入excel内容，xlutils封装了一些常用的操作excel的函数供用户使用，一些使用如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打开excel文件</span></span><br><span class="line">workbook = xlrd.open_workbook(<span class="string">'myexcel.xls'</span>)</span><br><span class="line"><span class="comment">#获取表单</span></span><br><span class="line">worksheet = workbook.sheet_by_index(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#读取数据</span></span><br><span class="line">data = worksheet.cell_value(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"><span class="comment">##另一种获取数据，但这种是包含数据类型的，需要内容可通过value获取</span></span><br><span class="line">data2 = worksheet.cell(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment">#----xlwt库</span></span><br><span class="line"><span class="comment">#新建excel</span></span><br><span class="line">wb = xlwt.Workbook()</span><br><span class="line"><span class="comment">#添加工作薄</span></span><br><span class="line">sh = wb.add_sheet(<span class="string">'Sheet1'</span>)</span><br><span class="line"><span class="comment">#写入数据</span></span><br><span class="line">sh.write(<span class="number">0</span>,<span class="number">0</span>,<span class="string">'data'</span>)</span><br><span class="line"><span class="comment">#保存文件</span></span><br><span class="line">wb.save(<span class="string">'myexcel.xls'</span>)</span><br><span class="line"><span class="comment">#----xlutils库</span></span><br><span class="line"><span class="comment">#打开excel文件</span></span><br><span class="line">book = xlrd.open_workbook(<span class="string">'myexcel.xls'</span>)</span><br><span class="line"><span class="comment">#复制一份</span></span><br><span class="line">new_book = xlutils.copy(book)</span><br><span class="line"><span class="comment">#拿到工作薄</span></span><br><span class="line">worksheet = new_book.getsheet(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#写入数据</span></span><br><span class="line">worksheet.write(<span class="number">0</span>,<span class="number">0</span>,<span class="string">'new data'</span>)</span><br><span class="line"><span class="comment">#保存</span></span><br><span class="line">new_book.save()</span><br></pre></td></tr></table></figure><h3 id="2-使用openpyxl"><a href="#2-使用openpyxl" class="headerlink" title="2. 使用openpyxl"></a>2. 使用openpyxl</h3><p>与xlrd、xlwt、xlutils组合不同，openpyxl只支持excel 2003之后的也就是xlsx文件，示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="comment"># 新建文件</span></span><br><span class="line">workbook = openpyxl.Workbook() </span><br><span class="line"><span class="comment"># 写入文件</span></span><br><span class="line">sheet = workbook.activesheet[<span class="string">'A1'</span>]=<span class="string">'data'</span></span><br><span class="line"><span class="comment"># 保存文件 </span></span><br><span class="line">workbook.save(<span class="string">'test.xlsx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="comment">#打开文件</span></span><br><span class="line">wb = openpyxl.load_workbook(<span class="string">'test.xlsx'</span>)</span><br><span class="line"><span class="comment">#读取数据</span></span><br><span class="line">ws = wb.active</span><br><span class="line">cols = ws.columns</span><br><span class="line">cols[<span class="number">0</span>][<span class="number">1</span>].value = <span class="string">'data'</span></span><br></pre></td></tr></table></figure><h3 id="3-使用win32com操作系统的Excel程序"><a href="#3-使用win32com操作系统的Excel程序" class="headerlink" title="3. 使用win32com操作系统的Excel程序"></a>3. 使用win32com操作系统的Excel程序</h3><p>这种方式约束较多，要求Windows + Microsoft Excel，是使用win32com库来操作Excel程序来完成对excel文件的操作，官方的API特别的复杂，要找到自己需要的API还是要费一番功夫的，但是相应的能做的事也就多了，你能在Excel程序中做的事，几乎使用win32com都能做，具体可用的可查看官方的<a href="https://documentation.devexpress.com/OfficeFileAPI/12078/Spreadsheet-Document-API/Examples/Worksheets" target="_blank" rel="noopener">文档</a>，几乎和vb程序差不多，不用看c++的。<br>举一些我在项目中用到的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打开应用</span></span><br><span class="line">xlApp = win32com.client.Dispatch(<span class="string">'Excel.Application'</span>)</span><br><span class="line"><span class="comment">#打开表格</span></span><br><span class="line">xlBook = xlApp.Workbook.Open(<span class="string">'test.xls'</span>)</span><br><span class="line"><span class="comment">#保存文件</span></span><br><span class="line">xlBook.Save()</span><br><span class="line"><span class="comment">#另存为</span></span><br><span class="line">xlBook.SaveAs(<span class="string">'new.xls'</span>)</span><br><span class="line"><span class="comment">#关闭文件</span></span><br><span class="line">xlBook.Close(SaveChanges=<span class="number">0</span>)</span><br><span class="line"><span class="comment">#获得sheet，传入sheet名字</span></span><br><span class="line">sht = xlBook.Worksheets(<span class="string">'Sheet1'</span>)</span><br><span class="line"><span class="comment">#获得sheet2，传入index</span></span><br><span class="line">sht = xlBook.worksheets[index]</span><br><span class="line"><span class="comment">#获得单元格内容</span></span><br><span class="line">data =  sht.Cells(row, col).Value</span><br><span class="line"><span class="comment">#设置单元格内容</span></span><br><span class="line">sht.Cells(row, col).Value = <span class="string">'New Value'</span></span><br><span class="line"><span class="comment">#获得一块</span></span><br><span class="line">myRange = sht.Range(sht.Cells(row1, col1), sht.Cells(row2, col2)).Value</span><br><span class="line"><span class="comment">#选择sheet</span></span><br><span class="line">sht.Activate</span><br><span class="line"><span class="comment">#获得一列</span></span><br><span class="line">sht.Columns(index)</span><br><span class="line"><span class="comment">#删除一列</span></span><br><span class="line">sht.Columns(<span class="number">1</span>).Delete()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是3种常用操作excel的python库，读者可根据自己的情况选择合适的库。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近需要用到Python去处理excel，目标是根据用户输入的信息，先显示每列的列名以及这一列示例行（取前两行信息），然后根据输入的列号删除对应的列。&lt;/p&gt;
&lt;p&gt;网上搜索了下主要有几种方案：&lt;/p&gt;
&lt;h3 id=&quot;1-使用xlrd、xlwt、xlutils组合&quot;&gt;&lt;a href=&quot;#1-使用xlrd、xlwt、xlutils组合&quot; class=&quot;headerlink&quot; title=&quot;1. 使用xlrd、xlwt、xlutils组合&quot;&gt;&lt;/a&gt;1. 使用xlrd、xlwt、xlutils组合&lt;/h3&gt;&lt;p&gt;这种方案比较常见，而且读取和写入速度较快，但是只能操作2003版本之前的xls文件，处理不了xlsx，所以想要处理2003版本之后的请绕道。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意！&lt;br&gt;xlutils复制的excel格式上会存在一些问题，我在使用的时候就因为这个原因而弃用了，灰底的表格会变成深蓝色底的，难以接受。 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://1016990109.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Vue 过渡&amp;动画</title>
    <link href="http://1016990109.github.io/2018/05/06/Vue-%E8%BF%87%E6%B8%A1-%E5%8A%A8%E7%94%BB/"/>
    <id>http://1016990109.github.io/2018/05/06/Vue-过渡-动画/</id>
    <published>2018-05-06T12:56:26.000Z</published>
    <updated>2018-05-15T12:37:51.740Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单元素-组件的过渡"><a href="#单元素-组件的过渡" class="headerlink" title="单元素/组件的过渡"></a>单元素/组件的过渡</h2><p>使用 transition 封装组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"fade"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"show"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="过渡类名"><a href="#过渡类名" class="headerlink" title="过渡类名"></a>过渡类名</h3><p>使用 transition 之后当触发过渡动画时，会添加相应的 class，没有 name 属性时使用 v-，否则使用定义的{$name}-，共有 6 个 class 切换：</p><ol><li>v-enter：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</li><li>v-enter-active：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</li><li>v-enter-to: 2.1.8 版及以上 定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 v-enter 被移除)，在过渡/动画完成之后移除。</li><li>v-leave: 定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</li><li>v-leave-active：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</li><li>v-leave-to: 2.1.8 版及以上 定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 v-leave 被删除)，在过渡/动画完成之后移除。</li></ol><p>具体过程如下：</p><p><img src="/assets/img/vue_transition.png" alt="vue_transition"></p><h3 id="JavaScript-钩子"><a href="#JavaScript-钩子" class="headerlink" title="JavaScript 钩子"></a>JavaScript 钩子</h3><p>可以在属性中声明钩子:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:before-enter</span>=<span class="string">"beforeEnter"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:enter</span>=<span class="string">"enter"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:after-enter</span>=<span class="string">"afterEnter"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:enter-cancelled</span>=<span class="string">"enterCancelled"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:before-leave</span>=<span class="string">"beforeLeave"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:leave</span>=<span class="string">"leave"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:after-leave</span>=<span class="string">"afterLeave"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:leave-cancelled</span>=<span class="string">"leaveCancelled"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当只用 JavaScript 过渡的时候， 在 enter 和 leave 中，回调函数 done 是必须的 。否则，它们会被同步调用，过渡会立即完成。</p></blockquote><blockquote><p>推荐对于仅使用 JavaScript 过渡的元素添加 v-bind:css=”false”，Vue 会跳过 CSS 的检测。这也可以避免过渡过程中 CSS 的影响。</p></blockquote><h2 id="多个元素的过渡"><a href="#多个元素的过渡" class="headerlink" title="多个元素的过渡"></a>多个元素的过渡</h2><h3 id="过渡-模式"><a href="#过渡-模式" class="headerlink" title="过渡  模式"></a>过渡  模式</h3><ul><li>in-out：新元素先进行过渡，完成之后当前元素过渡离开。</li><li>out-in：当前元素先进行过渡，完成之后新元素过渡进入。</li></ul><h2 id="平滑过渡-列表过渡"><a href="#平滑过渡-列表过渡" class="headerlink" title="平滑过渡(列表过渡)"></a>平滑过渡(列表过渡)</h2><p>使用 <code>&lt;transition-group&gt;</code>组件，可以使列表过渡起来比较平滑，只需要使用<code>v-move</code>即可，具体例子如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">"flip-list"</span> <span class="attr">tag</span>=<span class="string">"ul"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">v-bind:key</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">      &#123;&#123; item &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flip-list-move</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>读者有兴趣可以研究一下洗牌算法，可以保证每个数出现的唯一性，shuffle 算法。</p></blockquote><p>这个看起来很神奇，内部的实现，Vue 使用了一个叫 FLIP 简单的动画队列使用 transforms 将元素从之前的位置平滑过渡新的位置。</p><p>需要注意的是使用 FLIP 过渡的元素不能设置为 display: inline 。作为替代方案，可以设置为 display: inline-block 或者放置于 flex 中。</p><hr><p>未完待续</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;单元素-组件的过渡&quot;&gt;&lt;a href=&quot;#单元素-组件的过渡&quot; class=&quot;headerlink&quot; title=&quot;单元素/组件的过渡&quot;&gt;&lt;/a&gt;单元素/组件的过渡&lt;/h2&gt;&lt;p&gt;使用 transition 封装组件：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;transition&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;fade&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;v-if&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;show&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;hello&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;transition&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://1016990109.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>VSCode配置</title>
    <link href="http://1016990109.github.io/2018/05/05/VSCode%E9%85%8D%E7%BD%AE/"/>
    <id>http://1016990109.github.io/2018/05/05/VSCode配置/</id>
    <published>2018-05-05T11:30:34.000Z</published>
    <updated>2018-05-06T12:50:42.796Z</updated>
    
    <content type="html"><![CDATA[<p>最近使用IDE从WebStorm更换到VSCode，故在此记录下VSCode的一些配置，供以后查看。</p><h2 id="插件篇"><a href="#插件篇" class="headerlink" title="插件篇"></a>插件篇</h2><p>VSCode更倾向于定制化，所以需要自行寻找需要的插件，来提高打码的效率~</p><p>我这里使用了一些暂时需要用到的插件：</p><a id="more"></a><h3 id="1-Beautify"><a href="#1-Beautify" class="headerlink" title="1. Beautify"></a>1. Beautify</h3><p>一个很常用的代码格式化工具，一键格式化，非常方便。</p><h3 id="2-Git-History"><a href="#2-Git-History" class="headerlink" title="2. Git History"></a>2. Git History</h3><p>查看log，文件历史记录等等，在自带git功能上多加了许多功能。</p><h3 id="3-Vetur"><a href="#3-Vetur" class="headerlink" title="3. Vetur"></a>3. Vetur</h3><p>Vue的火热使得前端很多时候都使用它来开发，该插件高亮vue代码以及vue的代码格式化。</p><h3 id="4-Auto-Rename-Tag"><a href="#4-Auto-Rename-Tag" class="headerlink" title="4. Auto Rename Tag"></a>4. Auto Rename Tag</h3><p>自动重命名tag名称，类似于webstorm中的功能。</p><h3 id="5-Auto-Close-Tag"><a href="#5-Auto-Close-Tag" class="headerlink" title="5. Auto Close Tag"></a>5. Auto Close Tag</h3><p>自动关闭tag，类似webstorm。</p><h3 id="6-CSS-Peek"><a href="#6-CSS-Peek" class="headerlink" title="6. CSS Peek"></a>6. CSS Peek</h3><p>自动识别css文件中的类名，在模板中插入class时自动提示。</p><h2 id="配置篇"><a href="#配置篇" class="headerlink" title="配置篇"></a>配置篇</h2><p>记录自己用的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"git.enableSmartCommit"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"git.autofetch"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"terminal.integrated.shell.osx"</span>: <span class="string">"zsh"</span>,</span><br><span class="line">    <span class="string">"window.zoomLevel"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"beautify.language"</span>: &#123;</span><br><span class="line">        <span class="string">"js"</span>: &#123;</span><br><span class="line">            <span class="string">"type"</span>: [</span><br><span class="line">                <span class="string">"javascript"</span>,</span><br><span class="line">                <span class="string">"json"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"filename"</span>: [</span><br><span class="line">                <span class="string">".jshintrc"</span>,</span><br><span class="line">                <span class="string">".jsbeautifyrc"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"css"</span>: [</span><br><span class="line">            <span class="string">"css"</span>,</span><br><span class="line">            <span class="string">"scss"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"html"</span>: [</span><br><span class="line">            <span class="string">"htm"</span>,</span><br><span class="line">            <span class="string">"html"</span>,</span><br><span class="line">            <span class="string">"vue"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"html.format.endWithNewline"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"prettier.singleQuote"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"prettier.semi"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"vetur.format.defaultFormatter.html"</span>: <span class="string">"js-beautify-html"</span>,</span><br><span class="line">    <span class="string">"vetur.format.defaultFormatterOptions"</span>: &#123;</span><br><span class="line">      <span class="string">"wrap_attributes"</span>: <span class="string">"force-aligned"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近使用IDE从WebStorm更换到VSCode，故在此记录下VSCode的一些配置，供以后查看。&lt;/p&gt;
&lt;h2 id=&quot;插件篇&quot;&gt;&lt;a href=&quot;#插件篇&quot; class=&quot;headerlink&quot; title=&quot;插件篇&quot;&gt;&lt;/a&gt;插件篇&lt;/h2&gt;&lt;p&gt;VSCode更倾向于定制化，所以需要自行寻找需要的插件，来提高打码的效率~&lt;/p&gt;
&lt;p&gt;我这里使用了一些暂时需要用到的插件：&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://1016990109.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue 基础的一些注意事项</title>
    <link href="http://1016990109.github.io/2018/04/17/Vue%E5%9F%BA%E7%A1%80%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>http://1016990109.github.io/2018/04/17/Vue基础的一些注意事项/</id>
    <published>2018-04-17T07:47:16.000Z</published>
    <updated>2018-05-06T12:49:35.543Z</updated>
    
    <content type="html"><![CDATA[<p>最近准备学习一波 Vue，因为有 React 的基础，所以学起来倒也不是很吃力。下面是一些在学习中遇到的可能需要注意的地方。</p><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><h3 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h3><blockquote><ol><li>绝对不要使用用户的输入作为插值，可能造成 XSS 攻击。</li><li>每个绑定只能包含单个表达式，下面表达式都不会生效。</li></ol></blockquote><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是语句，不是表达式 --&gt;</span></span><br><span class="line">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></span><br><span class="line">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault():</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="计算属性和侦听器"><a href="#计算属性和侦听器" class="headerlink" title="计算属性和侦听器"></a>计算属性和侦听器</h2><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>默认只有 getter，但是也可以有 setter</p><h3 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h3><p>何时使用侦听器（watch）:当需要在数据变化时执行异步或开销较大的操作。</p><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>Vue 默认情况下是会复用元素的，例如切换用户名或邮箱登录，如果两者都有 input 元素，那么在切换的时候 input 不会被替换掉，只会更改 placeholder 之类的属性。</p><p>如果添加了唯一的 key 值，Vue 将不会再复用元素， 使用 key 来判断是否元素变更。</p><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>注意，v-show 不支持 &lt;template> 元素，也不支持 v-else，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-show</span>=<span class="string">"!show"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- will show 'template-show' --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>template-show<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"!show"</span>&gt;</span></span><br><span class="line">    if</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- can't use v-else after v-show --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-for-与-v-if"><a href="#v-for-与-v-if" class="headerlink" title="v-for 与 v-if"></a>v-for 与 v-if</h3><p>v-for 的优先级更高，所以可以对每一项进行 if 判断是否显示。</p><h2 id="数组更新检测"><a href="#数组更新检测" class="headerlink" title="数组更新检测"></a>数组更新检测</h2><p>直接改变数组内容的称为变异方法，如 push、pop、shift、unshift、splice、sort 等，可以响应更新；而直接生成新数组的方法如 slice、concat、filter 等则需要对 data 进行赋值，如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">example1.items = example1.items.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.message.match(<span class="regexp">/Foo/</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="不能检测更新"><a href="#不能检测更新" class="headerlink" title="不能检测更新"></a>不能检测更新</h3><p>利用索引更改，arr[index] = newValue，或者改变数组长度，arr.length = newLength，可以用下面两种方式实现更新：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue.set</span></span><br><span class="line">Vue.set(vm.items, indexOfItem, newValue)</span><br><span class="line"><span class="comment">// Array.prototype.splice</span></span><br><span class="line">vm.items.splice(indexOfItem, <span class="number">1</span>, newValue)</span><br><span class="line"><span class="comment">//change length</span></span><br><span class="line">vm.items.splice(newLength)</span><br></pre></td></tr></table></figure><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>@keyup.ctrl 控制时，仅仅按下 ctrl 并弹起是无用的，其他键必须同时按下才有效。</p><h2 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h2><h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><p>v-model 绑定时，如果是基于输入法（中文、日文等）不会实时更新，只是输入结束后才会更新。</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="DOM-模板-解析注意事项"><a href="#DOM-模板-解析注意事项" class="headerlink" title="DOM 模板  解析注意事项"></a>DOM 模板  解析注意事项</h3><blockquote><p>当使用 DOM 作为模板时 (例如，使用 el 选项来把 Vue 实例挂载到一个已有内容的元素上)，你会受到 HTML 本身的一些限制，因为 Vue 只有在浏览器解析、规范化模板之后才能获取其内容。尤其要注意，像 &lt;ul>、&lt;ol>、&lt;table>、&lt;select> 这样的元素里允许包含的元素有限制，而另一些像 &lt;option> 这样的元素只能出现在某些特定元素的内部。在自定义组件中使用这些受限制的元素时会导致一些问题，例如：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-row</span>&gt;</span>...<span class="tag">&lt;/<span class="name">my-row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自定义组件 <my-row> 会被当作无效的内容，因此会导致错误的渲染结果。变通的方案是使用特殊的 is 特性：</my-row></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">is</span>=<span class="string">"my-row"</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是在.vue 文件或者使用字符串模板（template: ‘&lt;div>123&lt;/div>‘）则不会有这个问题。</p><h3 id="Prop"><a href="#Prop" class="headerlink" title="Prop"></a>Prop</h3><p>class 和 style 会合并属性，父组件值和组件内的值进行合并</p><h3 id="给组件绑定原生事件"><a href="#给组件绑定原生事件" class="headerlink" title="给组件绑定原生事件"></a>给组件绑定原生事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-on:click.native</span>=<span class="string">"doTheThing"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="sync-修饰符"><a href="#sync-修饰符" class="headerlink" title=".sync 修饰符"></a>.sync 修饰符</h3><p>2.0 移除但是 2.3 版本又加了回来，但是变成了编译的语法糖，会自动添加 v-on 绑定，如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">:foo.sync</span>=<span class="string">"bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br></pre></td></tr></table></figure><p>会被扩展为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">:foo</span>=<span class="string">"bar"</span> @<span class="attr">update:foo</span>=<span class="string">"val =&gt; bar = val"</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当子组件需要更新 foo 的值时，它需要显式地触发一个更新事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'update:foo'</span>, newValue)</span><br></pre></td></tr></table></figure><h3 id="非父子组件之间的通信"><a href="#非父子组件之间的通信" class="headerlink" title="非父子组件之间的通信"></a>非父子组件之间的通信</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bus = <span class="keyword">new</span> Vue()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发组件 A 中的事件</span></span><br><span class="line">bus.$emit(<span class="string">'id-selected'</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在组件 B 创建的钩子中监听事件</span></span><br><span class="line">bus.$on(<span class="string">'id-selected'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="使用插槽分发内容"><a href="#使用插槽分发内容" class="headerlink" title="使用插槽分发内容"></a>使用插槽分发内容</h3><blockquote><p>除非子组件模板包含至少一个 <strong>&lt;slot></strong> 插口，否则父组件的内容将会被<strong>丢弃</strong>。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件的标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span></span><br><span class="line">    只有在没有要分发的内容时才会显示。</span><br><span class="line">  <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><blockquote><p><strong>&lt;slot></strong> 元素可以用一个特殊的特性 name 来进一步配置如何分发内容。多个插槽可以有不同的名字。具名插槽将匹配内容片段中有对应 slot 特性的元素。</p></blockquote><blockquote><p>在 2.5.0+，<strong>slot-scope</strong> 能被用在任意元素或组件中而不再局限于 <strong>&lt;template></strong>。</p></blockquote><h3 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h3><p>slot-scope 支持解构，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot-scope</span>=<span class="string">"&#123; text &#125;"</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中 { text } 将子组件传递来的值进行解构，比如子组件有值 obj: {text: ‘test message’}。</p><h3 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h3><blockquote><p>通过使用保留的 <component> 元素，并对其 is 特性进行动态绑定，你可以在同一个挂载点动态切换多个组件：</component></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    currentView: <span class="string">'home'</span> <span class="comment">//也可以是对象组件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    home: &#123;</span><br><span class="line">      <span class="comment">/* ... */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    posts: &#123;</span><br><span class="line">      <span class="comment">/* ... */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    archive: &#123;</span><br><span class="line">      <span class="comment">/* ... */</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">"currentView"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 组件在 vm.currentview 变化时改变！ --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure><p>动态组件需要缓存的时候可以使用 keep-alive，失活的组件会被缓存，避免重复渲染：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 失活的组件将会被缓存！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">"currentTabComponent"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="组件间的循环引用"><a href="#组件间的循环引用" class="headerlink" title="组件间的循环引用"></a>组件间的循环引用</h3><p>常见的情况是文件系统，文件夹(folder)包含的内容(content)可能包含文件夹(folder)，这样就形成了循环引用，当使用 Vue.component 将这两个组件注册为全局组件的时候，框架会自动为你解决这个矛盾。然而，如果你使用诸如 webpack 或者 Browserify 之类的模块化管理工具来 require/import 组件的话，就会报错了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to mount component: template or render function not defined.</span><br></pre></td></tr></table></figure><p>我们可以选择在文件夹(folder)组件中声明在 beforeCreate 时才注册组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beforeCreate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.$options.components.TreeFolderContents = <span class="built_in">require</span>(<span class="string">'./tree-folder-contents.vue'</span>).default</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><p>使用 v-once 指令使得模板只会渲染一遍而不会监听数据改变。</p><h2 id="处理边界情况"><a href="#处理边界情况" class="headerlink" title="处理边界情况"></a>处理边界情况</h2><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><blockquote><p>provide 选项允许我们指定我们想要提供给后代组件的数据/方法。在这个例子中，就是 <google-map> 内部的 getMap 方法：</google-map></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">provide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getMap: <span class="keyword">this</span>.getMap</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在任何后代都能使用getMap方法，只要在后代组件里声明注入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inject: [<span class="string">'getMap'</span>]</span><br></pre></td></tr></table></figure><h3 id="内联模板"><a href="#内联模板" class="headerlink" title="内联模板"></a>内联模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button-message</span> <span class="attr">v-on:message</span>=<span class="string">"handleMessage"</span> <span class="attr">inline-template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>slot<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button-message</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后渲染的会是slot，而不是button-message定义的模板内容。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近准备学习一波 Vue，因为有 React 的基础，所以学起来倒也不是很吃力。下面是一些在学习中遇到的可能需要注意的地方。&lt;/p&gt;
&lt;h2 id=&quot;模板语法&quot;&gt;&lt;a href=&quot;#模板语法&quot; class=&quot;headerlink&quot; title=&quot;模板语法&quot;&gt;&lt;/a&gt;模板语法&lt;/h2&gt;&lt;h3 id=&quot;插值&quot;&gt;&lt;a href=&quot;#插值&quot; class=&quot;headerlink&quot; title=&quot;插值&quot;&gt;&lt;/a&gt;插值&lt;/h3&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;绝对不要使用用户的输入作为插值，可能造成 XSS 攻击。&lt;/li&gt;
&lt;li&gt;每个绑定只能包含单个表达式，下面表达式都不会生效。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://1016990109.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>rbac分析（php源码）</title>
    <link href="http://1016990109.github.io/2016/05/23/rbac-php/"/>
    <id>http://1016990109.github.io/2016/05/23/rbac-php/</id>
    <published>2016-05-23T14:23:47.000Z</published>
    <updated>2018-04-17T08:45:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="rbac简介"><a href="#rbac简介" class="headerlink" title="rbac简介"></a>rbac简介</h2><blockquote><p>基于角色的访问控制（Role-Based Access Control）作为传统访问控制（自主访问，强制访问）的有前景的代替受到广泛的关注。在RBAC中，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。这就极大地简化了权限的管理。在一个组织中，角色是为了完成各种工作而创造，用户则依据它的责任和资格来被指派相应的角色，用户可以很容易地从一个角色被指派到另一个角色。角色可依新的需求和系统的合并而赋予新的权限，而权限也可根据需要而从某角色中回收。角色与角色的关系可以建立起来以囊括更广泛的客观情况。</p></blockquote><a id="more"></a><p>用一张图来简单地描述一下</p><p><img src="/assets/img/rbac_intro.png" alt="rbac图解"></p><p>rbac有3个重要概念：<strong>用户</strong>、<strong>角色</strong>、<strong>权限</strong>。通俗地来说，就是把若干个<strong>权限</strong>分配给某个<strong>角色</strong>，然后在需要时把若干个<strong>角色</strong>分配给指定的<strong>用户</strong>，rbac就是通过这种方式实现访问控制的。</p><p>管理员通过分配给一个用户角色来允许该用户可以做某些事情。</p><p><strong>RBAC支持三个著名的安全原则</strong>：</p><ol><li>最小权限原则<br>将其角色配置成其完成任务所需要的最小的权限集</li><li>责任分离原则<br>可以通过调用相互独立互斥的角色来共同完成敏感的任务而体现，比如要求一个计帐员和财务管理员共参与同一过帐</li><li>数据抽象<br>可以通过权限的抽象来体现，如财务操作用借款、存款等抽象权限，而不用操作系统提供的典型的读、写、执行权限</li></ol><h2 id="为什么使用rbac"><a href="#为什么使用rbac" class="headerlink" title="为什么使用rbac"></a>为什么使用rbac</h2><p>普通的ACL在权限越来越多的时候需要维护的权限太多，这造成了ACL的瓶颈。而rbac可以有效地解决这个问题。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>仍然有很多权限存在于系统（问题）</li><li>人员移动的时候只需要改变人员的角色</li><li>维护大量的权限仍然是个问题</li><li>维护分配给每个角色的权限比较容易</li><li>角色的权限分配需要双重检查确保不会分配错误的权限给任何角色</li></ul><h2 id="一款开源的rbac库——PHP-RBAC"><a href="#一款开源的rbac库——PHP-RBAC" class="headerlink" title="一款开源的rbac库——PHP-RBAC"></a>一款开源的rbac库——PHP-RBAC</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="http://phprbac.net/" title="PHP-RBAC" target="_blank" rel="noopener">PHP-RBAC</a>是php的一个简单库，实现了rbac一些基本的功能（不包括用户组），它为开发者提供了NIST Level 2 Standard Role Based Access Control。</p><p>下面是PHP-RBAC的一个demo：它实现了角色的分层管理，更贴近实际。<br><img src="http://phprbac.net/img/rbac.png" alt="rbac-demo"></p><p>我自己简单地试了下库，代码是这样：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// turn on all errors</span></span><br><span class="line">error_reporting(E_ALL);</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpRbac</span>\<span class="title">Rbac</span>;</span><br><span class="line"><span class="comment">// autoloader</span></span><br><span class="line"><span class="keyword">require</span> dirname(<span class="keyword">__DIR__</span>) . <span class="string">'/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line">$test = <span class="keyword">new</span> Test();</span><br><span class="line">$test-&gt;myTest();</span><br><span class="line"><span class="comment">// myTest();</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">$rbac = <span class="keyword">new</span> Rbac(<span class="string">'unit_test'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">$rbac = <span class="keyword">new</span> Rbac();</span><br><span class="line">$rbac-&gt;reset(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a Permission</span></span><br><span class="line">$perm_id = $rbac-&gt;Permissions-&gt;add(<span class="string">'delete_posts'</span>, <span class="string">'Can delete forum posts'</span>);</span><br><span class="line">$perm_id2 = $rbac-&gt;Permissions-&gt;add(<span class="string">'add_posts'</span>, <span class="string">'Can add forum posts'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a Role</span></span><br><span class="line">$role_id = $rbac-&gt;Roles-&gt;add(<span class="string">'forum_moderator'</span>, <span class="string">'User can moderate forums'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// The following are equivalent statements</span></span><br><span class="line">$rbac-&gt;assign($role_id, $perm_id);</span><br><span class="line">$rbac-&gt;assign($role_id, $perm_id2);</span><br><span class="line"></span><br><span class="line">$rbac-&gt;Users-&gt;assign($role_id, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">$res = $rbac-&gt;Roles-&gt;permissions(<span class="string">"2"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($res <span class="keyword">as</span> $perm) &#123;</span><br><span class="line"><span class="keyword">print</span>($rbac-&gt;Permissions-&gt;getDescription($perm).<span class="string">' '</span>);</span><br><span class="line"><span class="keyword">print</span>($rbac-&gt;Permissions-&gt;depth($perm).<span class="string">' '</span>);</span><br><span class="line"><span class="keyword">print</span>($rbac-&gt;Permissions-&gt;getPath($perm).<span class="string">' '</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果：<br><img src="/assets/img/phprbac_result.png" alt="运行结果"><br>使用非常容易吧，这是一个轻量的库，只有几百k的大小，所以对于一些对权限管理要求不是特别复杂的（没有用户组、分类等）系统可以考虑使用哦！</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>PHP-RBAC的表设计同许多rbac的软件类似：<br><img src="/assets/img/rbac_table.png" alt="rbac表"><br><img src="/assets/img/phprbac_table.png" alt="php-rbac表"></p><p>PHP-RBAC分层实现：<br>使用树形结构实现（嵌套集合）：<br><img src="/assets/img/phprbac_tree.png" alt="树形结构数据库实现"><br><img src="/assets/img/phprbac_tree_em.png" alt="php-rbac例子"></p><p>End.<br><em>关于rbac的扩展以后有时间再给大家讲讲。</em></p><p>参考资料：</p><ol><li><a href="http://baike.baidu.com/link?url=5FPK3srV0UpUKEJProX7MIJDmX4FFlEp8tQI5VQ8-pnI1xMUv8BY9E4TDeM89astDTGW9Mr0uBWOXpwk_2egr" target="_blank" rel="noopener">http://baike.baidu.com/link?url=5FPK3srV0UpUKEJProX7MIJDmX4FFlEp8tQI5VQ8-pnI1xMUv8BY9E4TDeM89astDTGW9Mr0uBWOXpwk_2egr</a>_</li><li><a href="http://phprbac.net/" target="_blank" rel="noopener">http://phprbac.net/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;rbac简介&quot;&gt;&lt;a href=&quot;#rbac简介&quot; class=&quot;headerlink&quot; title=&quot;rbac简介&quot;&gt;&lt;/a&gt;rbac简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;基于角色的访问控制（Role-Based Access Control）作为传统访问控制（自主访问，强制访问）的有前景的代替受到广泛的关注。在RBAC中，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。这就极大地简化了权限的管理。在一个组织中，角色是为了完成各种工作而创造，用户则依据它的责任和资格来被指派相应的角色，用户可以很容易地从一个角色被指派到另一个角色。角色可依新的需求和系统的合并而赋予新的权限，而权限也可根据需要而从某角色中回收。角色与角色的关系可以建立起来以囊括更广泛的客观情况。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="源码" scheme="http://1016990109.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="php" scheme="http://1016990109.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>开始我的instagrame</title>
    <link href="http://1016990109.github.io/2016/05/20/instagrame/"/>
    <id>http://1016990109.github.io/2016/05/20/instagrame/</id>
    <published>2016-05-20T07:09:39.000Z</published>
    <updated>2018-04-17T07:29:54.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一次偶然的机会，我认识了instagrame"><a href="#一次偶然的机会，我认识了instagrame" class="headerlink" title="一次偶然的机会，我认识了instagrame"></a>一次偶然的机会，我认识了instagrame</h2><p>一天，一个偶然，我逛了下<a href="http://litten.github.io/" title="litten的博客" target="_blank" rel="noopener">litten</a>的博客，发现了他把自己的照片分享在了博客上，于是我便很好奇博主是用了什么方法分享的。于是我查看了博主搭建博客的过程，了解到他是分享了在instagrame上的照片，这就是我第一次认识instagrame。</p><h2 id="开始了解instagrame"><a href="#开始了解instagrame" class="headerlink" title="开始了解instagrame"></a>开始了解instagrame</h2><p>秉着好学的心态，我也想在自己的博客上搭建一个这样分享照片的平台，就这样我开始了我的instagrame之旅。<br><a id="more"></a></p><h3 id="百度百科的介绍："><a href="#百度百科的介绍：" class="headerlink" title="百度百科的介绍："></a>百度百科的介绍：</h3><blockquote><p>Instagram是一款最初运行在iOS平台上的移动应用，以一种快速、美妙和有趣的方式将你随时抓拍下的图片分享彼此，安卓版Instagram于2012年4月3日起登陆Android应用商店Google Play。2012年4月10号，Facebook宣布以10亿美元收购Instagram。2012年10月25号，Facebook以总值7.15亿美元收购Instagram。2012年12月，Facebook旗下的图片共享服务Instagram因其使用图片共享服务的新条款而在互联网上引起轩然大波，Instagram对此进行了澄清，称不会在广告中使用或销售用户的照片，从而打消了用户的顾虑。北京时间2013年10月22日，诺基亚宣布instagram将会入驻Windows Phone市场，11月21日Instagram正式登录Windows Phone 8平台。</p></blockquote><h3 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h3><blockquote><p>☆ 100%免费自定义设计的过滤器和边框，例如XPro-II、Earlybird、Rise、Amaro、Hudson、Lo-fi、Sutro、Toaster、 Brannan、Inkwell、Walden、Hefe、Nashville、1977等等[8]<br>☆ 实时分享到新浪微博、Facebook、Twitter、Flickr、Tumblr和Foursquare<br>☆ 平行和放射状移轴模糊特效可提供额外的景深效果[9]<br>☆ 上传不受限，即拍即传即分享<br>☆ 通过接收和发送赞和评论与朋友互动<br>☆ iPhone前置和后置摄像头的全面支持</p></blockquote><p>可能大家用的时候会感到很奇怪，<strong>怎么网页版的instagrame不支持上传照片么</strong>？可能是instagrame更注重生活中的抓拍吧，生活中还是使用移动设备多一点，所以它这个设计也是符合它的理念的（快速记录生活）。</p><p>instagrame分享图片的时候可以选择地理位置（最后还可以生成图片地图哦^_^），也可以选择分享的对象，非常的个性化，可以看下效果哦！<br><img src="/assets/img/instagrame.png" alt="图片地图" title="图片地图"></p><h2 id="最后说两句"><a href="#最后说两句" class="headerlink" title="最后说两句"></a>最后说两句</h2><p>instagrame还可以上传小视频，有点像现在的微信小视频之类的，不过只能最多15秒。<br>总之，我还是比较喜欢instagrame来收录生活中的场景的。</p><p>参考资料：</p><ol><li><a href="http://baike.baidu.com/link?url=QoodiA5Hzcnxlq268Lk3jkOPedAy3ICAVI-T6LKpay6A08o6UaTSU4tUrpqQuXJhFix9R3IAYzWN0KFY01iPRa" target="_blank" rel="noopener">http://baike.baidu.com/link?url=QoodiA5Hzcnxlq268Lk3jkOPedAy3ICAVI-T6LKpay6A08o6UaTSU4tUrpqQuXJhFix9R3IAYzWN0KFY01iPRa</a></li><li><a href="http://1016990109.github.io/2016/05/20/instagrame/">http://1016990109.github.io/2016/05/20/instagrame/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一次偶然的机会，我认识了instagrame&quot;&gt;&lt;a href=&quot;#一次偶然的机会，我认识了instagrame&quot; class=&quot;headerlink&quot; title=&quot;一次偶然的机会，我认识了instagrame&quot;&gt;&lt;/a&gt;一次偶然的机会，我认识了instagrame&lt;/h2&gt;&lt;p&gt;一天，一个偶然，我逛了下&lt;a href=&quot;http://litten.github.io/&quot; title=&quot;litten的博客&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;litten&lt;/a&gt;的博客，发现了他把自己的照片分享在了博客上，于是我便很好奇博主是用了什么方法分享的。于是我查看了博主搭建博客的过程，了解到他是分享了在instagrame上的照片，这就是我第一次认识instagrame。&lt;/p&gt;
&lt;h2 id=&quot;开始了解instagrame&quot;&gt;&lt;a href=&quot;#开始了解instagrame&quot; class=&quot;headerlink&quot; title=&quot;开始了解instagrame&quot;&gt;&lt;/a&gt;开始了解instagrame&lt;/h2&gt;&lt;p&gt;秉着好学的心态，我也想在自己的博客上搭建一个这样分享照片的平台，就这样我开始了我的instagrame之旅。&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://1016990109.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="随笔" scheme="http://1016990109.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
