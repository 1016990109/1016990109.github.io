<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>七秒悲伤的博客</title>
  
  <subtitle>一个深藏功与名的软件开发爱好者</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://1016990109.github.io/"/>
  <updated>2018-05-05T12:18:41.168Z</updated>
  <id>http://1016990109.github.io/</id>
  
  <author>
    <name>七秒悲伤</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VSCode配置</title>
    <link href="http://1016990109.github.io/2018/05/05/VSCode%E9%85%8D%E7%BD%AE/"/>
    <id>http://1016990109.github.io/2018/05/05/VSCode配置/</id>
    <published>2018-05-05T11:30:34.000Z</published>
    <updated>2018-05-05T12:18:41.168Z</updated>
    
    <content type="html"><![CDATA[<p>最近使用IDE从WebStorm更换到VSCode，故在此记录下VSCode的一些配置，供以后查看。</p><h2 id="插件篇"><a href="#插件篇" class="headerlink" title="插件篇"></a>插件篇</h2><p>VSCode更倾向于定制化，所以需要自行寻找需要的插件，来提高打码的效率~</p><p>我这里使用了一些暂时需要用到的插件：</p><h3 id="1-Beautify"><a href="#1-Beautify" class="headerlink" title="1. Beautify"></a>1. Beautify</h3><p>一个很常用的代码格式化工具，一键格式化，非常方便。</p><h3 id="2-Git-History"><a href="#2-Git-History" class="headerlink" title="2. Git History"></a>2. Git History</h3><p>查看log，文件历史记录等等，在自带git功能上多加了许多功能。</p><h3 id="3-Vetur"><a href="#3-Vetur" class="headerlink" title="3. Vetur"></a>3. Vetur</h3><p>Vue的火热使得前端很多时候都使用它来开发，该插件高亮vue代码以及vue的代码格式化。</p><h3 id="4-Auto-Rename-Tag"><a href="#4-Auto-Rename-Tag" class="headerlink" title="4. Auto Rename Tag"></a>4. Auto Rename Tag</h3><p>自动重命名tag名称，类似于webstorm中的功能。</p><h3 id="5-Auto-Close-Tag"><a href="#5-Auto-Close-Tag" class="headerlink" title="5. Auto Close Tag"></a>5. Auto Close Tag</h3><p>自动关闭tag，类似webstorm。</p><h3 id="6-CSS-Peek"><a href="#6-CSS-Peek" class="headerlink" title="6. CSS Peek"></a>6. CSS Peek</h3><p>自动识别css文件中的类名，在模板中插入class时自动提示。</p><h2 id="配置篇"><a href="#配置篇" class="headerlink" title="配置篇"></a>配置篇</h2><p>记录自己用的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"git.enableSmartCommit"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"git.autofetch"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"terminal.integrated.shell.osx"</span>: <span class="string">"zsh"</span>,</span><br><span class="line">    <span class="string">"window.zoomLevel"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"beautify.language"</span>: &#123;</span><br><span class="line">        <span class="string">"js"</span>: &#123;</span><br><span class="line">            <span class="string">"type"</span>: [</span><br><span class="line">                <span class="string">"javascript"</span>,</span><br><span class="line">                <span class="string">"json"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"filename"</span>: [</span><br><span class="line">                <span class="string">".jshintrc"</span>,</span><br><span class="line">                <span class="string">".jsbeautifyrc"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"css"</span>: [</span><br><span class="line">            <span class="string">"css"</span>,</span><br><span class="line">            <span class="string">"scss"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"html"</span>: [</span><br><span class="line">            <span class="string">"htm"</span>,</span><br><span class="line">            <span class="string">"html"</span>,</span><br><span class="line">            <span class="string">"vue"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"html.format.endWithNewline"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"prettier.singleQuote"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"prettier.semi"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"vetur.format.defaultFormatter.html"</span>: <span class="string">"js-beautify-html"</span>,</span><br><span class="line">    <span class="string">"vetur.format.defaultFormatterOptions"</span>: &#123;</span><br><span class="line">      <span class="string">"wrap_attributes"</span>: <span class="string">"force-aligned"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近使用IDE从WebStorm更换到VSCode，故在此记录下VSCode的一些配置，供以后查看。&lt;/p&gt;
&lt;h2 id=&quot;插件篇&quot;&gt;&lt;a href=&quot;#插件篇&quot; class=&quot;headerlink&quot; title=&quot;插件篇&quot;&gt;&lt;/a&gt;插件篇&lt;/h2&gt;&lt;p&gt;VSCode更倾
      
    
    </summary>
    
    
      <category term="前端" scheme="http://1016990109.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue 的一些注意事项</title>
    <link href="http://1016990109.github.io/2018/04/17/Vue-%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>http://1016990109.github.io/2018/04/17/Vue-的一些注意事项/</id>
    <published>2018-04-17T07:47:16.000Z</published>
    <updated>2018-04-19T13:59:33.403Z</updated>
    
    <content type="html"><![CDATA[<p>最近准备学习一波 Vue，因为有 React 的基础，所以学起来倒也不是很吃力。下面是一些在学习中遇到的可能需要注意的地方。</p><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><h3 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h3><blockquote><ol><li>绝对不要使用用户的输入作为插值，可能造成 XSS 攻击。</li><li>每个绑定只能包含单个表达式，下面表达式都不会生效。</li></ol></blockquote><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是语句，不是表达式 --&gt;</span></span><br><span class="line">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></span><br><span class="line">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault():</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="计算属性和侦听器"><a href="#计算属性和侦听器" class="headerlink" title="计算属性和侦听器"></a>计算属性和侦听器</h2><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>默认只有 getter，但是也可以有 setter</p><h3 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h3><p>何时使用侦听器（watch）:当需要在数据变化时执行异步或开销较大的操作。</p><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>Vue 默认情况下是会复用元素的，例如切换用户名或邮箱登录，如果两者都有 input 元素，那么在切换的时候 input 不会被替换掉，只会更改 placeholder 之类的属性。</p><p>如果添加了唯一的 key 值，Vue 将不会再复用元素， 使用 key 来判断是否元素变更。</p><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>注意，v-show 不支持 &lt;template> 元素，也不支持 v-else，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-show</span>=<span class="string">"!show"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- will show 'template-show' --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>template-show<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"!show"</span>&gt;</span></span><br><span class="line">    if</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- can't use v-else after v-show --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-for-与-v-if"><a href="#v-for-与-v-if" class="headerlink" title="v-for 与 v-if"></a>v-for 与 v-if</h3><p>v-for 的优先级更高，所以可以对每一项进行 if 判断是否显示。</p><h2 id="数组更新检测"><a href="#数组更新检测" class="headerlink" title="数组更新检测"></a>数组更新检测</h2><p>直接改变数组内容的称为变异方法，如 push、pop、shift、unshift、splice、sort 等，可以响应更新；而直接生成新数组的方法如 slice、concat、filter 等则需要对 data 进行赋值，如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">example1.items = example1.items.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.message.match(<span class="regexp">/Foo/</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="不能检测更新"><a href="#不能检测更新" class="headerlink" title="不能检测更新"></a>不能检测更新</h3><p>利用索引更改，arr[index] = newValue，或者改变数组长度，arr.length = newLength，可以用下面两种方式实现更新：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue.set</span></span><br><span class="line">Vue.set(vm.items, indexOfItem, newValue)</span><br><span class="line"><span class="comment">// Array.prototype.splice</span></span><br><span class="line">vm.items.splice(indexOfItem, <span class="number">1</span>, newValue)</span><br><span class="line"><span class="comment">//change length</span></span><br><span class="line">vm.items.splice(newLength)</span><br></pre></td></tr></table></figure><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>@keyup.ctrl 控制时，仅仅按下 ctrl 并弹起是无用的，其他键必须同时按下才有效。</p><h2 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h2><h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><p>v-model 绑定时，如果是基于输入法（中文、日文等）不会实时更新，只是输入结束后才会更新。</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="DOM-模板-解析注意事项"><a href="#DOM-模板-解析注意事项" class="headerlink" title="DOM 模板  解析注意事项"></a>DOM 模板  解析注意事项</h3><blockquote><p>当使用 DOM 作为模板时 (例如，使用 el 选项来把 Vue 实例挂载到一个已有内容的元素上)，你会受到 HTML 本身的一些限制，因为 Vue 只有在浏览器解析、规范化模板之后才能获取其内容。尤其要注意，像 &lt;ul>、&lt;ol>、&lt;table>、&lt;select> 这样的元素里允许包含的元素有限制，而另一些像 &lt;option> 这样的元素只能出现在某些特定元素的内部。在自定义组件中使用这些受限制的元素时会导致一些问题，例如：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-row</span>&gt;</span>...<span class="tag">&lt;/<span class="name">my-row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自定义组件 <my-row> 会被当作无效的内容，因此会导致错误的渲染结果。变通的方案是使用特殊的 is 特性：</my-row></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">is</span>=<span class="string">"my-row"</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是在.vue 文件或者使用字符串模板（template: ‘&lt;div>123&lt;/div>‘）则不会有这个问题。</p><h3 id="Prop"><a href="#Prop" class="headerlink" title="Prop"></a>Prop</h3><p>class 和 style 会合并属性，父组件值和组件内的值进行合并</p><h3 id="给组件绑定原生事件"><a href="#给组件绑定原生事件" class="headerlink" title="给组件绑定原生事件"></a>给组件绑定原生事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-on:click.native</span>=<span class="string">"doTheThing"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="sync-修饰符"><a href="#sync-修饰符" class="headerlink" title=".sync 修饰符"></a>.sync 修饰符</h3><p>2.0 移除但是 2.3 版本又加了回来，但是变成了编译的语法糖，会自动添加 v-on 绑定，如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">:foo.sync</span>=<span class="string">"bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br></pre></td></tr></table></figure><p>会被扩展为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">:foo</span>=<span class="string">"bar"</span> @<span class="attr">update:foo</span>=<span class="string">"val =&gt; bar = val"</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当子组件需要更新 foo 的值时，它需要显式地触发一个更新事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'update:foo'</span>, newValue)</span><br></pre></td></tr></table></figure><h3 id="非父子组件之间的通信"><a href="#非父子组件之间的通信" class="headerlink" title="非父子组件之间的通信"></a>非父子组件之间的通信</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bus = <span class="keyword">new</span> Vue()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发组件 A 中的事件</span></span><br><span class="line">bus.$emit(<span class="string">'id-selected'</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在组件 B 创建的钩子中监听事件</span></span><br><span class="line">bus.$on(<span class="string">'id-selected'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="使用插槽分发内容"><a href="#使用插槽分发内容" class="headerlink" title="使用插槽分发内容"></a>使用插槽分发内容</h3><blockquote><p>除非子组件模板包含至少一个 <strong>&lt;slot></strong> 插口，否则父组件的内容将会被<strong>丢弃</strong>。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件的标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span></span><br><span class="line">    只有在没有要分发的内容时才会显示。</span><br><span class="line">  <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><blockquote><p><strong>&lt;slot></strong> 元素可以用一个特殊的特性 name 来进一步配置如何分发内容。多个插槽可以有不同的名字。具名插槽将匹配内容片段中有对应 slot 特性的元素。</p></blockquote><blockquote><p>在 2.5.0+，<strong>slot-scope</strong> 能被用在任意元素或组件中而不再局限于 <strong>&lt;template></strong>。</p></blockquote><h3 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h3><p>slot-scope 支持解构，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot-scope</span>=<span class="string">"&#123; text &#125;"</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中 { text } 将子组件传递来的值进行解构，比如子组件有值 obj: {text: ‘test message’}。</p><h3 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h3><blockquote><p>通过使用保留的 <component> 元素，并对其 is 特性进行动态绑定，你可以在同一个挂载点动态切换多个组件：</component></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    currentView: <span class="string">'home'</span> <span class="comment">//也可以是对象组件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    home: &#123;</span><br><span class="line">      <span class="comment">/* ... */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    posts: &#123;</span><br><span class="line">      <span class="comment">/* ... */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    archive: &#123;</span><br><span class="line">      <span class="comment">/* ... */</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">"currentView"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 组件在 vm.currentview 变化时改变！ --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="组件间的循环引用"><a href="#组件间的循环引用" class="headerlink" title="组件间的循环引用"></a>组件间的循环引用</h3><p>常见的情况是文件系统，文件夹(folder)包含的内容(content)可能包含文件夹(folder)，这样就形成了循环引用，当使用 Vue.component 将这两个组件注册为全局组件的时候，框架会自动为你解决这个矛盾。然而，如果你使用诸如 webpack 或者 Browserify 之类的模块化管理工具来 require/import 组件的话，就会报错了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to mount component: template or render function not defined.</span><br></pre></td></tr></table></figure><p>我们可以选择在文件夹(folder)组件中声明在 beforeCreate 时才注册组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beforeCreate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.$options.components.TreeFolderContents = <span class="built_in">require</span>(<span class="string">'./tree-folder-contents.vue'</span>).default</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><p>使用 v-once 指令使得模板只会渲染一遍而不会监听数据改变。</p><hr><p>写论文去了，之后再更新…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近准备学习一波 Vue，因为有 React 的基础，所以学起来倒也不是很吃力。下面是一些在学习中遇到的可能需要注意的地方。&lt;/p&gt;
&lt;h2 id=&quot;模板语法&quot;&gt;&lt;a href=&quot;#模板语法&quot; class=&quot;headerlink&quot; title=&quot;模板语法&quot;&gt;&lt;/a&gt;模板语法&lt;/h2&gt;&lt;h3 id=&quot;插值&quot;&gt;&lt;a href=&quot;#插值&quot; class=&quot;headerlink&quot; title=&quot;插值&quot;&gt;&lt;/a&gt;插值&lt;/h3&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;绝对不要使用用户的输入作为插值，可能造成 XSS 攻击。&lt;/li&gt;
&lt;li&gt;每个绑定只能包含单个表达式，下面表达式都不会生效。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://1016990109.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>rbac分析（php源码）</title>
    <link href="http://1016990109.github.io/2016/05/23/rbac-php/"/>
    <id>http://1016990109.github.io/2016/05/23/rbac-php/</id>
    <published>2016-05-23T14:23:47.000Z</published>
    <updated>2018-04-17T08:45:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="rbac简介"><a href="#rbac简介" class="headerlink" title="rbac简介"></a>rbac简介</h2><blockquote><p>基于角色的访问控制（Role-Based Access Control）作为传统访问控制（自主访问，强制访问）的有前景的代替受到广泛的关注。在RBAC中，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。这就极大地简化了权限的管理。在一个组织中，角色是为了完成各种工作而创造，用户则依据它的责任和资格来被指派相应的角色，用户可以很容易地从一个角色被指派到另一个角色。角色可依新的需求和系统的合并而赋予新的权限，而权限也可根据需要而从某角色中回收。角色与角色的关系可以建立起来以囊括更广泛的客观情况。</p></blockquote><a id="more"></a><p>用一张图来简单地描述一下</p><p><img src="/assets/img/rbac_intro.png" alt="rbac图解"></p><p>rbac有3个重要概念：<strong>用户</strong>、<strong>角色</strong>、<strong>权限</strong>。通俗地来说，就是把若干个<strong>权限</strong>分配给某个<strong>角色</strong>，然后在需要时把若干个<strong>角色</strong>分配给指定的<strong>用户</strong>，rbac就是通过这种方式实现访问控制的。</p><p>管理员通过分配给一个用户角色来允许该用户可以做某些事情。</p><p><strong>RBAC支持三个著名的安全原则</strong>：</p><ol><li>最小权限原则<br>将其角色配置成其完成任务所需要的最小的权限集</li><li>责任分离原则<br>可以通过调用相互独立互斥的角色来共同完成敏感的任务而体现，比如要求一个计帐员和财务管理员共参与同一过帐</li><li>数据抽象<br>可以通过权限的抽象来体现，如财务操作用借款、存款等抽象权限，而不用操作系统提供的典型的读、写、执行权限</li></ol><h2 id="为什么使用rbac"><a href="#为什么使用rbac" class="headerlink" title="为什么使用rbac"></a>为什么使用rbac</h2><p>普通的ACL在权限越来越多的时候需要维护的权限太多，这造成了ACL的瓶颈。而rbac可以有效地解决这个问题。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>仍然有很多权限存在于系统（问题）</li><li>人员移动的时候只需要改变人员的角色</li><li>维护大量的权限仍然是个问题</li><li>维护分配给每个角色的权限比较容易</li><li>角色的权限分配需要双重检查确保不会分配错误的权限给任何角色</li></ul><h2 id="一款开源的rbac库——PHP-RBAC"><a href="#一款开源的rbac库——PHP-RBAC" class="headerlink" title="一款开源的rbac库——PHP-RBAC"></a>一款开源的rbac库——PHP-RBAC</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="http://phprbac.net/" title="PHP-RBAC" target="_blank" rel="noopener">PHP-RBAC</a>是php的一个简单库，实现了rbac一些基本的功能（不包括用户组），它为开发者提供了NIST Level 2 Standard Role Based Access Control。</p><p>下面是PHP-RBAC的一个demo：它实现了角色的分层管理，更贴近实际。<br><img src="http://phprbac.net/img/rbac.png" alt="rbac-demo"></p><p>我自己简单地试了下库，代码是这样：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// turn on all errors</span></span><br><span class="line">error_reporting(E_ALL);</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpRbac</span>\<span class="title">Rbac</span>;</span><br><span class="line"><span class="comment">// autoloader</span></span><br><span class="line"><span class="keyword">require</span> dirname(<span class="keyword">__DIR__</span>) . <span class="string">'/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line">$test = <span class="keyword">new</span> Test();</span><br><span class="line">$test-&gt;myTest();</span><br><span class="line"><span class="comment">// myTest();</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">$rbac = <span class="keyword">new</span> Rbac(<span class="string">'unit_test'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">$rbac = <span class="keyword">new</span> Rbac();</span><br><span class="line">$rbac-&gt;reset(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a Permission</span></span><br><span class="line">$perm_id = $rbac-&gt;Permissions-&gt;add(<span class="string">'delete_posts'</span>, <span class="string">'Can delete forum posts'</span>);</span><br><span class="line">$perm_id2 = $rbac-&gt;Permissions-&gt;add(<span class="string">'add_posts'</span>, <span class="string">'Can add forum posts'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a Role</span></span><br><span class="line">$role_id = $rbac-&gt;Roles-&gt;add(<span class="string">'forum_moderator'</span>, <span class="string">'User can moderate forums'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// The following are equivalent statements</span></span><br><span class="line">$rbac-&gt;assign($role_id, $perm_id);</span><br><span class="line">$rbac-&gt;assign($role_id, $perm_id2);</span><br><span class="line"></span><br><span class="line">$rbac-&gt;Users-&gt;assign($role_id, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">$res = $rbac-&gt;Roles-&gt;permissions(<span class="string">"2"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($res <span class="keyword">as</span> $perm) &#123;</span><br><span class="line"><span class="keyword">print</span>($rbac-&gt;Permissions-&gt;getDescription($perm).<span class="string">' '</span>);</span><br><span class="line"><span class="keyword">print</span>($rbac-&gt;Permissions-&gt;depth($perm).<span class="string">' '</span>);</span><br><span class="line"><span class="keyword">print</span>($rbac-&gt;Permissions-&gt;getPath($perm).<span class="string">' '</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果：<br><img src="/assets/img/phprbac_result.png" alt="运行结果"><br>使用非常容易吧，这是一个轻量的库，只有几百k的大小，所以对于一些对权限管理要求不是特别复杂的（没有用户组、分类等）系统可以考虑使用哦！</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>PHP-RBAC的表设计同许多rbac的软件类似：<br><img src="/assets/img/rbac_table.png" alt="rbac表"><br><img src="/assets/img/phprbac_table.png" alt="php-rbac表"></p><p>PHP-RBAC分层实现：<br>使用树形结构实现（嵌套集合）：<br><img src="/assets/img/phprbac_tree.png" alt="树形结构数据库实现"><br><img src="/assets/img/phprbac_tree_em.png" alt="php-rbac例子"></p><p>End.<br><em>关于rbac的扩展以后有时间再给大家讲讲。</em></p><p>参考资料：</p><ol><li><a href="http://baike.baidu.com/link?url=5FPK3srV0UpUKEJProX7MIJDmX4FFlEp8tQI5VQ8-pnI1xMUv8BY9E4TDeM89astDTGW9Mr0uBWOXpwk_2egr" target="_blank" rel="noopener">http://baike.baidu.com/link?url=5FPK3srV0UpUKEJProX7MIJDmX4FFlEp8tQI5VQ8-pnI1xMUv8BY9E4TDeM89astDTGW9Mr0uBWOXpwk_2egr</a>_</li><li><a href="http://phprbac.net/" target="_blank" rel="noopener">http://phprbac.net/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;rbac简介&quot;&gt;&lt;a href=&quot;#rbac简介&quot; class=&quot;headerlink&quot; title=&quot;rbac简介&quot;&gt;&lt;/a&gt;rbac简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;基于角色的访问控制（Role-Based Access Control）作为传统访问控制（自主访问，强制访问）的有前景的代替受到广泛的关注。在RBAC中，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。这就极大地简化了权限的管理。在一个组织中，角色是为了完成各种工作而创造，用户则依据它的责任和资格来被指派相应的角色，用户可以很容易地从一个角色被指派到另一个角色。角色可依新的需求和系统的合并而赋予新的权限，而权限也可根据需要而从某角色中回收。角色与角色的关系可以建立起来以囊括更广泛的客观情况。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="源码" scheme="http://1016990109.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="php" scheme="http://1016990109.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>开始我的instagrame</title>
    <link href="http://1016990109.github.io/2016/05/20/instagrame/"/>
    <id>http://1016990109.github.io/2016/05/20/instagrame/</id>
    <published>2016-05-20T07:09:39.000Z</published>
    <updated>2018-04-17T07:29:54.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一次偶然的机会，我认识了instagrame"><a href="#一次偶然的机会，我认识了instagrame" class="headerlink" title="一次偶然的机会，我认识了instagrame"></a>一次偶然的机会，我认识了instagrame</h2><p>一天，一个偶然，我逛了下<a href="http://litten.github.io/" title="litten的博客" target="_blank" rel="noopener">litten</a>的博客，发现了他把自己的照片分享在了博客上，于是我便很好奇博主是用了什么方法分享的。于是我查看了博主搭建博客的过程，了解到他是分享了在instagrame上的照片，这就是我第一次认识instagrame。</p><h2 id="开始了解instagrame"><a href="#开始了解instagrame" class="headerlink" title="开始了解instagrame"></a>开始了解instagrame</h2><p>秉着好学的心态，我也想在自己的博客上搭建一个这样分享照片的平台，就这样我开始了我的instagrame之旅。<br><a id="more"></a></p><h3 id="百度百科的介绍："><a href="#百度百科的介绍：" class="headerlink" title="百度百科的介绍："></a>百度百科的介绍：</h3><blockquote><p>Instagram是一款最初运行在iOS平台上的移动应用，以一种快速、美妙和有趣的方式将你随时抓拍下的图片分享彼此，安卓版Instagram于2012年4月3日起登陆Android应用商店Google Play。2012年4月10号，Facebook宣布以10亿美元收购Instagram。2012年10月25号，Facebook以总值7.15亿美元收购Instagram。2012年12月，Facebook旗下的图片共享服务Instagram因其使用图片共享服务的新条款而在互联网上引起轩然大波，Instagram对此进行了澄清，称不会在广告中使用或销售用户的照片，从而打消了用户的顾虑。北京时间2013年10月22日，诺基亚宣布instagram将会入驻Windows Phone市场，11月21日Instagram正式登录Windows Phone 8平台。</p></blockquote><h3 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h3><blockquote><p>☆ 100%免费自定义设计的过滤器和边框，例如XPro-II、Earlybird、Rise、Amaro、Hudson、Lo-fi、Sutro、Toaster、 Brannan、Inkwell、Walden、Hefe、Nashville、1977等等[8]<br>☆ 实时分享到新浪微博、Facebook、Twitter、Flickr、Tumblr和Foursquare<br>☆ 平行和放射状移轴模糊特效可提供额外的景深效果[9]<br>☆ 上传不受限，即拍即传即分享<br>☆ 通过接收和发送赞和评论与朋友互动<br>☆ iPhone前置和后置摄像头的全面支持</p></blockquote><p>可能大家用的时候会感到很奇怪，<strong>怎么网页版的instagrame不支持上传照片么</strong>？可能是instagrame更注重生活中的抓拍吧，生活中还是使用移动设备多一点，所以它这个设计也是符合它的理念的（快速记录生活）。</p><p>instagrame分享图片的时候可以选择地理位置（最后还可以生成图片地图哦^_^），也可以选择分享的对象，非常的个性化，可以看下效果哦！<br><img src="/assets/img/instagrame.png" alt="图片地图" title="图片地图"></p><h2 id="最后说两句"><a href="#最后说两句" class="headerlink" title="最后说两句"></a>最后说两句</h2><p>instagrame还可以上传小视频，有点像现在的微信小视频之类的，不过只能最多15秒。<br>总之，我还是比较喜欢instagrame来收录生活中的场景的。</p><p>参考资料：</p><ol><li><a href="http://baike.baidu.com/link?url=QoodiA5Hzcnxlq268Lk3jkOPedAy3ICAVI-T6LKpay6A08o6UaTSU4tUrpqQuXJhFix9R3IAYzWN0KFY01iPRa" target="_blank" rel="noopener">http://baike.baidu.com/link?url=QoodiA5Hzcnxlq268Lk3jkOPedAy3ICAVI-T6LKpay6A08o6UaTSU4tUrpqQuXJhFix9R3IAYzWN0KFY01iPRa</a></li><li><a href="http://1016990109.github.io/2016/05/20/instagrame/">http://1016990109.github.io/2016/05/20/instagrame/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一次偶然的机会，我认识了instagrame&quot;&gt;&lt;a href=&quot;#一次偶然的机会，我认识了instagrame&quot; class=&quot;headerlink&quot; title=&quot;一次偶然的机会，我认识了instagrame&quot;&gt;&lt;/a&gt;一次偶然的机会，我认识了instagrame&lt;/h2&gt;&lt;p&gt;一天，一个偶然，我逛了下&lt;a href=&quot;http://litten.github.io/&quot; title=&quot;litten的博客&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;litten&lt;/a&gt;的博客，发现了他把自己的照片分享在了博客上，于是我便很好奇博主是用了什么方法分享的。于是我查看了博主搭建博客的过程，了解到他是分享了在instagrame上的照片，这就是我第一次认识instagrame。&lt;/p&gt;
&lt;h2 id=&quot;开始了解instagrame&quot;&gt;&lt;a href=&quot;#开始了解instagrame&quot; class=&quot;headerlink&quot; title=&quot;开始了解instagrame&quot;&gt;&lt;/a&gt;开始了解instagrame&lt;/h2&gt;&lt;p&gt;秉着好学的心态，我也想在自己的博客上搭建一个这样分享照片的平台，就这样我开始了我的instagrame之旅。&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://1016990109.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="随笔" scheme="http://1016990109.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
